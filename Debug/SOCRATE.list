
SOCRATE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014e0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080016a4  080016a4  000116a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001728  08001728  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08001728  08001728  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001728  08001728  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08001728  08001728  00011728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08001730  08001730  00011730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08001738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000080  080017b8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000012c  080017b8  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d005  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001895  00000000  00000000  0002d0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a8  00000000  00000000  0002e950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000240  00000000  00000000  0002ebf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f15  00000000  00000000  0002ee38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004976  00000000  00000000  00033d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081c6a  00000000  00000000  000386c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ba32d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000210c  00000000  00000000  000ba380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000080 	.word	0x20000080
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800168c 	.word	0x0800168c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000084 	.word	0x20000084
 8000200:	0800168c 	.word	0x0800168c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	f003 021f 	and.w	r2, r3, #31
 8000226:	4907      	ldr	r1, [pc, #28]	; (8000244 <NVIC_EnableIRQ+0x30>)
 8000228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022c:	095b      	lsrs	r3, r3, #5
 800022e:	2001      	movs	r0, #1
 8000230:	fa00 f202 	lsl.w	r2, r0, r2
 8000234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr
 8000244:	e000e100 	.word	0xe000e100

08000248 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	6039      	str	r1, [r7, #0]
 8000252:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8000254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000258:	2b00      	cmp	r3, #0
 800025a:	da0c      	bge.n	8000276 <NVIC_SetPriority+0x2e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	b2da      	uxtb	r2, r3
 8000260:	490d      	ldr	r1, [pc, #52]	; (8000298 <NVIC_SetPriority+0x50>)
 8000262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000266:	f003 030f 	and.w	r3, r3, #15
 800026a:	3b04      	subs	r3, #4
 800026c:	0112      	lsls	r2, r2, #4
 800026e:	b2d2      	uxtb	r2, r2
 8000270:	440b      	add	r3, r1
 8000272:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000274:	e009      	b.n	800028a <NVIC_SetPriority+0x42>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	b2da      	uxtb	r2, r3
 800027a:	4908      	ldr	r1, [pc, #32]	; (800029c <NVIC_SetPriority+0x54>)
 800027c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000280:	0112      	lsls	r2, r2, #4
 8000282:	b2d2      	uxtb	r2, r2
 8000284:	440b      	add	r3, r1
 8000286:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00
 800029c:	e000e100 	.word	0xe000e100

080002a0 <_ZN15STM32F446Usart3C1Ev>:
#include "STM32F446Usart.h"

STM32F446Usart3* STM32F446Usart3::instance =0;


STM32F446Usart3::STM32F446Usart3()
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af02      	add	r7, sp, #8
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	4a38      	ldr	r2, [pc, #224]	; (800038c <_ZN15STM32F446Usart3C1Ev+0xec>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	3308      	adds	r3, #8
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 f9ca 	bl	800064c <_ZN8BuffFifoImLt64EEC1Ev>
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 f9c4 	bl	800064c <_ZN8BuffFifoImLt64EEC1Ev>
{
	config = new hardwareConfig();
 80002c4:	2004      	movs	r0, #4
 80002c6:	f000 ffe4 	bl	8001292 <_Znwj>
 80002ca:	4603      	mov	r3, r0
 80002cc:	461c      	mov	r4, r3
 80002ce:	4620      	mov	r0, r4
 80002d0:	f000 fc6e 	bl	8000bb0 <_ZN14hardwareConfigC1Ev>
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218
	//active la clk du gpio B et du usart 3
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;//(1<<18)
 80002da:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <_ZN15STM32F446Usart3C1Ev+0xf0>)
 80002dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002de:	4a2c      	ldr	r2, [pc, #176]	; (8000390 <_ZN15STM32F446Usart3C1Ev+0xf0>)
 80002e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002e4:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80002e6:	4b2a      	ldr	r3, [pc, #168]	; (8000390 <_ZN15STM32F446Usart3C1Ev+0xf0>)
 80002e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ea:	4a29      	ldr	r2, [pc, #164]	; (8000390 <_ZN15STM32F446Usart3C1Ev+0xf0>)
 80002ec:	f043 0302 	orr.w	r3, r3, #2
 80002f0:	6413      	str	r3, [r2, #64]	; 0x40


	//mode alternatif pour pb10 et 11
	config->GPIO_Config(GPIOC, 10, ALTERNATE, 7);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
 80002f8:	2307      	movs	r3, #7
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	2302      	movs	r3, #2
 80002fe:	220a      	movs	r2, #10
 8000300:	4924      	ldr	r1, [pc, #144]	; (8000394 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8000302:	f000 fcf3 	bl	8000cec <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
	config->GPIO_Config(GPIOC, 5 , ALTERNATE, 7);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
 800030c:	2307      	movs	r3, #7
 800030e:	9300      	str	r3, [sp, #0]
 8000310:	2302      	movs	r3, #2
 8000312:	2205      	movs	r2, #5
 8000314:	491f      	ldr	r1, [pc, #124]	; (8000394 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8000316:	f000 fce9 	bl	8000cec <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
	GPIOC->AFR[0] |= (7<<8); // registre af7 fction alternative USART3
 800031a:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 800031c:	6a1b      	ldr	r3, [r3, #32]
 800031e:	4a1d      	ldr	r2, [pc, #116]	; (8000394 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8000320:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000324:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[1] |= (7<<12);
 8000326:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8000328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800032a:	4a1a      	ldr	r2, [pc, #104]	; (8000394 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 800032c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000330:	6253      	str	r3, [r2, #36]	; 0x24

	//sélection du baud 8N1 @9600
	USART3->CR1 &= ~USART_CR1_UE;// usart disable
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <_ZN15STM32F446Usart3C1Ev+0xf8>)
 8000334:	899b      	ldrh	r3, [r3, #12]
 8000336:	b29b      	uxth	r3, r3
 8000338:	4a17      	ldr	r2, [pc, #92]	; (8000398 <_ZN15STM32F446Usart3C1Ev+0xf8>)
 800033a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800033e:	b29b      	uxth	r3, r3
 8000340:	8193      	strh	r3, [r2, #12]
	NVIC_EnableIRQ(USART3_IRQn);
 8000342:	2027      	movs	r0, #39	; 0x27
 8000344:	f7ff ff66 	bl	8000214 <NVIC_EnableIRQ>
	NVIC_SetPriority(USART3_IRQn,4);
 8000348:	2104      	movs	r1, #4
 800034a:	2027      	movs	r0, #39	; 0x27
 800034c:	f7ff ff7c 	bl	8000248 <NVIC_SetPriority>
	//active le tx et rx + les interruptions dee chaqu'un
	USART3->CR1 |=  USART_CR1_TE | USART_CR1_RE |  USART_CR1_RXNEIE | USART_CR1_TXEIE;
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <_ZN15STM32F446Usart3C1Ev+0xf8>)
 8000352:	899b      	ldrh	r3, [r3, #12]
 8000354:	b29b      	uxth	r3, r3
 8000356:	4a10      	ldr	r2, [pc, #64]	; (8000398 <_ZN15STM32F446Usart3C1Ev+0xf8>)
 8000358:	f043 03ac 	orr.w	r3, r3, #172	; 0xac
 800035c:	b29b      	uxth	r3, r3
 800035e:	8193      	strh	r3, [r2, #12]
	setBaudRate(9600);
 8000360:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f000 f8d5 	bl	8000514 <_ZN15STM32F446Usart311setBaudRateEm>
	USART3->CR1 |= USART_CR1_UE; //usart enable
 800036a:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <_ZN15STM32F446Usart3C1Ev+0xf8>)
 800036c:	899b      	ldrh	r3, [r3, #12]
 800036e:	b29b      	uxth	r3, r3
 8000370:	4a09      	ldr	r2, [pc, #36]	; (8000398 <_ZN15STM32F446Usart3C1Ev+0xf8>)
 8000372:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000376:	b29b      	uxth	r3, r3
 8000378:	8193      	strh	r3, [r2, #12]


	isTransmitting = false;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2200      	movs	r2, #0
 800037e:	711a      	strb	r2, [r3, #4]
}
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4618      	mov	r0, r3
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bd90      	pop	{r4, r7, pc}
 800038a:	bf00      	nop
 800038c:	080016ac 	.word	0x080016ac
 8000390:	40023800 	.word	0x40023800
 8000394:	40020800 	.word	0x40020800
 8000398:	40004800 	.word	0x40004800

0800039c <_ZN15STM32F446Usart3D1Ev>:

STM32F446Usart3::~STM32F446Usart3()
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	4a11      	ldr	r2, [pc, #68]	; (80003ec <_ZN15STM32F446Usart3D1Ev+0x50>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	601a      	str	r2, [r3, #0]
{
	if (instance)
 80003aa:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <_ZN15STM32F446Usart3D1Ev+0x54>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d008      	beq.n	80003c4 <_ZN15STM32F446Usart3D1Ev+0x28>
		delete instance;
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <_ZN15STM32F446Usart3D1Ev+0x54>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d004      	beq.n	80003c4 <_ZN15STM32F446Usart3D1Ev+0x28>
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	3204      	adds	r2, #4
 80003be:	6812      	ldr	r2, [r2, #0]
 80003c0:	4618      	mov	r0, r3
 80003c2:	4790      	blx	r2
	if(config)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d009      	beq.n	80003e2 <_ZN15STM32F446Usart3D1Ev+0x46>
		delete config;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d004      	beq.n	80003e2 <_ZN15STM32F446Usart3D1Ev+0x46>
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	3204      	adds	r2, #4
 80003dc:	6812      	ldr	r2, [r2, #0]
 80003de:	4618      	mov	r0, r3
 80003e0:	4790      	blx	r2
}
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4618      	mov	r0, r3
 80003e6:	3708      	adds	r7, #8
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	080016ac 	.word	0x080016ac
 80003f0:	2000009c 	.word	0x2000009c

080003f4 <_ZN15STM32F446Usart3D0Ev>:
STM32F446Usart3::~STM32F446Usart3()
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
}
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f7ff ffcd 	bl	800039c <_ZN15STM32F446Usart3D1Ev>
 8000402:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f000 ff41 	bl	800128e <_ZdlPvj>
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4618      	mov	r0, r3
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <_ZN15STM32F446Usart311getInstanceEv>:
STM32F446Usart3 * STM32F446Usart3::getInstance()
{
 8000418:	b598      	push	{r3, r4, r7, lr}
 800041a:	af00      	add	r7, sp, #0
	if(instance==0)
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <_ZN15STM32F446Usart311getInstanceEv+0x2c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d10a      	bne.n	800043a <_ZN15STM32F446Usart311getInstanceEv+0x22>
		instance=new STM32F446Usart3();
 8000424:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8000428:	f000 ff33 	bl	8001292 <_Znwj>
 800042c:	4603      	mov	r3, r0
 800042e:	461c      	mov	r4, r3
 8000430:	4620      	mov	r0, r4
 8000432:	f7ff ff35 	bl	80002a0 <_ZN15STM32F446Usart3C1Ev>
 8000436:	4b03      	ldr	r3, [pc, #12]	; (8000444 <_ZN15STM32F446Usart311getInstanceEv+0x2c>)
 8000438:	601c      	str	r4, [r3, #0]
	return instance;
 800043a:	4b02      	ldr	r3, [pc, #8]	; (8000444 <_ZN15STM32F446Usart311getInstanceEv+0x2c>)
 800043c:	681b      	ldr	r3, [r3, #0]
}
 800043e:	4618      	mov	r0, r3
 8000440:	bd98      	pop	{r3, r4, r7, pc}
 8000442:	bf00      	nop
 8000444:	2000009c 	.word	0x2000009c

08000448 <_ZN15STM32F446Usart35writeEh>:
void STM32F446Usart3::write(uint8_t data)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	460b      	mov	r3, r1
 8000452:	70fb      	strb	r3, [r7, #3]
	buffTx.add(data);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800045a:	78fa      	ldrb	r2, [r7, #3]
 800045c:	4611      	mov	r1, r2
 800045e:	4618      	mov	r0, r3
 8000460:	f000 f900 	bl	8000664 <_ZN8BuffFifoImLt64EE3addEm>
	if(!isTransmitting)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	791b      	ldrb	r3, [r3, #4]
 8000468:	f083 0301 	eor.w	r3, r3, #1
 800046c:	b2db      	uxtb	r3, r3
 800046e:	2b00      	cmp	r3, #0
 8000470:	d00a      	beq.n	8000488 <_ZN15STM32F446Usart35writeEh+0x40>
	{
		isTransmitting =true;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2201      	movs	r2, #1
 8000476:	711a      	strb	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_TXEIE;
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <_ZN15STM32F446Usart35writeEh+0x48>)
 800047a:	899b      	ldrh	r3, [r3, #12]
 800047c:	b29b      	uxth	r3, r3
 800047e:	4a04      	ldr	r2, [pc, #16]	; (8000490 <_ZN15STM32F446Usart35writeEh+0x48>)
 8000480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000484:	b29b      	uxth	r3, r3
 8000486:	8193      	strh	r3, [r2, #12]
	}
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40004800 	.word	0x40004800

08000494 <_ZN15STM32F446Usart35writeEPc>:
void STM32F446Usart3::write(char *string)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]

	while(*string)
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d008      	beq.n	80004b8 <_ZN15STM32F446Usart35writeEPc+0x24>
	{
		write(*string++);
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	1c5a      	adds	r2, r3, #1
 80004aa:	603a      	str	r2, [r7, #0]
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	4619      	mov	r1, r3
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	f7ff ffc9 	bl	8000448 <_ZN15STM32F446Usart35writeEh>
	while(*string)
 80004b6:	e7f2      	b.n	800049e <_ZN15STM32F446Usart35writeEPc+0xa>
	}

}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <_ZN15STM32F446Usart34readEv>:
uint8_t STM32F446Usart3:: read(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	if(buffRx.isEmpty())
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3308      	adds	r3, #8
 80004cc:	4618      	mov	r0, r3
 80004ce:	f000 f8ea 	bl	80006a6 <_ZNK8BuffFifoImLt64EE7isEmptyEv>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <_ZN15STM32F446Usart34readEv+0x1c>
		return 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	e006      	b.n	80004ea <_ZN15STM32F446Usart34readEv+0x2a>
	return buffRx.rem();
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3308      	adds	r3, #8
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 f8f3 	bl	80006cc <_ZN8BuffFifoImLt64EE3remEv>
 80004e6:	4603      	mov	r3, r0
 80004e8:	b2db      	uxtb	r3, r3
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <_ZNK15STM32F446Usart313dataAvailableEv>:
bool STM32F446Usart3::dataAvailable() const
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b082      	sub	sp, #8
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
	return !buffRx.isEmpty();
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	3308      	adds	r3, #8
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 f8d1 	bl	80006a6 <_ZNK8BuffFifoImLt64EE7isEmptyEv>
 8000504:	4603      	mov	r3, r0
 8000506:	f083 0301 	eor.w	r3, r3, #1
 800050a:	b2db      	uxtb	r3, r3
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <_ZN15STM32F446Usart311setBaudRateEm>:
void STM32F446Usart3::setBaudRate(uint32_t baudrate)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	if(baudrate > 2810000)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	4a14      	ldr	r2, [pc, #80]	; (8000574 <_ZN15STM32F446Usart311setBaudRateEm+0x60>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d90a      	bls.n	800053c <_ZN15STM32F446Usart311setBaudRateEm+0x28>
		USART3->CR1 |= USART_CR1_OVER8;
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 8000528:	899b      	ldrh	r3, [r3, #12]
 800052a:	b29b      	uxth	r3, r3
 800052c:	4a12      	ldr	r2, [pc, #72]	; (8000578 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 800052e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000536:	b29b      	uxth	r3, r3
 8000538:	8193      	strh	r3, [r2, #12]
 800053a:	e007      	b.n	800054c <_ZN15STM32F446Usart311setBaudRateEm+0x38>
	else
		USART3->CR1 &= ~USART_CR1_OVER8;
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 800053e:	899b      	ldrh	r3, [r3, #12]
 8000540:	b29b      	uxth	r3, r3
 8000542:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 8000544:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000548:	b29b      	uxth	r3, r3
 800054a:	8193      	strh	r3, [r2, #12]

	USART3->BRR |= (SystemCoreClock>>2) / baudrate;
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 800054e:	891b      	ldrh	r3, [r3, #8]
 8000550:	b29a      	uxth	r2, r3
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <_ZN15STM32F446Usart311setBaudRateEm+0x68>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	0899      	lsrs	r1, r3, #2
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	fbb1 f3f3 	udiv	r3, r1, r3
 800055e:	b29b      	uxth	r3, r3
 8000560:	4905      	ldr	r1, [pc, #20]	; (8000578 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 8000562:	4313      	orrs	r3, r2
 8000564:	b29b      	uxth	r3, r3
 8000566:	810b      	strh	r3, [r1, #8]
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	002ae090 	.word	0x002ae090
 8000578:	40004800 	.word	0x40004800
 800057c:	20000008 	.word	0x20000008

08000580 <USART3_IRQHandler>:

extern "C"
{
void USART3_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	volatile unsigned int usartStatus;
	char tmp;
	//recupere le statu de l'usart
	usartStatus = USART3->SR;
 8000586:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <USART3_IRQHandler+0xc4>)
 8000588:	881b      	ldrh	r3, [r3, #0]
 800058a:	b29b      	uxth	r3, r3
 800058c:	603b      	str	r3, [r7, #0]

	if(usartStatus & USART_SR_RXNE)
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	f003 0320 	and.w	r3, r3, #32
 8000594:	2b00      	cmp	r3, #0
 8000596:	bf14      	ite	ne
 8000598:	2301      	movne	r3, #1
 800059a:	2300      	moveq	r3, #0
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d013      	beq.n	80005ca <USART3_IRQHandler+0x4a>
	{
		USART3->SR &= ~USART_SR_RXNE;
 80005a2:	4b28      	ldr	r3, [pc, #160]	; (8000644 <USART3_IRQHandler+0xc4>)
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	4a26      	ldr	r2, [pc, #152]	; (8000644 <USART3_IRQHandler+0xc4>)
 80005aa:	f023 0320 	bic.w	r3, r3, #32
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	8013      	strh	r3, [r2, #0]
		tmp =USART3->DR;
 80005b2:	4b24      	ldr	r3, [pc, #144]	; (8000644 <USART3_IRQHandler+0xc4>)
 80005b4:	889b      	ldrh	r3, [r3, #4]
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	71fb      	strb	r3, [r7, #7]
		STM32F446Usart3::instance->buffRx.add(tmp);
 80005ba:	4b23      	ldr	r3, [pc, #140]	; (8000648 <USART3_IRQHandler+0xc8>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3308      	adds	r3, #8
 80005c0:	79fa      	ldrb	r2, [r7, #7]
 80005c2:	4611      	mov	r1, r2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f84d 	bl	8000664 <_ZN8BuffFifoImLt64EE3addEm>
	}
	if(usartStatus & USART_SR_TXE)
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	bf14      	ite	ne
 80005d4:	2301      	movne	r3, #1
 80005d6:	2300      	moveq	r3, #0
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d02d      	beq.n	800063a <USART3_IRQHandler+0xba>
	{
		USART3->SR &= ~USART_CR1_TXEIE;
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <USART3_IRQHandler+0xc4>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	4a17      	ldr	r2, [pc, #92]	; (8000644 <USART3_IRQHandler+0xc4>)
 80005e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	8013      	strh	r3, [r2, #0]
		if(STM32F446Usart3::instance->buffTx.isEmpty())
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <USART3_IRQHandler+0xc8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f855 	bl	80006a6 <_ZNK8BuffFifoImLt64EE7isEmptyEv>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d00c      	beq.n	800061c <USART3_IRQHandler+0x9c>
		{
			STM32F446Usart3::instance->isTransmitting =false;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <USART3_IRQHandler+0xc8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	711a      	strb	r2, [r3, #4]
			USART3->CR1 &= (~USART_CR1_TXEIE);
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <USART3_IRQHandler+0xc4>)
 800060c:	899b      	ldrh	r3, [r3, #12]
 800060e:	b29b      	uxth	r3, r3
 8000610:	4a0c      	ldr	r2, [pc, #48]	; (8000644 <USART3_IRQHandler+0xc4>)
 8000612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000616:	b29b      	uxth	r3, r3
 8000618:	8193      	strh	r3, [r2, #12]

			USART3->DR = STM32F446Usart3::instance->buffTx.rem();
			STM32F446Usart3::instance->isTransmitting= true;
		}
	}
}
 800061a:	e00e      	b.n	800063a <USART3_IRQHandler+0xba>
			USART3->DR = STM32F446Usart3::instance->buffTx.rem();
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <USART3_IRQHandler+0xc8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f851 	bl	80006cc <_ZN8BuffFifoImLt64EE3remEv>
 800062a:	4602      	mov	r2, r0
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <USART3_IRQHandler+0xc4>)
 800062e:	b292      	uxth	r2, r2
 8000630:	809a      	strh	r2, [r3, #4]
			STM32F446Usart3::instance->isTransmitting= true;
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <USART3_IRQHandler+0xc8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2201      	movs	r2, #1
 8000638:	711a      	strb	r2, [r3, #4]
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40004800 	.word	0x40004800
 8000648:	2000009c 	.word	0x2000009c

0800064c <_ZN8BuffFifoImLt64EEC1Ev>:
#include <stdlib.h>
template <class T, uint16_t nSize>
class BuffFifo {
public:

	BuffFifo()
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	{
        reset();
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f000 f858 	bl	800070a <_ZN8BuffFifoImLt64EE5resetEv>
    }
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <_ZN8BuffFifoImLt64EE3addEm>:
    {
        in = 0;
        out = 0;
    }

    bool add(T e)
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
    {
        if( (in + 1) != out )
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	429a      	cmp	r2, r3
 800067a:	d00d      	beq.n	8000698 <_ZN8BuffFifoImLt64EE3addEm+0x34>
        {
            data[in++ & (nSize-1)] = e;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	1c59      	adds	r1, r3, #1
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	6011      	str	r1, [r2, #0]
 8000686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3202      	adds	r2, #2
 800068e:	6839      	ldr	r1, [r7, #0]
 8000690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            return 1;
 8000694:	2301      	movs	r3, #1
 8000696:	e000      	b.n	800069a <_ZN8BuffFifoImLt64EE3addEm+0x36>
        }
        return 0;
 8000698:	2300      	movs	r3, #0
    }
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <_ZNK8BuffFifoImLt64EE7isEmptyEv>:
            return data[out++ & (nSize-1)] ;
        }
        return data[0];
    }

    bool isEmpty() const{
 80006a6:	b480      	push	{r7}
 80006a8:	b083      	sub	sp, #12
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
        return (out == in);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	bf0c      	ite	eq
 80006ba:	2301      	moveq	r3, #1
 80006bc:	2300      	movne	r3, #0
 80006be:	b2db      	uxtb	r3, r3
    }
 80006c0:	4618      	mov	r0, r3
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <_ZN8BuffFifoImLt64EE3remEv>:
    T rem(){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
        if (!isEmpty())
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ffe6 	bl	80006a6 <_ZNK8BuffFifoImLt64EE7isEmptyEv>
 80006da:	4603      	mov	r3, r0
 80006dc:	f083 0301 	eor.w	r3, r3, #1
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00b      	beq.n	80006fe <_ZN8BuffFifoImLt64EE3remEv+0x32>
            return data[out++ & (nSize-1)] ;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	1c59      	adds	r1, r3, #1
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	6051      	str	r1, [r2, #4]
 80006f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3202      	adds	r2, #2
 80006f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006fc:	e001      	b.n	8000702 <_ZN8BuffFifoImLt64EE3remEv+0x36>
        return data[0];
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	689b      	ldr	r3, [r3, #8]
    }
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <_ZN8BuffFifoImLt64EE5resetEv>:
    void reset()
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
        in = 0;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
        out = 0;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
    }
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <NVIC_EnableIRQ>:
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	f003 021f 	and.w	r2, r3, #31
 800073e:	4907      	ldr	r1, [pc, #28]	; (800075c <NVIC_EnableIRQ+0x30>)
 8000740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000744:	095b      	lsrs	r3, r3, #5
 8000746:	2001      	movs	r0, #1
 8000748:	fa00 f202 	lsl.w	r2, r0, r2
 800074c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000e100 	.word	0xe000e100

08000760 <NVIC_SetPriority>:
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	da0c      	bge.n	800078e <NVIC_SetPriority+0x2e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	490d      	ldr	r1, [pc, #52]	; (80007b0 <NVIC_SetPriority+0x50>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	e009      	b.n	80007a2 <NVIC_SetPriority+0x42>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4908      	ldr	r1, [pc, #32]	; (80007b4 <NVIC_SetPriority+0x54>)
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	440b      	add	r3, r1
 800079e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000ed00 	.word	0xe000ed00
 80007b4:	e000e100 	.word	0xe000e100

080007b8 <_ZN5TimerD1Ev>:
	 */
	Timer(TIM_TypeDef * tmr, uint32_t us,bool interruptEnable);
	/*
	 * Destructeur
	 */
	virtual ~Timer(){};
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <_ZN5TimerD1Ev+0x1c>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4618      	mov	r0, r3
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	080016dc 	.word	0x080016dc

080007d8 <_ZN5TimerD0Ev>:
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ffe9 	bl	80007b8 <_ZN5TimerD1Ev>
 80007e6:	2108      	movs	r1, #8
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f000 fd50 	bl	800128e <_ZdlPvj>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <_ZN5TimerC1EP11TIM_TypeDefmb>:
 *      Author: Tristan Franc
 */

#include "Timer_PWM.h"

Timer::Timer(TIM_TypeDef * tmr, uint32_t us,bool interruptEnable)
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
 8000804:	70fb      	strb	r3, [r7, #3]
 8000806:	4a42      	ldr	r2, [pc, #264]	; (8000910 <_ZN5TimerC1EP11TIM_TypeDefmb+0x118>)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	601a      	str	r2, [r3, #0]
{
	timer = tmr;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	605a      	str	r2, [r3, #4]
	if(tmr== TIM1)
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	4a3f      	ldr	r2, [pc, #252]	; (8000914 <_ZN5TimerC1EP11TIM_TypeDefmb+0x11c>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d10f      	bne.n	800083a <_ZN5TimerC1EP11TIM_TypeDefmb+0x42>
	{
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800081a:	4b3f      	ldr	r3, [pc, #252]	; (8000918 <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	4a3e      	ldr	r2, [pc, #248]	; (8000918 <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6453      	str	r3, [r2, #68]	; 0x44
		if(interruptEnable)
 8000826:	78fb      	ldrb	r3, [r7, #3]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d006      	beq.n	800083a <_ZN5TimerC1EP11TIM_TypeDefmb+0x42>
		{
			NVIC_EnableIRQ(TIM1_CC_IRQn);
 800082c:	201b      	movs	r0, #27
 800082e:	f7ff ff7d 	bl	800072c <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM1_CC_IRQn, 2);
 8000832:	2102      	movs	r1, #2
 8000834:	201b      	movs	r0, #27
 8000836:	f7ff ff93 	bl	8000760 <NVIC_SetPriority>
		}
	}
	if ( tmr == TIM2)
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000840:	d10f      	bne.n	8000862 <_ZN5TimerC1EP11TIM_TypeDefmb+0x6a>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000842:	4b35      	ldr	r3, [pc, #212]	; (8000918 <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a34      	ldr	r2, [pc, #208]	; (8000918 <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
		if(interruptEnable)
 800084e:	78fb      	ldrb	r3, [r7, #3]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d006      	beq.n	8000862 <_ZN5TimerC1EP11TIM_TypeDefmb+0x6a>
		{
			NVIC_EnableIRQ(TIM2_IRQn);
 8000854:	201c      	movs	r0, #28
 8000856:	f7ff ff69 	bl	800072c <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM2_IRQn,1);
 800085a:	2101      	movs	r1, #1
 800085c:	201c      	movs	r0, #28
 800085e:	f7ff ff7f 	bl	8000760 <NVIC_SetPriority>
		}
	}
	if ( tmr == TIM3)
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	4a2d      	ldr	r2, [pc, #180]	; (800091c <_ZN5TimerC1EP11TIM_TypeDefmb+0x124>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d10f      	bne.n	800088a <_ZN5TimerC1EP11TIM_TypeDefmb+0x92>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800086a:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a2a      	ldr	r2, [pc, #168]	; (8000918 <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
		if(interruptEnable)
 8000876:	78fb      	ldrb	r3, [r7, #3]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d006      	beq.n	800088a <_ZN5TimerC1EP11TIM_TypeDefmb+0x92>
		{
			NVIC_EnableIRQ(TIM3_IRQn);
 800087c:	201d      	movs	r0, #29
 800087e:	f7ff ff55 	bl	800072c <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM3_IRQn,1);
 8000882:	2101      	movs	r1, #1
 8000884:	201d      	movs	r0, #29
 8000886:	f7ff ff6b 	bl	8000760 <NVIC_SetPriority>
		}
	}
	if ( tmr == TIM4)
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	4a24      	ldr	r2, [pc, #144]	; (8000920 <_ZN5TimerC1EP11TIM_TypeDefmb+0x128>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d10f      	bne.n	80008b2 <_ZN5TimerC1EP11TIM_TypeDefmb+0xba>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a20      	ldr	r2, [pc, #128]	; (8000918 <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
		if(interruptEnable)
 800089e:	78fb      	ldrb	r3, [r7, #3]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d006      	beq.n	80008b2 <_ZN5TimerC1EP11TIM_TypeDefmb+0xba>
		{
			NVIC_EnableIRQ(TIM4_IRQn);
 80008a4:	201e      	movs	r0, #30
 80008a6:	f7ff ff41 	bl	800072c <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM4_IRQn,0);
 80008aa:	2100      	movs	r1, #0
 80008ac:	201e      	movs	r0, #30
 80008ae:	f7ff ff57 	bl	8000760 <NVIC_SetPriority>
		}

	}
	if ( tmr == TIM5)
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	4a1b      	ldr	r2, [pc, #108]	; (8000924 <_ZN5TimerC1EP11TIM_TypeDefmb+0x12c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d10f      	bne.n	80008da <_ZN5TimerC1EP11TIM_TypeDefmb+0xe2>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a16      	ldr	r2, [pc, #88]	; (8000918 <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
		if(interruptEnable)
 80008c6:	78fb      	ldrb	r3, [r7, #3]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d006      	beq.n	80008da <_ZN5TimerC1EP11TIM_TypeDefmb+0xe2>
		{
			NVIC_EnableIRQ(TIM5_IRQn);
 80008cc:	2032      	movs	r0, #50	; 0x32
 80008ce:	f7ff ff2d 	bl	800072c <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM5_IRQn,2);
 80008d2:	2102      	movs	r1, #2
 80008d4:	2032      	movs	r0, #50	; 0x32
 80008d6:	f7ff ff43 	bl	8000760 <NVIC_SetPriority>
		}
	}
	setPeriod(us);
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f000 f823 	bl	8000928 <_ZN5Timer9setPeriodEm>
	if(interruptEnable)
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d003      	beq.n	80008f0 <_ZN5TimerC1EP11TIM_TypeDefmb+0xf8>
		timer->DIER = TIM_DIER_UIE;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	2201      	movs	r2, #1
 80008ee:	819a      	strh	r2, [r3, #12]
	timer->CR1 |= TIM_CR1_ARPE;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000900:	b292      	uxth	r2, r2
 8000902:	801a      	strh	r2, [r3, #0]
}
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	080016dc 	.word	0x080016dc
 8000914:	40010000 	.word	0x40010000
 8000918:	40023800 	.word	0x40023800
 800091c:	40000400 	.word	0x40000400
 8000920:	40000800 	.word	0x40000800
 8000924:	40000c00 	.word	0x40000c00

08000928 <_ZN5Timer9setPeriodEm>:

void Timer::setPeriod(uint32_t us)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
	uint32_t divFactor = 2000000;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <_ZN5Timer9setPeriodEm+0x68>)
 8000934:	60fb      	str	r3, [r7, #12]
	uint32_t reload = us - 1;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	3b01      	subs	r3, #1
 800093a:	60bb      	str	r3, [r7, #8]

	if ( us > 10000)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000942:	4293      	cmp	r3, r2
 8000944:	d909      	bls.n	800095a <_ZN5Timer9setPeriodEm+0x32>
	{
		reload = us / 100 - 1;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	4a12      	ldr	r2, [pc, #72]	; (8000994 <_ZN5Timer9setPeriodEm+0x6c>)
 800094a:	fba2 2303 	umull	r2, r3, r2, r3
 800094e:	095b      	lsrs	r3, r3, #5
 8000950:	3b01      	subs	r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
		divFactor = 20000;
 8000954:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000958:	60fb      	str	r3, [r7, #12]
	}

	if(reload < 1)
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d101      	bne.n	8000964 <_ZN5Timer9setPeriodEm+0x3c>
		reload = 1;
 8000960:	2301      	movs	r3, #1
 8000962:	60bb      	str	r3, [r7, #8]

	stop();
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f000 f90f 	bl	8000b88 <_ZN5Timer4stopEv>
	timer->PSC = SystemCoreClock / divFactor - 1;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <_ZN5Timer9setPeriodEm+0x70>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	fbb2 f3f3 	udiv	r3, r2, r3
 8000974:	b29a      	uxth	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	3a01      	subs	r2, #1
 800097c:	b292      	uxth	r2, r2
 800097e:	851a      	strh	r2, [r3, #40]	; 0x28
	timer->ARR = reload;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	68ba      	ldr	r2, [r7, #8]
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	001e8480 	.word	0x001e8480
 8000994:	51eb851f 	.word	0x51eb851f
 8000998:	20000008 	.word	0x20000008

0800099c <_ZN5Timer9enablePWMEhmt>:
void Timer::enablePWM(uint8_t ch, uint32_t freq, uint16_t range)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	607a      	str	r2, [r7, #4]
 80009a6:	461a      	mov	r2, r3
 80009a8:	460b      	mov	r3, r1
 80009aa:	72fb      	strb	r3, [r7, #11]
 80009ac:	4613      	mov	r3, r2
 80009ae:	813b      	strh	r3, [r7, #8]
	timer->CR1 |= TIM_CR1_DIR;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f042 0210 	orr.w	r2, r2, #16
 80009c0:	b292      	uxth	r2, r2
 80009c2:	801a      	strh	r2, [r3, #0]
	if((range+1) * freq * 2 > SystemCoreClock)
 80009c4:	893b      	ldrh	r3, [r7, #8]
 80009c6:	3301      	adds	r3, #1
 80009c8:	461a      	mov	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	fb03 f302 	mul.w	r3, r3, r2
 80009d0:	005a      	lsls	r2, r3, #1
 80009d2:	4b62      	ldr	r3, [pc, #392]	; (8000b5c <_ZN5Timer9enablePWMEhmt+0x1c0>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d907      	bls.n	80009ea <_ZN5Timer9enablePWMEhmt+0x4e>
	{
		freq = SystemCoreClock / ( 2 * (range+1) );
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <_ZN5Timer9enablePWMEhmt+0x1c0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	893a      	ldrh	r2, [r7, #8]
 80009e0:	3201      	adds	r2, #1
 80009e2:	0052      	lsls	r2, r2, #1
 80009e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80009e8:	607b      	str	r3, [r7, #4]
	}
	timer->ARR = range;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	893a      	ldrh	r2, [r7, #8]
 80009f0:	62da      	str	r2, [r3, #44]	; 0x2c
	timer->PSC = SystemCoreClock / (freq*2*range) - 1;
 80009f2:	4b5a      	ldr	r3, [pc, #360]	; (8000b5c <_ZN5Timer9enablePWMEhmt+0x1c0>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	893b      	ldrh	r3, [r7, #8]
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	fb01 f303 	mul.w	r3, r1, r3
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	3a01      	subs	r2, #1
 8000a0c:	b292      	uxth	r2, r2
 8000a0e:	851a      	strh	r2, [r3, #40]	; 0x28

	switch(ch)
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	f200 809b 	bhi.w	8000b50 <_ZN5Timer9enablePWMEhmt+0x1b4>
 8000a1a:	a201      	add	r2, pc, #4	; (adr r2, 8000a20 <_ZN5Timer9enablePWMEhmt+0x84>)
 8000a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a20:	08000a31 	.word	0x08000a31
 8000a24:	08000a79 	.word	0x08000a79
 8000a28:	08000ac1 	.word	0x08000ac1
 8000a2c:	08000b09 	.word	0x08000b09
	{
	case 1  :
		timer->CCMR1 &= ~TIM_CCMR1_OC1M;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	8b1b      	ldrh	r3, [r3, #24]
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000a40:	b292      	uxth	r2, r2
 8000a42:	831a      	strh	r2, [r3, #24]
		timer->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	8b1b      	ldrh	r3, [r3, #24]
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000a54:	b292      	uxth	r2, r2
 8000a56:	831a      	strh	r2, [r3, #24]
		timer->CCR1 = range>>1;
 8000a58:	893b      	ldrh	r3, [r7, #8]
 8000a5a:	105a      	asrs	r2, r3, #1
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	635a      	str	r2, [r3, #52]	; 0x34
		timer->CCER |= TIM_CCER_CC1E;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	8c1b      	ldrh	r3, [r3, #32]
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f042 0201 	orr.w	r2, r2, #1
 8000a72:	b292      	uxth	r2, r2
 8000a74:	841a      	strh	r2, [r3, #32]
		break;
 8000a76:	e06b      	b.n	8000b50 <_ZN5Timer9enablePWMEhmt+0x1b4>
	case 2  :
		timer->CCMR1 &= ~TIM_CCMR1_OC2M;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	8b1b      	ldrh	r3, [r3, #24]
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000a88:	b292      	uxth	r2, r2
 8000a8a:	831a      	strh	r2, [r3, #24]
		timer->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	8b1b      	ldrh	r3, [r3, #24]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000a9c:	b292      	uxth	r2, r2
 8000a9e:	831a      	strh	r2, [r3, #24]
		timer->CCR2 = range>>1;
 8000aa0:	893b      	ldrh	r3, [r7, #8]
 8000aa2:	105a      	asrs	r2, r3, #1
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	639a      	str	r2, [r3, #56]	; 0x38
		timer->CCER |= TIM_CCER_CC2E;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	8c1b      	ldrh	r3, [r3, #32]
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f042 0210 	orr.w	r2, r2, #16
 8000aba:	b292      	uxth	r2, r2
 8000abc:	841a      	strh	r2, [r3, #32]
		break;
 8000abe:	e047      	b.n	8000b50 <_ZN5Timer9enablePWMEhmt+0x1b4>
	case 3  :
		timer->CCMR2 &= ~TIM_CCMR2_OC3M;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	8b9b      	ldrh	r3, [r3, #28]
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000ad0:	b292      	uxth	r2, r2
 8000ad2:	839a      	strh	r2, [r3, #28]
		timer->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	8b9b      	ldrh	r3, [r3, #28]
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000ae4:	b292      	uxth	r2, r2
 8000ae6:	839a      	strh	r2, [r3, #28]
		timer->CCR3 = range>>1;
 8000ae8:	893b      	ldrh	r3, [r7, #8]
 8000aea:	105a      	asrs	r2, r3, #1
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	63da      	str	r2, [r3, #60]	; 0x3c
		timer->CCER |= TIM_CCER_CC3E;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	8c1b      	ldrh	r3, [r3, #32]
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b02:	b292      	uxth	r2, r2
 8000b04:	841a      	strh	r2, [r3, #32]
		break;
 8000b06:	e023      	b.n	8000b50 <_ZN5Timer9enablePWMEhmt+0x1b4>
	case 4  :
		timer->CCMR2 &= ~TIM_CCMR2_OC4M;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	8b9b      	ldrh	r3, [r3, #28]
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000b18:	b292      	uxth	r2, r2
 8000b1a:	839a      	strh	r2, [r3, #28]
		timer->CCMR2 |= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	8b9b      	ldrh	r3, [r3, #28]
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000b2c:	b292      	uxth	r2, r2
 8000b2e:	839a      	strh	r2, [r3, #28]
		timer->CCR4 = range>>1;
 8000b30:	893b      	ldrh	r3, [r7, #8]
 8000b32:	105a      	asrs	r2, r3, #1
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	641a      	str	r2, [r3, #64]	; 0x40
		timer->CCER |= TIM_CCER_CC4E;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	8c1b      	ldrh	r3, [r3, #32]
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000b4a:	b292      	uxth	r2, r2
 8000b4c:	841a      	strh	r2, [r3, #32]
		break;
 8000b4e:	bf00      	nop
	}
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	20000008 	.word	0x20000008

08000b60 <_ZN5Timer5startEv>:
		break;
	}
}

void Timer::start()
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	timer->CR1 |= TIM_CR1_CEN;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f042 0201 	orr.w	r2, r2, #1
 8000b78:	b292      	uxth	r2, r2
 8000b7a:	801a      	strh	r2, [r3, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <_ZN5Timer4stopEv>:

void Timer::stop()
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	timer->CR1 &= ~TIM_CR1_CEN;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f022 0201 	bic.w	r2, r2, #1
 8000ba0:	b292      	uxth	r2, r2
 8000ba2:	801a      	strh	r2, [r3, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_ZN14hardwareConfigC1Ev>:
 *      Author: 201723940
 */

#include "hardwareConfig.h"

hardwareConfig::hardwareConfig() {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <_ZN14hardwareConfigC1Ev+0x1c>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	601a      	str	r2, [r3, #0]

}
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	080016bc 	.word	0x080016bc

08000bd0 <_ZN14hardwareConfigD1Ev>:

hardwareConfig::~hardwareConfig() {
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <_ZN14hardwareConfigD1Ev+0x1c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	601a      	str	r2, [r3, #0]

}
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	080016bc 	.word	0x080016bc

08000bf0 <_ZN14hardwareConfigD0Ev>:
hardwareConfig::~hardwareConfig() {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
}
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ffe9 	bl	8000bd0 <_ZN14hardwareConfigD1Ev>
 8000bfe:	2104      	movs	r1, #4
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 fb44 	bl	800128e <_ZdlPvj>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <_ZN14hardwareConfig14SysClockConfigEv>:
// gère l'initialisation de base pour assurer le fonctionnement de base du nucle
//****dois être la première chose appeler dans le main.
void hardwareConfig::SysClockConfig(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	// active le hse
	RCC->CR = RCC_CR_HSEON;
 8000c18:	4b30      	ldr	r3, [pc, #192]	; (8000cdc <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8000c1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c1e:	601a      	str	r2, [r3, #0]
	//attendre que le cristal soit activer
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000c20:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	bf0c      	ite	eq
 8000c2c:	2301      	moveq	r3, #1
 8000c2e:	2300      	movne	r3, #0
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d000      	beq.n	8000c38 <_ZN14hardwareConfig14SysClockConfigEv+0x28>
 8000c36:	e7f3      	b.n	8000c20 <_ZN14hardwareConfig14SysClockConfigEv+0x10>

	//set le power enable et le regulateur de tension
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000c38:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	4a27      	ldr	r2, [pc, #156]	; (8000cdc <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8000c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c42:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= PWR_CR_VOS; // corresponds à la valeure reset "11"
 8000c44:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <_ZN14hardwareConfig14SysClockConfigEv+0xd0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a25      	ldr	r2, [pc, #148]	; (8000ce0 <_ZN14hardwareConfig14SysClockConfigEv+0xd0>)
 8000c4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c4e:	6013      	str	r3, [r2, #0]

	// configuration du flash
	FLASH->ACR |= FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN |FLASH_ACR_LATENCY_5WS;
 8000c50:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <_ZN14hardwareConfig14SysClockConfigEv+0xd4>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a23      	ldr	r2, [pc, #140]	; (8000ce4 <_ZN14hardwareConfig14SysClockConfigEv+0xd4>)
 8000c56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c5a:	f043 0305 	orr.w	r3, r3, #5
 8000c5e:	6013      	str	r3, [r2, #0]

	// configuration des prescalers
	//AHB PR
	RCC->CFGR|= RCC_CFGR_HPRE_DIV1;
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8000c62:	4a1e      	ldr	r2, [pc, #120]	; (8000cdc <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	6093      	str	r3, [r2, #8]

	//APB1
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; //division par 4
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8000c6e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000c72:	6093      	str	r3, [r2, #8]

	//APB1
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2; //division par 4
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	4a18      	ldr	r2, [pc, #96]	; (8000cdc <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8000c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c7e:	6093      	str	r3, [r2, #8]

	//configuration du pll
	RCC->PLLCFGR =(PLL_M << 0) |(PLL_N << 6) | (PLL_P << 16) | (RCC_PLLCFGR_PLLSRC_HSE);
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8000c82:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <_ZN14hardwareConfig14SysClockConfigEv+0xd8>)
 8000c84:	605a      	str	r2, [r3, #4]

	// activerle pll et attendre qu'il soit pret
	RCC->CR |= RCC_CR_PLLON;
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8000c8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c90:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bf0c      	ite	eq
 8000c9e:	2301      	moveq	r3, #1
 8000ca0:	2300      	movne	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d000      	beq.n	8000caa <_ZN14hardwareConfig14SysClockConfigEv+0x9a>
 8000ca8:	e7f3      	b.n	8000c92 <_ZN14hardwareConfig14SysClockConfigEv+0x82>

	//Sélectionner la source de la clock (pll dans ce cas ci)
	RCC-> CFGR |= RCC_CFGR_SW_PLL;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	f003 030c 	and.w	r3, r3, #12
 8000cbe:	2b08      	cmp	r3, #8
 8000cc0:	bf14      	ite	ne
 8000cc2:	2301      	movne	r3, #1
 8000cc4:	2300      	moveq	r3, #0
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d000      	beq.n	8000cce <_ZN14hardwareConfig14SysClockConfigEv+0xbe>
 8000ccc:	e7f3      	b.n	8000cb6 <_ZN14hardwareConfig14SysClockConfigEv+0xa6>
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40007000 	.word	0x40007000
 8000ce4:	40023c00 	.word	0x40023c00
 8000ce8:	00402d04 	.word	0x00402d04

08000cec <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>:

//Permet de configurer facilement les modes de chaques io
void hardwareConfig::GPIO_Config(GPIO_TypeDef* gpio, uint8_t pin, _IO_MODES_t mode,
		uint8_t alterFunction)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	71bb      	strb	r3, [r7, #6]
	if (gpio == GPIOA)
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	4a25      	ldr	r2, [pc, #148]	; (8000d9c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb0>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d105      	bne.n	8000d16 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x2a>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8000d0a:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a24      	ldr	r2, [pc, #144]	; (8000da0 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
	if (gpio == GPIOB)
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	4a22      	ldr	r2, [pc, #136]	; (8000da4 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb8>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d105      	bne.n	8000d2a <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x3e>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
	if (gpio == GPIOC)
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	4a1e      	ldr	r2, [pc, #120]	; (8000da8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xbc>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d105      	bne.n	8000d3e <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x52>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000d32:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30

	if (pin < 16)
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d809      	bhi.n	8000d58 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x6c>
	gpio->MODER |= mode << (2 * pin);
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	79b9      	ldrb	r1, [r7, #6]
 8000d4a:	79fa      	ldrb	r2, [r7, #7]
 8000d4c:	0052      	lsls	r2, r2, #1
 8000d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d52:	431a      	orrs	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	601a      	str	r2, [r3, #0]

	if (mode == ALTERNATE) {
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d118      	bne.n	8000d90 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xa4>
		if (pin < 8)
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b07      	cmp	r3, #7
 8000d62:	d80a      	bhi.n	8000d7a <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x8e>
			gpio->AFR[0] |= (alterFunction << (4 * pin));
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	6a1b      	ldr	r3, [r3, #32]
 8000d68:	7e39      	ldrb	r1, [r7, #24]
 8000d6a:	79fa      	ldrb	r2, [r7, #7]
 8000d6c:	0092      	lsls	r2, r2, #2
 8000d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d72:	431a      	orrs	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	621a      	str	r2, [r3, #32]
		else
			gpio->AFR[1] |= (alterFunction << (4 * (pin - 8)));
	}

}
 8000d78:	e00a      	b.n	8000d90 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xa4>
			gpio->AFR[1] |= (alterFunction << (4 * (pin - 8)));
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7e:	7e39      	ldrb	r1, [r7, #24]
 8000d80:	79fa      	ldrb	r2, [r7, #7]
 8000d82:	3a08      	subs	r2, #8
 8000d84:	0092      	lsls	r2, r2, #2
 8000d86:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020400 	.word	0x40020400
 8000da8:	40020800 	.word	0x40020800

08000dac <main>:
uint8_t rxData=0;
uint16_t rxCnt=0;
uint8_t rxCmd=0;
const uint16_t PAYLOAD_SIZE[2]={3,10};
uint16_t rxPayload[15];
int main(void) {
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af02      	add	r7, sp, #8

	stm32F446 = new hardwareConfig();
 8000db2:	2004      	movs	r0, #4
 8000db4:	f000 fa6d 	bl	8001292 <_Znwj>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461c      	mov	r4, r3
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f7ff fef7 	bl	8000bb0 <_ZN14hardwareConfigC1Ev>
 8000dc2:	4b54      	ldr	r3, [pc, #336]	; (8000f14 <main+0x168>)
 8000dc4:	601c      	str	r4, [r3, #0]

	stm32F446->SysClockConfig();
 8000dc6:	4b53      	ldr	r3, [pc, #332]	; (8000f14 <main+0x168>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff20 	bl	8000c10 <_ZN14hardwareConfig14SysClockConfigEv>





	stm32F446->GPIO_Config(GPIOA, 5, OUTPUT,2);// led activité
 8000dd0:	4b50      	ldr	r3, [pc, #320]	; (8000f14 <main+0x168>)
 8000dd2:	6818      	ldr	r0, [r3, #0]
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	2205      	movs	r2, #5
 8000ddc:	494e      	ldr	r1, [pc, #312]	; (8000f18 <main+0x16c>)
 8000dde:	f7ff ff85 	bl	8000cec <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>

	testUsart = STM32F446Usart3::getInstance();
 8000de2:	f7ff fb19 	bl	8000418 <_ZN15STM32F446Usart311getInstanceEv>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a4c      	ldr	r2, [pc, #304]	; (8000f1c <main+0x170>)
 8000dea:	6013      	str	r3, [r2, #0]
	testUsart->setBaudRate(9600);
 8000dec:	4b4b      	ldr	r3, [pc, #300]	; (8000f1c <main+0x170>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fb8d 	bl	8000514 <_ZN15STM32F446Usart311setBaudRateEm>
	timerTest = new Timer(TIM5,10000,true);
 8000dfa:	2008      	movs	r0, #8
 8000dfc:	f000 fa49 	bl	8001292 <_Znwj>
 8000e00:	4603      	mov	r3, r0
 8000e02:	461c      	mov	r4, r3
 8000e04:	2301      	movs	r3, #1
 8000e06:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e0a:	4945      	ldr	r1, [pc, #276]	; (8000f20 <main+0x174>)
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f7ff fcf3 	bl	80007f8 <_ZN5TimerC1EP11TIM_TypeDefmb>
 8000e12:	4b44      	ldr	r3, [pc, #272]	; (8000f24 <main+0x178>)
 8000e14:	601c      	str	r4, [r3, #0]
	timerTest->enablePWM(2,100);
 8000e16:	4b43      	ldr	r3, [pc, #268]	; (8000f24 <main+0x178>)
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	23ff      	movs	r3, #255	; 0xff
 8000e1c:	2264      	movs	r2, #100	; 0x64
 8000e1e:	2102      	movs	r1, #2
 8000e20:	f7ff fdbc 	bl	800099c <_ZN5Timer9enablePWMEhmt>

	timerTest->start();
 8000e24:	4b3f      	ldr	r3, [pc, #252]	; (8000f24 <main+0x178>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fe99 	bl	8000b60 <_ZN5Timer5startEv>


	while(1)
	{

		while(testUsart->dataAvailable())
 8000e2e:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <main+0x170>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb5d 	bl	80004f2 <_ZNK15STM32F446Usart313dataAvailableEv>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d05b      	beq.n	8000ef6 <main+0x14a>
		{
			rxData= testUsart->read();
 8000e3e:	4b37      	ldr	r3, [pc, #220]	; (8000f1c <main+0x170>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fb3c 	bl	80004c0 <_ZN15STM32F446Usart34readEv>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <main+0x17c>)
 8000e4e:	701a      	strb	r2, [r3, #0]
			switch (commState) {
 8000e50:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <main+0x180>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d8ea      	bhi.n	8000e2e <main+0x82>
 8000e58:	a201      	add	r2, pc, #4	; (adr r2, 8000e60 <main+0xb4>)
 8000e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5e:	bf00      	nop
 8000e60:	08000e71 	.word	0x08000e71
 8000e64:	08000e81 	.word	0x08000e81
 8000e68:	08000ea9 	.word	0x08000ea9
 8000e6c:	08000ed3 	.word	0x08000ed3
			case WAIT:
				if(rxData=='<')
 8000e70:	4b2d      	ldr	r3, [pc, #180]	; (8000f28 <main+0x17c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b3c      	cmp	r3, #60	; 0x3c
 8000e76:	d13a      	bne.n	8000eee <main+0x142>
					commState=RXCMD;
 8000e78:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <main+0x180>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	701a      	strb	r2, [r3, #0]
				break;
 8000e7e:	e036      	b.n	8000eee <main+0x142>
			case RXCMD:
				commState=RXPAYLOAD;
 8000e80:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <main+0x180>)
 8000e82:	2202      	movs	r2, #2
 8000e84:	701a      	strb	r2, [r3, #0]
				rxCnt=0;
 8000e86:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <main+0x184>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	801a      	strh	r2, [r3, #0]
				//rxCmd=rxData;//commande à executer
				rxPayload[rxCnt++]=rxData;
 8000e8c:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <main+0x17c>)
 8000e8e:	7819      	ldrb	r1, [r3, #0]
 8000e90:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <main+0x184>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	1c5a      	adds	r2, r3, #1
 8000e96:	b290      	uxth	r0, r2
 8000e98:	4a25      	ldr	r2, [pc, #148]	; (8000f30 <main+0x184>)
 8000e9a:	8010      	strh	r0, [r2, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	b289      	uxth	r1, r1
 8000ea0:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <main+0x188>)
 8000ea2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				break;
 8000ea6:	e025      	b.n	8000ef4 <main+0x148>
			case RXPAYLOAD:
				rxPayload[rxCnt++]=rxData;
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <main+0x17c>)
 8000eaa:	7819      	ldrb	r1, [r3, #0]
 8000eac:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <main+0x184>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	1c5a      	adds	r2, r3, #1
 8000eb2:	b290      	uxth	r0, r2
 8000eb4:	4a1e      	ldr	r2, [pc, #120]	; (8000f30 <main+0x184>)
 8000eb6:	8010      	strh	r0, [r2, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <main+0x188>)
 8000ebe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				if(rxCnt>2)
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <main+0x184>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d913      	bls.n	8000ef2 <main+0x146>
					commState =VALIDATE;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <main+0x180>)
 8000ecc:	2203      	movs	r2, #3
 8000ece:	701a      	strb	r2, [r3, #0]
				break;
 8000ed0:	e00f      	b.n	8000ef2 <main+0x146>
			case VALIDATE:
				if(rxData=='>')
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <main+0x17c>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b3e      	cmp	r3, #62	; 0x3e
 8000ed8:	d105      	bne.n	8000ee6 <main+0x13a>
				{
					GPIOA -> ODR ^= 1<<5;// led d'activité
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <main+0x16c>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <main+0x16c>)
 8000ee0:	f083 0320 	eor.w	r3, r3, #32
 8000ee4:	6153      	str	r3, [r2, #20]


				}
				commState =WAIT;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <main+0x180>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
				break;
 8000eec:	e002      	b.n	8000ef4 <main+0x148>
				break;
 8000eee:	bf00      	nop
 8000ef0:	e79d      	b.n	8000e2e <main+0x82>
				break;
 8000ef2:	bf00      	nop
		while(testUsart->dataAvailable())
 8000ef4:	e79b      	b.n	8000e2e <main+0x82>
			}
		}
		if (serialPcPauseCompleted)
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <main+0x18c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d096      	beq.n	8000e2e <main+0x82>
		{

			testUsart->write(tab);
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <main+0x170>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	490d      	ldr	r1, [pc, #52]	; (8000f3c <main+0x190>)
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fac4 	bl	8000494 <_ZN15STM32F446Usart35writeEPc>

			serialPcPauseCompleted = false;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <main+0x18c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
		while(testUsart->dataAvailable())
 8000f12:	e78c      	b.n	8000e2e <main+0x82>
 8000f14:	200000a4 	.word	0x200000a4
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	200000b4 	.word	0x200000b4
 8000f20:	40000c00 	.word	0x40000c00
 8000f24:	200000a8 	.word	0x200000a8
 8000f28:	200000e1 	.word	0x200000e1
 8000f2c:	200000e0 	.word	0x200000e0
 8000f30:	200000e2 	.word	0x200000e2
 8000f34:	200000e8 	.word	0x200000e8
 8000f38:	200000a0 	.word	0x200000a0
 8000f3c:	20000000 	.word	0x20000000

08000f40 <TIM5_IRQHandler>:
		}

	}
}
extern "C" void TIM5_IRQHandler(void) {
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
	if (TIM5->SR & TIM_SR_UIF) // if UIF flag is set
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <TIM5_IRQHandler+0x3c>)
 8000f46:	8a1b      	ldrh	r3, [r3, #16]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf14      	ite	ne
 8000f52:	2301      	movne	r3, #1
 8000f54:	2300      	moveq	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00a      	beq.n	8000f72 <TIM5_IRQHandler+0x32>
	{
		TIM5->SR &= ~TIM_SR_UIF; // clear UIF flag
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <TIM5_IRQHandler+0x3c>)
 8000f5e:	8a1b      	ldrh	r3, [r3, #16]
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <TIM5_IRQHandler+0x3c>)
 8000f64:	f023 0301 	bic.w	r3, r3, #1
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	8213      	strh	r3, [r2, #16]
		serialPcPauseCompleted = true;
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <TIM5_IRQHandler+0x40>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]

	}

}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40000c00 	.word	0x40000c00
 8000f80:	200000a0 	.word	0x200000a0

08000f84 <_Z41__static_initialization_and_destruction_0ii>:
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d115      	bne.n	8000fc0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d110      	bne.n	8000fc0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
std::string message= "<Fuck>";
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f986 	bl	80012b4 <_ZNSaIcEC1Ev>
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	461a      	mov	r2, r3
 8000fae:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000fb2:	f000 f9e7 	bl	8001384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f97b 	bl	80012b6 <_ZNSaIcED1Ev>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d107      	bne.n	8000fd6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d102      	bne.n	8000fd6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8000fd0:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000fd2:	f000 f9ad 	bl	8001330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	080016cc 	.word	0x080016cc
 8000fe4:	200000c8 	.word	0x200000c8

08000fe8 <_GLOBAL__sub_I_serialPcPauseCompleted>:
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f7ff ffc7 	bl	8000f84 <_Z41__static_initialization_and_destruction_0ii>
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <_GLOBAL__sub_D_serialPcPauseCompleted>:
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001000:	2000      	movs	r0, #0
 8001002:	f7ff ffbf 	bl	8000f84 <_Z41__static_initialization_and_destruction_0ii>
 8001006:	bd80      	pop	{r7, pc}

08001008 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
	return 1;
 800100c:	2301      	movs	r3, #1
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <_kill>:

int _kill(int pid, int sig)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001022:	f000 f9df 	bl	80013e4 <__errno>
 8001026:	4603      	mov	r3, r0
 8001028:	2216      	movs	r2, #22
 800102a:	601a      	str	r2, [r3, #0]
	return -1;
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <_exit>:

void _exit (int status)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ffe7 	bl	8001018 <_kill>
	while (1) {}		/* Make sure we hang here */
 800104a:	e7fe      	b.n	800104a <_exit+0x12>

0800104c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <_sbrk+0x50>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x16>
		heap_end = &end;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <_sbrk+0x50>)
 800105e:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <_sbrk+0x54>)
 8001060:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <_sbrk+0x50>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <_sbrk+0x50>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	466a      	mov	r2, sp
 8001072:	4293      	cmp	r3, r2
 8001074:	d907      	bls.n	8001086 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001076:	f000 f9b5 	bl	80013e4 <__errno>
 800107a:	4603      	mov	r3, r0
 800107c:	220c      	movs	r2, #12
 800107e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	e006      	b.n	8001094 <_sbrk+0x48>
	}

	heap_end += incr;
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <_sbrk+0x50>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a03      	ldr	r2, [pc, #12]	; (800109c <_sbrk+0x50>)
 8001090:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000010c 	.word	0x2000010c
 80010a0:	20000130 	.word	0x20000130

080010a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <SystemInit+0x60>)
 80010aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ae:	4a15      	ldr	r2, [pc, #84]	; (8001104 <SystemInit+0x60>)
 80010b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <SystemInit+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a12      	ldr	r2, [pc, #72]	; (8001108 <SystemInit+0x64>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010c4:	4b10      	ldr	r3, [pc, #64]	; (8001108 <SystemInit+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <SystemInit+0x64>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <SystemInit+0x64>)
 80010d0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <SystemInit+0x64>)
 80010dc:	4a0b      	ldr	r2, [pc, #44]	; (800110c <SystemInit+0x68>)
 80010de:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <SystemInit+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a08      	ldr	r2, [pc, #32]	; (8001108 <SystemInit+0x64>)
 80010e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <SystemInit+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80010f2:	f000 f80d 	bl	8001110 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010f6:	4b03      	ldr	r3, [pc, #12]	; (8001104 <SystemInit+0x60>)
 80010f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010fc:	609a      	str	r2, [r3, #8]
#endif
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	40023800 	.word	0x40023800
 800110c:	24003010 	.word	0x24003010

08001110 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800111e:	4b43      	ldr	r3, [pc, #268]	; (800122c <SetSysClock+0x11c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a42      	ldr	r2, [pc, #264]	; (800122c <SetSysClock+0x11c>)
 8001124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800112a:	4b40      	ldr	r3, [pc, #256]	; (800122c <SetSysClock+0x11c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3301      	adds	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d103      	bne.n	8001148 <SetSysClock+0x38>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8001146:	d1f0      	bne.n	800112a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001148:	4b38      	ldr	r3, [pc, #224]	; (800122c <SetSysClock+0x11c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d002      	beq.n	800115a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001154:	2301      	movs	r3, #1
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	e001      	b.n	800115e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d15c      	bne.n	800121e <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001164:	4b31      	ldr	r3, [pc, #196]	; (800122c <SetSysClock+0x11c>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	4a30      	ldr	r2, [pc, #192]	; (800122c <SetSysClock+0x11c>)
 800116a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001170:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <SetSysClock+0x120>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a2e      	ldr	r2, [pc, #184]	; (8001230 <SetSysClock+0x120>)
 8001176:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800117a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <SetSysClock+0x11c>)
 800117e:	4a2b      	ldr	r2, [pc, #172]	; (800122c <SetSysClock+0x11c>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001184:	4b29      	ldr	r3, [pc, #164]	; (800122c <SetSysClock+0x11c>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4a28      	ldr	r2, [pc, #160]	; (800122c <SetSysClock+0x11c>)
 800118a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800118e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001190:	4b26      	ldr	r3, [pc, #152]	; (800122c <SetSysClock+0x11c>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	4a25      	ldr	r2, [pc, #148]	; (800122c <SetSysClock+0x11c>)
 8001196:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800119a:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800119c:	4b23      	ldr	r3, [pc, #140]	; (800122c <SetSysClock+0x11c>)
 800119e:	4a25      	ldr	r2, [pc, #148]	; (8001234 <SetSysClock+0x124>)
 80011a0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80011a2:	4b22      	ldr	r3, [pc, #136]	; (800122c <SetSysClock+0x11c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a21      	ldr	r2, [pc, #132]	; (800122c <SetSysClock+0x11c>)
 80011a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011ac:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80011ae:	bf00      	nop
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <SetSysClock+0x11c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f9      	beq.n	80011b0 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <SetSysClock+0x120>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <SetSysClock+0x120>)
 80011c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c6:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 80011c8:	bf00      	nop
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <SetSysClock+0x120>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f9      	beq.n	80011ca <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <SetSysClock+0x120>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a15      	ldr	r2, [pc, #84]	; (8001230 <SetSysClock+0x120>)
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 80011e2:	bf00      	nop
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <SetSysClock+0x120>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f9      	beq.n	80011e4 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <SetSysClock+0x128>)
 80011f2:	f240 7205 	movw	r2, #1797	; 0x705
 80011f6:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <SetSysClock+0x11c>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	4a0b      	ldr	r2, [pc, #44]	; (800122c <SetSysClock+0x11c>)
 80011fe:	f023 0303 	bic.w	r3, r3, #3
 8001202:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <SetSysClock+0x11c>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	4a08      	ldr	r2, [pc, #32]	; (800122c <SetSysClock+0x11c>)
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001210:	bf00      	nop
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <SetSysClock+0x11c>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b08      	cmp	r3, #8
 800121c:	d1f9      	bne.n	8001212 <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800
 8001230:	40007000 	.word	0x40007000
 8001234:	77405a08 	.word	0x77405a08
 8001238:	40023c00 	.word	0x40023c00

0800123c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800123e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <LoopForever+0x6>)
  ldr r1, =_edata
 8001242:	490e      	ldr	r1, [pc, #56]	; (800127c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <LoopForever+0xe>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001258:	4c0b      	ldr	r4, [pc, #44]	; (8001288 <LoopForever+0x16>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001266:	f7ff ff1d 	bl	80010a4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800126a:	f000 f8c1 	bl	80013f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800126e:	f7ff fd9d 	bl	8000dac <main>

08001272 <LoopForever>:

LoopForever:
    b LoopForever
 8001272:	e7fe      	b.n	8001272 <LoopForever>
  ldr   r0, =_estack
 8001274:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001280:	08001738 	.word	0x08001738
  ldr r2, =_sbss
 8001284:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001288:	2000012c 	.word	0x2000012c

0800128c <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC_IRQHandler>

0800128e <_ZdlPvj>:
 800128e:	f000 b88f 	b.w	80013b0 <_ZdlPv>

08001292 <_Znwj>:
 8001292:	2801      	cmp	r0, #1
 8001294:	bf38      	it	cc
 8001296:	2001      	movcc	r0, #1
 8001298:	b510      	push	{r4, lr}
 800129a:	4604      	mov	r4, r0
 800129c:	4620      	mov	r0, r4
 800129e:	f000 f8cb 	bl	8001438 <malloc>
 80012a2:	b930      	cbnz	r0, 80012b2 <_Znwj+0x20>
 80012a4:	f000 f886 	bl	80013b4 <_ZSt15get_new_handlerv>
 80012a8:	b908      	cbnz	r0, 80012ae <_Znwj+0x1c>
 80012aa:	f000 f894 	bl	80013d6 <abort>
 80012ae:	4780      	blx	r0
 80012b0:	e7f4      	b.n	800129c <_Znwj+0xa>
 80012b2:	bd10      	pop	{r4, pc}

080012b4 <_ZNSaIcEC1Ev>:
 80012b4:	4770      	bx	lr

080012b6 <_ZNSaIcED1Ev>:
 80012b6:	4770      	bx	lr

080012b8 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80012b8:	b10a      	cbz	r2, 80012be <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80012ba:	f000 b8cd 	b.w	8001458 <memcpy>
 80012be:	4770      	bx	lr

080012c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80012c0:	b508      	push	{r3, lr}
 80012c2:	680b      	ldr	r3, [r1, #0]
 80012c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c8:	d302      	bcc.n	80012d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80012cc:	f000 f880 	bl	80013d0 <_ZSt20__throw_length_errorPKc>
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d90b      	bls.n	80012ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80012d4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80012d8:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80012dc:	d206      	bcs.n	80012ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80012de:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012e2:	bf2a      	itet	cs
 80012e4:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80012e8:	6008      	strcc	r0, [r1, #0]
 80012ea:	600b      	strcs	r3, [r1, #0]
 80012ec:	6808      	ldr	r0, [r1, #0]
 80012ee:	3001      	adds	r0, #1
 80012f0:	d501      	bpl.n	80012f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80012f2:	f000 f867 	bl	80013c4 <_ZSt17__throw_bad_allocv>
 80012f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80012fa:	f7ff bfca 	b.w	8001292 <_Znwj>
 80012fe:	bf00      	nop
 8001300:	080016e4 	.word	0x080016e4

08001304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8001304:	f850 3b08 	ldr.w	r3, [r0], #8
 8001308:	4283      	cmp	r3, r0
 800130a:	d002      	beq.n	8001312 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800130c:	4618      	mov	r0, r3
 800130e:	f000 b84f 	b.w	80013b0 <_ZdlPv>
 8001312:	4770      	bx	lr

08001314 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8001314:	2a01      	cmp	r2, #1
 8001316:	b510      	push	{r4, lr}
 8001318:	d102      	bne.n	8001320 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800131a:	780a      	ldrb	r2, [r1, #0]
 800131c:	7002      	strb	r2, [r0, #0]
 800131e:	bd10      	pop	{r4, pc}
 8001320:	f7ff ffca 	bl	80012b8 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8001324:	e7fb      	b.n	800131e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08001326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8001326:	b508      	push	{r3, lr}
 8001328:	1a52      	subs	r2, r2, r1
 800132a:	f7ff fff3 	bl	8001314 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800132e:	bd08      	pop	{r3, pc}

08001330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8001330:	b510      	push	{r4, lr}
 8001332:	4604      	mov	r4, r0
 8001334:	f7ff ffe6 	bl	8001304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8001338:	4620      	mov	r0, r4
 800133a:	bd10      	pop	{r4, pc}

0800133c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800133c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800133e:	4604      	mov	r4, r0
 8001340:	4616      	mov	r6, r2
 8001342:	460d      	mov	r5, r1
 8001344:	b919      	cbnz	r1, 800134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8001346:	b112      	cbz	r2, 800134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8001348:	480d      	ldr	r0, [pc, #52]	; (8001380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800134a:	f000 f83e 	bl	80013ca <_ZSt19__throw_logic_errorPKc>
 800134e:	1b73      	subs	r3, r6, r5
 8001350:	2b0f      	cmp	r3, #15
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	d907      	bls.n	8001366 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8001356:	2200      	movs	r2, #0
 8001358:	a901      	add	r1, sp, #4
 800135a:	4620      	mov	r0, r4
 800135c:	f7ff ffb0 	bl	80012c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8001360:	9b01      	ldr	r3, [sp, #4]
 8001362:	6020      	str	r0, [r4, #0]
 8001364:	60a3      	str	r3, [r4, #8]
 8001366:	4632      	mov	r2, r6
 8001368:	4629      	mov	r1, r5
 800136a:	6820      	ldr	r0, [r4, #0]
 800136c:	f7ff ffdb 	bl	8001326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8001370:	9b01      	ldr	r3, [sp, #4]
 8001372:	6822      	ldr	r2, [r4, #0]
 8001374:	6063      	str	r3, [r4, #4]
 8001376:	2100      	movs	r1, #0
 8001378:	54d1      	strb	r1, [r2, r3]
 800137a:	b002      	add	sp, #8
 800137c:	bd70      	pop	{r4, r5, r6, pc}
 800137e:	bf00      	nop
 8001380:	080016fc 	.word	0x080016fc

08001384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8001384:	b538      	push	{r3, r4, r5, lr}
 8001386:	f100 0308 	add.w	r3, r0, #8
 800138a:	4604      	mov	r4, r0
 800138c:	6003      	str	r3, [r0, #0]
 800138e:	460d      	mov	r5, r1
 8001390:	b159      	cbz	r1, 80013aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8001392:	4608      	mov	r0, r1
 8001394:	f7fe ff36 	bl	8000204 <strlen>
 8001398:	182a      	adds	r2, r5, r0
 800139a:	4620      	mov	r0, r4
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	4629      	mov	r1, r5
 80013a2:	f7ff ffcb 	bl	800133c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80013a6:	4620      	mov	r0, r4
 80013a8:	bd38      	pop	{r3, r4, r5, pc}
 80013aa:	f04f 32ff 	mov.w	r2, #4294967295
 80013ae:	e7f4      	b.n	800139a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080013b0 <_ZdlPv>:
 80013b0:	f000 b84a 	b.w	8001448 <free>

080013b4 <_ZSt15get_new_handlerv>:
 80013b4:	4b02      	ldr	r3, [pc, #8]	; (80013c0 <_ZSt15get_new_handlerv+0xc>)
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	f3bf 8f5b 	dmb	ish
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000110 	.word	0x20000110

080013c4 <_ZSt17__throw_bad_allocv>:
 80013c4:	b508      	push	{r3, lr}
 80013c6:	f000 f806 	bl	80013d6 <abort>

080013ca <_ZSt19__throw_logic_errorPKc>:
 80013ca:	b508      	push	{r3, lr}
 80013cc:	f000 f803 	bl	80013d6 <abort>

080013d0 <_ZSt20__throw_length_errorPKc>:
 80013d0:	b508      	push	{r3, lr}
 80013d2:	f000 f800 	bl	80013d6 <abort>

080013d6 <abort>:
 80013d6:	b508      	push	{r3, lr}
 80013d8:	2006      	movs	r0, #6
 80013da:	f000 f92d 	bl	8001638 <raise>
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff fe2a 	bl	8001038 <_exit>

080013e4 <__errno>:
 80013e4:	4b01      	ldr	r3, [pc, #4]	; (80013ec <__errno+0x8>)
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	2000001c 	.word	0x2000001c

080013f0 <__libc_init_array>:
 80013f0:	b570      	push	{r4, r5, r6, lr}
 80013f2:	4d0d      	ldr	r5, [pc, #52]	; (8001428 <__libc_init_array+0x38>)
 80013f4:	4c0d      	ldr	r4, [pc, #52]	; (800142c <__libc_init_array+0x3c>)
 80013f6:	1b64      	subs	r4, r4, r5
 80013f8:	10a4      	asrs	r4, r4, #2
 80013fa:	2600      	movs	r6, #0
 80013fc:	42a6      	cmp	r6, r4
 80013fe:	d109      	bne.n	8001414 <__libc_init_array+0x24>
 8001400:	4d0b      	ldr	r5, [pc, #44]	; (8001430 <__libc_init_array+0x40>)
 8001402:	4c0c      	ldr	r4, [pc, #48]	; (8001434 <__libc_init_array+0x44>)
 8001404:	f000 f942 	bl	800168c <_init>
 8001408:	1b64      	subs	r4, r4, r5
 800140a:	10a4      	asrs	r4, r4, #2
 800140c:	2600      	movs	r6, #0
 800140e:	42a6      	cmp	r6, r4
 8001410:	d105      	bne.n	800141e <__libc_init_array+0x2e>
 8001412:	bd70      	pop	{r4, r5, r6, pc}
 8001414:	f855 3b04 	ldr.w	r3, [r5], #4
 8001418:	4798      	blx	r3
 800141a:	3601      	adds	r6, #1
 800141c:	e7ee      	b.n	80013fc <__libc_init_array+0xc>
 800141e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001422:	4798      	blx	r3
 8001424:	3601      	adds	r6, #1
 8001426:	e7f2      	b.n	800140e <__libc_init_array+0x1e>
 8001428:	08001728 	.word	0x08001728
 800142c:	08001728 	.word	0x08001728
 8001430:	08001728 	.word	0x08001728
 8001434:	08001730 	.word	0x08001730

08001438 <malloc>:
 8001438:	4b02      	ldr	r3, [pc, #8]	; (8001444 <malloc+0xc>)
 800143a:	4601      	mov	r1, r0
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	f000 b869 	b.w	8001514 <_malloc_r>
 8001442:	bf00      	nop
 8001444:	2000001c 	.word	0x2000001c

08001448 <free>:
 8001448:	4b02      	ldr	r3, [pc, #8]	; (8001454 <free+0xc>)
 800144a:	4601      	mov	r1, r0
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	f000 b811 	b.w	8001474 <_free_r>
 8001452:	bf00      	nop
 8001454:	2000001c 	.word	0x2000001c

08001458 <memcpy>:
 8001458:	440a      	add	r2, r1
 800145a:	4291      	cmp	r1, r2
 800145c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001460:	d100      	bne.n	8001464 <memcpy+0xc>
 8001462:	4770      	bx	lr
 8001464:	b510      	push	{r4, lr}
 8001466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800146a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800146e:	4291      	cmp	r1, r2
 8001470:	d1f9      	bne.n	8001466 <memcpy+0xe>
 8001472:	bd10      	pop	{r4, pc}

08001474 <_free_r>:
 8001474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001476:	2900      	cmp	r1, #0
 8001478:	d048      	beq.n	800150c <_free_r+0x98>
 800147a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800147e:	9001      	str	r0, [sp, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	f1a1 0404 	sub.w	r4, r1, #4
 8001486:	bfb8      	it	lt
 8001488:	18e4      	addlt	r4, r4, r3
 800148a:	f000 f8f1 	bl	8001670 <__malloc_lock>
 800148e:	4a20      	ldr	r2, [pc, #128]	; (8001510 <_free_r+0x9c>)
 8001490:	9801      	ldr	r0, [sp, #4]
 8001492:	6813      	ldr	r3, [r2, #0]
 8001494:	4615      	mov	r5, r2
 8001496:	b933      	cbnz	r3, 80014a6 <_free_r+0x32>
 8001498:	6063      	str	r3, [r4, #4]
 800149a:	6014      	str	r4, [r2, #0]
 800149c:	b003      	add	sp, #12
 800149e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80014a2:	f000 b8eb 	b.w	800167c <__malloc_unlock>
 80014a6:	42a3      	cmp	r3, r4
 80014a8:	d90b      	bls.n	80014c2 <_free_r+0x4e>
 80014aa:	6821      	ldr	r1, [r4, #0]
 80014ac:	1862      	adds	r2, r4, r1
 80014ae:	4293      	cmp	r3, r2
 80014b0:	bf04      	itt	eq
 80014b2:	681a      	ldreq	r2, [r3, #0]
 80014b4:	685b      	ldreq	r3, [r3, #4]
 80014b6:	6063      	str	r3, [r4, #4]
 80014b8:	bf04      	itt	eq
 80014ba:	1852      	addeq	r2, r2, r1
 80014bc:	6022      	streq	r2, [r4, #0]
 80014be:	602c      	str	r4, [r5, #0]
 80014c0:	e7ec      	b.n	800149c <_free_r+0x28>
 80014c2:	461a      	mov	r2, r3
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	b10b      	cbz	r3, 80014cc <_free_r+0x58>
 80014c8:	42a3      	cmp	r3, r4
 80014ca:	d9fa      	bls.n	80014c2 <_free_r+0x4e>
 80014cc:	6811      	ldr	r1, [r2, #0]
 80014ce:	1855      	adds	r5, r2, r1
 80014d0:	42a5      	cmp	r5, r4
 80014d2:	d10b      	bne.n	80014ec <_free_r+0x78>
 80014d4:	6824      	ldr	r4, [r4, #0]
 80014d6:	4421      	add	r1, r4
 80014d8:	1854      	adds	r4, r2, r1
 80014da:	42a3      	cmp	r3, r4
 80014dc:	6011      	str	r1, [r2, #0]
 80014de:	d1dd      	bne.n	800149c <_free_r+0x28>
 80014e0:	681c      	ldr	r4, [r3, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	6053      	str	r3, [r2, #4]
 80014e6:	4421      	add	r1, r4
 80014e8:	6011      	str	r1, [r2, #0]
 80014ea:	e7d7      	b.n	800149c <_free_r+0x28>
 80014ec:	d902      	bls.n	80014f4 <_free_r+0x80>
 80014ee:	230c      	movs	r3, #12
 80014f0:	6003      	str	r3, [r0, #0]
 80014f2:	e7d3      	b.n	800149c <_free_r+0x28>
 80014f4:	6825      	ldr	r5, [r4, #0]
 80014f6:	1961      	adds	r1, r4, r5
 80014f8:	428b      	cmp	r3, r1
 80014fa:	bf04      	itt	eq
 80014fc:	6819      	ldreq	r1, [r3, #0]
 80014fe:	685b      	ldreq	r3, [r3, #4]
 8001500:	6063      	str	r3, [r4, #4]
 8001502:	bf04      	itt	eq
 8001504:	1949      	addeq	r1, r1, r5
 8001506:	6021      	streq	r1, [r4, #0]
 8001508:	6054      	str	r4, [r2, #4]
 800150a:	e7c7      	b.n	800149c <_free_r+0x28>
 800150c:	b003      	add	sp, #12
 800150e:	bd30      	pop	{r4, r5, pc}
 8001510:	20000114 	.word	0x20000114

08001514 <_malloc_r>:
 8001514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001516:	1ccd      	adds	r5, r1, #3
 8001518:	f025 0503 	bic.w	r5, r5, #3
 800151c:	3508      	adds	r5, #8
 800151e:	2d0c      	cmp	r5, #12
 8001520:	bf38      	it	cc
 8001522:	250c      	movcc	r5, #12
 8001524:	2d00      	cmp	r5, #0
 8001526:	4606      	mov	r6, r0
 8001528:	db01      	blt.n	800152e <_malloc_r+0x1a>
 800152a:	42a9      	cmp	r1, r5
 800152c:	d903      	bls.n	8001536 <_malloc_r+0x22>
 800152e:	230c      	movs	r3, #12
 8001530:	6033      	str	r3, [r6, #0]
 8001532:	2000      	movs	r0, #0
 8001534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001536:	f000 f89b 	bl	8001670 <__malloc_lock>
 800153a:	4921      	ldr	r1, [pc, #132]	; (80015c0 <_malloc_r+0xac>)
 800153c:	680a      	ldr	r2, [r1, #0]
 800153e:	4614      	mov	r4, r2
 8001540:	b99c      	cbnz	r4, 800156a <_malloc_r+0x56>
 8001542:	4f20      	ldr	r7, [pc, #128]	; (80015c4 <_malloc_r+0xb0>)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	b923      	cbnz	r3, 8001552 <_malloc_r+0x3e>
 8001548:	4621      	mov	r1, r4
 800154a:	4630      	mov	r0, r6
 800154c:	f000 f83c 	bl	80015c8 <_sbrk_r>
 8001550:	6038      	str	r0, [r7, #0]
 8001552:	4629      	mov	r1, r5
 8001554:	4630      	mov	r0, r6
 8001556:	f000 f837 	bl	80015c8 <_sbrk_r>
 800155a:	1c43      	adds	r3, r0, #1
 800155c:	d123      	bne.n	80015a6 <_malloc_r+0x92>
 800155e:	230c      	movs	r3, #12
 8001560:	6033      	str	r3, [r6, #0]
 8001562:	4630      	mov	r0, r6
 8001564:	f000 f88a 	bl	800167c <__malloc_unlock>
 8001568:	e7e3      	b.n	8001532 <_malloc_r+0x1e>
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	1b5b      	subs	r3, r3, r5
 800156e:	d417      	bmi.n	80015a0 <_malloc_r+0x8c>
 8001570:	2b0b      	cmp	r3, #11
 8001572:	d903      	bls.n	800157c <_malloc_r+0x68>
 8001574:	6023      	str	r3, [r4, #0]
 8001576:	441c      	add	r4, r3
 8001578:	6025      	str	r5, [r4, #0]
 800157a:	e004      	b.n	8001586 <_malloc_r+0x72>
 800157c:	6863      	ldr	r3, [r4, #4]
 800157e:	42a2      	cmp	r2, r4
 8001580:	bf0c      	ite	eq
 8001582:	600b      	streq	r3, [r1, #0]
 8001584:	6053      	strne	r3, [r2, #4]
 8001586:	4630      	mov	r0, r6
 8001588:	f000 f878 	bl	800167c <__malloc_unlock>
 800158c:	f104 000b 	add.w	r0, r4, #11
 8001590:	1d23      	adds	r3, r4, #4
 8001592:	f020 0007 	bic.w	r0, r0, #7
 8001596:	1ac2      	subs	r2, r0, r3
 8001598:	d0cc      	beq.n	8001534 <_malloc_r+0x20>
 800159a:	1a1b      	subs	r3, r3, r0
 800159c:	50a3      	str	r3, [r4, r2]
 800159e:	e7c9      	b.n	8001534 <_malloc_r+0x20>
 80015a0:	4622      	mov	r2, r4
 80015a2:	6864      	ldr	r4, [r4, #4]
 80015a4:	e7cc      	b.n	8001540 <_malloc_r+0x2c>
 80015a6:	1cc4      	adds	r4, r0, #3
 80015a8:	f024 0403 	bic.w	r4, r4, #3
 80015ac:	42a0      	cmp	r0, r4
 80015ae:	d0e3      	beq.n	8001578 <_malloc_r+0x64>
 80015b0:	1a21      	subs	r1, r4, r0
 80015b2:	4630      	mov	r0, r6
 80015b4:	f000 f808 	bl	80015c8 <_sbrk_r>
 80015b8:	3001      	adds	r0, #1
 80015ba:	d1dd      	bne.n	8001578 <_malloc_r+0x64>
 80015bc:	e7cf      	b.n	800155e <_malloc_r+0x4a>
 80015be:	bf00      	nop
 80015c0:	20000114 	.word	0x20000114
 80015c4:	20000118 	.word	0x20000118

080015c8 <_sbrk_r>:
 80015c8:	b538      	push	{r3, r4, r5, lr}
 80015ca:	4d06      	ldr	r5, [pc, #24]	; (80015e4 <_sbrk_r+0x1c>)
 80015cc:	2300      	movs	r3, #0
 80015ce:	4604      	mov	r4, r0
 80015d0:	4608      	mov	r0, r1
 80015d2:	602b      	str	r3, [r5, #0]
 80015d4:	f7ff fd3a 	bl	800104c <_sbrk>
 80015d8:	1c43      	adds	r3, r0, #1
 80015da:	d102      	bne.n	80015e2 <_sbrk_r+0x1a>
 80015dc:	682b      	ldr	r3, [r5, #0]
 80015de:	b103      	cbz	r3, 80015e2 <_sbrk_r+0x1a>
 80015e0:	6023      	str	r3, [r4, #0]
 80015e2:	bd38      	pop	{r3, r4, r5, pc}
 80015e4:	2000011c 	.word	0x2000011c

080015e8 <_raise_r>:
 80015e8:	291f      	cmp	r1, #31
 80015ea:	b538      	push	{r3, r4, r5, lr}
 80015ec:	4604      	mov	r4, r0
 80015ee:	460d      	mov	r5, r1
 80015f0:	d904      	bls.n	80015fc <_raise_r+0x14>
 80015f2:	2316      	movs	r3, #22
 80015f4:	6003      	str	r3, [r0, #0]
 80015f6:	f04f 30ff 	mov.w	r0, #4294967295
 80015fa:	bd38      	pop	{r3, r4, r5, pc}
 80015fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80015fe:	b112      	cbz	r2, 8001606 <_raise_r+0x1e>
 8001600:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001604:	b94b      	cbnz	r3, 800161a <_raise_r+0x32>
 8001606:	4620      	mov	r0, r4
 8001608:	f000 f830 	bl	800166c <_getpid_r>
 800160c:	462a      	mov	r2, r5
 800160e:	4601      	mov	r1, r0
 8001610:	4620      	mov	r0, r4
 8001612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001616:	f000 b817 	b.w	8001648 <_kill_r>
 800161a:	2b01      	cmp	r3, #1
 800161c:	d00a      	beq.n	8001634 <_raise_r+0x4c>
 800161e:	1c59      	adds	r1, r3, #1
 8001620:	d103      	bne.n	800162a <_raise_r+0x42>
 8001622:	2316      	movs	r3, #22
 8001624:	6003      	str	r3, [r0, #0]
 8001626:	2001      	movs	r0, #1
 8001628:	e7e7      	b.n	80015fa <_raise_r+0x12>
 800162a:	2400      	movs	r4, #0
 800162c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001630:	4628      	mov	r0, r5
 8001632:	4798      	blx	r3
 8001634:	2000      	movs	r0, #0
 8001636:	e7e0      	b.n	80015fa <_raise_r+0x12>

08001638 <raise>:
 8001638:	4b02      	ldr	r3, [pc, #8]	; (8001644 <raise+0xc>)
 800163a:	4601      	mov	r1, r0
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	f7ff bfd3 	b.w	80015e8 <_raise_r>
 8001642:	bf00      	nop
 8001644:	2000001c 	.word	0x2000001c

08001648 <_kill_r>:
 8001648:	b538      	push	{r3, r4, r5, lr}
 800164a:	4d07      	ldr	r5, [pc, #28]	; (8001668 <_kill_r+0x20>)
 800164c:	2300      	movs	r3, #0
 800164e:	4604      	mov	r4, r0
 8001650:	4608      	mov	r0, r1
 8001652:	4611      	mov	r1, r2
 8001654:	602b      	str	r3, [r5, #0]
 8001656:	f7ff fcdf 	bl	8001018 <_kill>
 800165a:	1c43      	adds	r3, r0, #1
 800165c:	d102      	bne.n	8001664 <_kill_r+0x1c>
 800165e:	682b      	ldr	r3, [r5, #0]
 8001660:	b103      	cbz	r3, 8001664 <_kill_r+0x1c>
 8001662:	6023      	str	r3, [r4, #0]
 8001664:	bd38      	pop	{r3, r4, r5, pc}
 8001666:	bf00      	nop
 8001668:	2000011c 	.word	0x2000011c

0800166c <_getpid_r>:
 800166c:	f7ff bccc 	b.w	8001008 <_getpid>

08001670 <__malloc_lock>:
 8001670:	4801      	ldr	r0, [pc, #4]	; (8001678 <__malloc_lock+0x8>)
 8001672:	f000 b809 	b.w	8001688 <__retarget_lock_acquire_recursive>
 8001676:	bf00      	nop
 8001678:	20000124 	.word	0x20000124

0800167c <__malloc_unlock>:
 800167c:	4801      	ldr	r0, [pc, #4]	; (8001684 <__malloc_unlock+0x8>)
 800167e:	f000 b804 	b.w	800168a <__retarget_lock_release_recursive>
 8001682:	bf00      	nop
 8001684:	20000124 	.word	0x20000124

08001688 <__retarget_lock_acquire_recursive>:
 8001688:	4770      	bx	lr

0800168a <__retarget_lock_release_recursive>:
 800168a:	4770      	bx	lr

0800168c <_init>:
 800168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800168e:	bf00      	nop
 8001690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001692:	bc08      	pop	{r3}
 8001694:	469e      	mov	lr, r3
 8001696:	4770      	bx	lr

08001698 <_fini>:
 8001698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800169a:	bf00      	nop
 800169c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800169e:	bc08      	pop	{r3}
 80016a0:	469e      	mov	lr, r3
 80016a2:	4770      	bx	lr
