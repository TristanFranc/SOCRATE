
SOCRATE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c14  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08002dd8  08002dd8  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb8  08002eb8  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08002eb8  08002eb8  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eb8  08002eb8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08002ec0  08002ec0  00012ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000094  08002f5c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000160  08002f5c  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca14  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c6  00000000  00000000  0002cad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004e8  00000000  00000000  0002efa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000430  00000000  00000000  0002f488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000065f2  00000000  00000000  0002f8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c0d  00000000  00000000  00035eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ebfe  00000000  00000000  0003dab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bc6b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d4  00000000  00000000  000bc708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000094 	.word	0x20000094
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002dc0 	.word	0x08002dc0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000098 	.word	0x20000098
 8000200:	08002dc0 	.word	0x08002dc0

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <_ZN15Adc1Stm32f446reC1Eh>:
 * @name   -> Adc1Stm32f446re
 * @brief  -> Constructeur de la classe
 * @param  -> noAxe: numéro de l'axe à auxquel l'adc sera associer
 * @return -> none
 */
Adc1Stm32f446re::Adc1Stm32f446re(uint8_t noAxe)
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]
 8000220:	4a56      	ldr	r2, [pc, #344]	; (800037c <_ZN15Adc1Stm32f446reC1Eh+0x168>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	601a      	str	r2, [r3, #0]
{
	this->noAxe = noAxe;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	78fa      	ldrb	r2, [r7, #3]
 800022a:	711a      	strb	r2, [r3, #4]
	nbsTotalConversionADC = 1;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2201      	movs	r2, #1
 8000230:	715a      	strb	r2, [r3, #5]

	//Config ADC axe 0	(Épaule)
		configFonctionnementADC[0][0] = 'A';               			//GPIO à activer
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2241      	movs	r2, #65	; 0x41
 8000236:	609a      	str	r2, [r3, #8]
		configFonctionnementADC[0][1] = GPIO_MODER_MODER2; 			//no de la pin MODER à activer en mode analogique
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2230      	movs	r2, #48	; 0x30
 800023c:	60da      	str	r2, [r3, #12]
		configFonctionnementADC[0][2] = 1;                 			//no de l'ADC à activer
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2201      	movs	r2, #1
 8000242:	611a      	str	r2, [r3, #16]
		configFonctionnementADC[0][3] = 2;							//no du channel à activer
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2202      	movs	r2, #2
 8000248:	615a      	str	r2, [r3, #20]
		configFonctionnementADC[0][4] = 1;							//position dans la chaine de conversion
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2201      	movs	r2, #1
 800024e:	619a      	str	r2, [r3, #24]
		configFonctionnementADC[0][5] = 8;							//nbs de bit de Résolution
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2208      	movs	r2, #8
 8000254:	61da      	str	r2, [r3, #28]
		configFonctionnementADC[0][6] = CHANNEL_SAMPLING_TIME_84;	//Channel sampling time
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2204      	movs	r2, #4
 800025a:	621a      	str	r2, [r3, #32]

		//Config ADC axe 1 (Coude)
		configFonctionnementADC[1][0] = 'A';               			//GPIO à activer
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2241      	movs	r2, #65	; 0x41
 8000260:	625a      	str	r2, [r3, #36]	; 0x24
		configFonctionnementADC[1][1] = GPIO_MODER_MODER0; 			//no de la pin MODER à activer en mode analogique
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2203      	movs	r2, #3
 8000266:	629a      	str	r2, [r3, #40]	; 0x28
		configFonctionnementADC[1][2] = 1;                 			//no de l'ADC à activer
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2201      	movs	r2, #1
 800026c:	62da      	str	r2, [r3, #44]	; 0x2c
		configFonctionnementADC[1][3] = 0;							//no du channel à activer
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2200      	movs	r2, #0
 8000272:	631a      	str	r2, [r3, #48]	; 0x30
		configFonctionnementADC[1][4] = 1;							//position dans la chaine de conversion
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2201      	movs	r2, #1
 8000278:	635a      	str	r2, [r3, #52]	; 0x34
		configFonctionnementADC[1][5] = 8;							//nbs de bit de Résolution
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2208      	movs	r2, #8
 800027e:	639a      	str	r2, [r3, #56]	; 0x38
		configFonctionnementADC[1][6] = CHANNEL_SAMPLING_TIME_84;	//Channel sampling time
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2204      	movs	r2, #4
 8000284:	63da      	str	r2, [r3, #60]	; 0x3c

		//Config ADC axe 2 (Pince)
		configFonctionnementADC[2][0] = 'A';               			//GPIO à activer
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2241      	movs	r2, #65	; 0x41
 800028a:	641a      	str	r2, [r3, #64]	; 0x40
		configFonctionnementADC[2][1] = GPIO_MODER_MODER1; 			//no de la pin MODER à activer en mode analogique
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	220c      	movs	r2, #12
 8000290:	645a      	str	r2, [r3, #68]	; 0x44
		configFonctionnementADC[2][2] = 1;                 			//no de l'ADC à activer
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2201      	movs	r2, #1
 8000296:	649a      	str	r2, [r3, #72]	; 0x48
		configFonctionnementADC[2][3] = 1;							//no du channel à activer
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2201      	movs	r2, #1
 800029c:	64da      	str	r2, [r3, #76]	; 0x4c
		configFonctionnementADC[2][4] = 1;							//position dans la chaine de conversion
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2201      	movs	r2, #1
 80002a2:	651a      	str	r2, [r3, #80]	; 0x50
		configFonctionnementADC[2][5] = 8;							//nbs de bit de Résolution
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2208      	movs	r2, #8
 80002a8:	655a      	str	r2, [r3, #84]	; 0x54
		configFonctionnementADC[2][6] = CHANNEL_SAMPLING_TIME_84;	//Channel sampling time
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2204      	movs	r2, #4
 80002ae:	659a      	str	r2, [r3, #88]	; 0x58

		//Config potentiometre épaule
		configFonctionnementADC[3][0] = 'A';               			//GPIO à activer
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2241      	movs	r2, #65	; 0x41
 80002b4:	65da      	str	r2, [r3, #92]	; 0x5c
		configFonctionnementADC[3][1] = GPIO_MODER_MODER5; 			//no de la pin MODER à activer en mode analogique
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80002bc:	661a      	str	r2, [r3, #96]	; 0x60
		configFonctionnementADC[3][2] = 1;                 			//no de l'ADC à activer
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2201      	movs	r2, #1
 80002c2:	665a      	str	r2, [r3, #100]	; 0x64
		configFonctionnementADC[3][3] = 5;							//no du channel à activer
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2205      	movs	r2, #5
 80002c8:	669a      	str	r2, [r3, #104]	; 0x68
		configFonctionnementADC[3][4] = 1;							//position dans la chaine de conversion
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2201      	movs	r2, #1
 80002ce:	66da      	str	r2, [r3, #108]	; 0x6c
		configFonctionnementADC[3][5] = 8;							//nbs de bit de Résolution
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2208      	movs	r2, #8
 80002d4:	671a      	str	r2, [r3, #112]	; 0x70
		configFonctionnementADC[3][6] = CHANNEL_SAMPLING_TIME_84;	//Channel sampling time
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2204      	movs	r2, #4
 80002da:	675a      	str	r2, [r3, #116]	; 0x74

		//Config potentiometre coude
		configFonctionnementADC[4][0] = 'A';               			//GPIO à activer
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2241      	movs	r2, #65	; 0x41
 80002e0:	679a      	str	r2, [r3, #120]	; 0x78
		configFonctionnementADC[4][1] = GPIO_MODER_MODER4; 			//no de la pin MODER à activer en mode analogique
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002e8:	67da      	str	r2, [r3, #124]	; 0x7c
		configFonctionnementADC[4][2] = 1;                 			//no de l'ADC à activer
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2201      	movs	r2, #1
 80002ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		configFonctionnementADC[4][3] = 4;							//no du channel à activer
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2204      	movs	r2, #4
 80002f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		configFonctionnementADC[4][4] = 1;							//position dans la chaine de conversion
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2201      	movs	r2, #1
 80002fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		configFonctionnementADC[4][5] = 8;							//nbs de bit de Résolution
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2208      	movs	r2, #8
 8000306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		configFonctionnementADC[4][6] = CHANNEL_SAMPLING_TIME_84;	//Channel sampling time
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2204      	movs	r2, #4
 800030e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90


		//Config potentiometre pince
		configFonctionnementADC[5][0] = 'A';               			//GPIO à activer
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2241      	movs	r2, #65	; 0x41
 8000316:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		configFonctionnementADC[5][1] = GPIO_MODER_MODER6; 			//no de la pin MODER à activer en mode analogique
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000320:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		configFonctionnementADC[5][2] = 1;                 			//no de l'ADC à activer
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2201      	movs	r2, #1
 8000328:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		configFonctionnementADC[5][3] = 6;							//no du channel à activer
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2206      	movs	r2, #6
 8000330:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		configFonctionnementADC[5][4] = 1;							//position dans la chaine de conversion
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2201      	movs	r2, #1
 8000338:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		configFonctionnementADC[5][5] = 8;							//nbs de bit de Résolution
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2208      	movs	r2, #8
 8000340:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		configFonctionnementADC[5][6] = CHANNEL_SAMPLING_TIME_84;	//Channel sampling time
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2204      	movs	r2, #4
 8000348:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	innitADC();
 800034c:	6878      	ldr	r0, [r7, #4]
 800034e:	f000 f819 	bl	8000384 <_ZN15Adc1Stm32f446re8innitADCEv>
	enableADC();
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f000 fa90 	bl	8000878 <_ZN15Adc1Stm32f446re9enableADCEv>
	ADC1->SR &= ~ADC_SR_EOC;
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <_ZN15Adc1Stm32f446reC1Eh+0x16c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a08      	ldr	r2, [pc, #32]	; (8000380 <_ZN15Adc1Stm32f446reC1Eh+0x16c>)
 800035e:	f023 0302 	bic.w	r3, r3, #2
 8000362:	6013      	str	r3, [r2, #0]
	ADC1->SR &= ~ADC_SR_OVR;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <_ZN15Adc1Stm32f446reC1Eh+0x16c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a05      	ldr	r2, [pc, #20]	; (8000380 <_ZN15Adc1Stm32f446reC1Eh+0x16c>)
 800036a:	f023 0320 	bic.w	r3, r3, #32
 800036e:	6013      	str	r3, [r2, #0]

}
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4618      	mov	r0, r3
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	08002de0 	.word	0x08002de0
 8000380:	40012000 	.word	0x40012000

08000384 <_ZN15Adc1Stm32f446re8innitADCEv>:
 * @brief  -> Initialise tout les registre necessaire aux fonctionnement de l'ADC
 * @param  -> none
 * @return -> none
 */
void Adc1Stm32f446re::innitADC()
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]

	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;					//Act de la clock sur l'adc
 800038c:	4b4e      	ldr	r3, [pc, #312]	; (80004c8 <_ZN15Adc1Stm32f446re8innitADCEv+0x144>)
 800038e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000390:	4a4d      	ldr	r2, [pc, #308]	; (80004c8 <_ZN15Adc1Stm32f446re8innitADCEv+0x144>)
 8000392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000396:	6453      	str	r3, [r2, #68]	; 0x44
	setGPIO();											//seeting du GPIO demander
 8000398:	6878      	ldr	r0, [r7, #4]
 800039a:	f000 f89b 	bl	80004d4 <_ZN15Adc1Stm32f446re7setGPIOEv>


	ADC->CCR |= ADC_CCR_ADCPRE_0;						//Set prescaler clock ADC
 800039e:	4b4b      	ldr	r3, [pc, #300]	; (80004cc <_ZN15Adc1Stm32f446re8innitADCEv+0x148>)
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	4a4a      	ldr	r2, [pc, #296]	; (80004cc <_ZN15Adc1Stm32f446re8innitADCEv+0x148>)
 80003a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003a8:	6053      	str	r3, [r2, #4]
	ADC1->CR1 |= ADC_CR1_SCAN;							//Scan mode
 80003aa:	4b49      	ldr	r3, [pc, #292]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	4a48      	ldr	r2, [pc, #288]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 80003b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003b4:	6053      	str	r3, [r2, #4]

	setResolution(configFonctionnementADC[noAxe][5]);	// Bit Résolution
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	791b      	ldrb	r3, [r3, #4]
 80003ba:	6879      	ldr	r1, [r7, #4]
 80003bc:	1c5a      	adds	r2, r3, #1
 80003be:	4613      	mov	r3, r2
 80003c0:	00db      	lsls	r3, r3, #3
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	440b      	add	r3, r1
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	4619      	mov	r1, r3
 80003ce:	6878      	ldr	r0, [r7, #4]
 80003d0:	f000 f908 	bl	80005e4 <_ZN15Adc1Stm32f446re13setResolutionEh>

	//	ADC1->CR2 |= ADC_CR2_CONT;	 						//Mode conversion continue
	ADC1->CR2 &= ~(ADC_CR2_CONT);						//Mode single
 80003d4:	4b3e      	ldr	r3, [pc, #248]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	4a3d      	ldr	r2, [pc, #244]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 80003da:	f023 0302 	bic.w	r3, r3, #2
 80003de:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EOCS;							// Flag EOC après chaque conversion
 80003e0:	4b3b      	ldr	r3, [pc, #236]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	4a3a      	ldr	r2, [pc, #232]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 80003e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ea:	6093      	str	r3, [r2, #8]

	ADC1->CR2 &= ~ADC_CR2_ALIGN; 						//Alignement registre à droite
 80003ec:	4b38      	ldr	r3, [pc, #224]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	4a37      	ldr	r2, [pc, #220]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 80003f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003f6:	6093      	str	r3, [r2, #8]

	setADCConversionNbsCycle(); //sampling time par cycle
 80003f8:	6878      	ldr	r0, [r7, #4]
 80003fa:	f000 f9b9 	bl	8000770 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv>

	ADC1->SQR1 &= ~(0b1111 << 20); 	// remise à zéro  du nbs de conversion
 80003fe:	4b34      	ldr	r3, [pc, #208]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 8000400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000402:	4a33      	ldr	r2, [pc, #204]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 8000404:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000408:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 |= 0 << 20;			//nbs total de conversion
 800040a:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 800040c:	4a30      	ldr	r2, [pc, #192]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 800040e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000410:	62d3      	str	r3, [r2, #44]	; 0x2c

	//
	ADC->CCR |= ADC_CCR_ADCPRE_0;						//Set prescaler clock ADC
 8000412:	4b2e      	ldr	r3, [pc, #184]	; (80004cc <_ZN15Adc1Stm32f446re8innitADCEv+0x148>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	4a2d      	ldr	r2, [pc, #180]	; (80004cc <_ZN15Adc1Stm32f446re8innitADCEv+0x148>)
 8000418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800041c:	6053      	str	r3, [r2, #4]
	ADC1->CR1 |= ADC_CR1_SCAN;							//Scan mode
 800041e:	4b2c      	ldr	r3, [pc, #176]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	4a2b      	ldr	r2, [pc, #172]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 8000424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000428:	6053      	str	r3, [r2, #4]
	//
	setResolution(configFonctionnementADC[noAxe][5]);	// Bit Résolution
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	791b      	ldrb	r3, [r3, #4]
 800042e:	6879      	ldr	r1, [r7, #4]
 8000430:	1c5a      	adds	r2, r3, #1
 8000432:	4613      	mov	r3, r2
 8000434:	00db      	lsls	r3, r3, #3
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	440b      	add	r3, r1
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	b2db      	uxtb	r3, r3
 8000440:	4619      	mov	r1, r3
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f000 f8ce 	bl	80005e4 <_ZN15Adc1Stm32f446re13setResolutionEh>
	//
	//	ADC1->CR2 |= ADC_CR2_CONT;	 						//Mode conversion continue
	ADC1->CR2 &= ~(ADC_CR2_CONT);						//Mode single
 8000448:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	4a20      	ldr	r2, [pc, #128]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 800044e:	f023 0302 	bic.w	r3, r3, #2
 8000452:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EOCS;							// Flag EOC après chaque conversion
 8000454:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	4a1d      	ldr	r2, [pc, #116]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 800045a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800045e:	6093      	str	r3, [r2, #8]
	//
	ADC1->CR2 &= ~ADC_CR2_ALIGN; 						//Alignement registre à droite
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	4a1a      	ldr	r2, [pc, #104]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 8000466:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800046a:	6093      	str	r3, [r2, #8]
	//
	setADCConversionNbsCycle(); //sampling time par cycle
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f000 f97f 	bl	8000770 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv>
	//
	ADC1->SQR1 &= ~(0b1111 << 20); 	// remise à zéro  du nbs de conversion
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 8000474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000476:	4a16      	ldr	r2, [pc, #88]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 8000478:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800047c:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 |= 4 << 20;			//nbs total de conversion
 800047e:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 8000480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000482:	4a13      	ldr	r2, [pc, #76]	; (80004d0 <_ZN15Adc1Stm32f446re8innitADCEv+0x14c>)
 8000484:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000488:	62d3      	str	r3, [r2, #44]	; 0x2c

	setChannelPositioningQueue(configFonctionnementADC[noAxe][3],configFonctionnementADC[noAxe][4]);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	791b      	ldrb	r3, [r3, #4]
 800048e:	4619      	mov	r1, r3
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	460b      	mov	r3, r1
 8000494:	00db      	lsls	r3, r3, #3
 8000496:	1a5b      	subs	r3, r3, r1
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	4413      	add	r3, r2
 800049c:	3314      	adds	r3, #20
 800049e:	6819      	ldr	r1, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	791b      	ldrb	r3, [r3, #4]
 80004a4:	4618      	mov	r0, r3
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	4603      	mov	r3, r0
 80004aa:	00db      	lsls	r3, r3, #3
 80004ac:	1a1b      	subs	r3, r3, r0
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	4413      	add	r3, r2
 80004b2:	3318      	adds	r3, #24
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	461a      	mov	r2, r3
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f000 f8eb 	bl	8000694 <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm>

}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40023800 	.word	0x40023800
 80004cc:	40012300 	.word	0x40012300
 80004d0:	40012000 	.word	0x40012000

080004d4 <_ZN15Adc1Stm32f446re7setGPIOEv>:
 * @brief  -> Initialise la clock sur le GPIO voulue et la met en analog la pin associer au channel de l'adc voulue
 * @param  -> none
 * @return -> none
 */
void Adc1Stm32f446re::setGPIO()
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	if (configFonctionnementADC[noAxe][0] == 'A' )
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	791b      	ldrb	r3, [r3, #4]
 80004e0:	4619      	mov	r1, r3
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	00db      	lsls	r3, r3, #3
 80004e8:	1a5b      	subs	r3, r3, r1
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	4413      	add	r3, r2
 80004ee:	3308      	adds	r3, #8
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b41      	cmp	r3, #65	; 0x41
 80004f4:	d121      	bne.n	800053a <_ZN15Adc1Stm32f446re7setGPIOEv+0x66>
	{
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN); //activation de la clock sur GPIOA
 80004f6:	4b37      	ldr	r3, [pc, #220]	; (80005d4 <_ZN15Adc1Stm32f446re7setGPIOEv+0x100>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a36      	ldr	r2, [pc, #216]	; (80005d4 <_ZN15Adc1Stm32f446re7setGPIOEv+0x100>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER |= configFonctionnementADC[noAxe][1]; //mise en mode analog de la pin voulu
 8000502:	4b35      	ldr	r3, [pc, #212]	; (80005d8 <_ZN15Adc1Stm32f446re7setGPIOEv+0x104>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	791b      	ldrb	r3, [r3, #4]
 800050a:	4618      	mov	r0, r3
 800050c:	6879      	ldr	r1, [r7, #4]
 800050e:	4603      	mov	r3, r0
 8000510:	00db      	lsls	r3, r3, #3
 8000512:	1a1b      	subs	r3, r3, r0
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	440b      	add	r3, r1
 8000518:	330c      	adds	r3, #12
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	492e      	ldr	r1, [pc, #184]	; (80005d8 <_ZN15Adc1Stm32f446re7setGPIOEv+0x104>)
 800051e:	4313      	orrs	r3, r2
 8000520:	600b      	str	r3, [r1, #0]
		GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR0 << (configFonctionnementADC[0][3] * 2);
 8000522:	4b2d      	ldr	r3, [pc, #180]	; (80005d8 <_ZN15Adc1Stm32f446re7setGPIOEv+0x104>)
 8000524:	68da      	ldr	r2, [r3, #12]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	f06f 0103 	mvn.w	r1, #3
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	4928      	ldr	r1, [pc, #160]	; (80005d8 <_ZN15Adc1Stm32f446re7setGPIOEv+0x104>)
 8000536:	4013      	ands	r3, r2
 8000538:	60cb      	str	r3, [r1, #12]
	}

	if (configFonctionnementADC[noAxe][0] == ('B' || 'b'))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	791b      	ldrb	r3, [r3, #4]
 800053e:	4619      	mov	r1, r3
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	460b      	mov	r3, r1
 8000544:	00db      	lsls	r3, r3, #3
 8000546:	1a5b      	subs	r3, r3, r1
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	4413      	add	r3, r2
 800054c:	3308      	adds	r3, #8
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d116      	bne.n	8000582 <_ZN15Adc1Stm32f446re7setGPIOEv+0xae>
	{
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN); //activation de la clock sur GPIOB
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <_ZN15Adc1Stm32f446re7setGPIOEv+0x100>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000558:	4a1e      	ldr	r2, [pc, #120]	; (80005d4 <_ZN15Adc1Stm32f446re7setGPIOEv+0x100>)
 800055a:	f043 0302 	orr.w	r3, r3, #2
 800055e:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOB->MODER |= configFonctionnementADC[noAxe][1];//mise en mode analog de la pin voulu
 8000560:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <_ZN15Adc1Stm32f446re7setGPIOEv+0x108>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	4618      	mov	r0, r3
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	4603      	mov	r3, r0
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	1a1b      	subs	r3, r3, r0
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	440b      	add	r3, r1
 8000576:	330c      	adds	r3, #12
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4918      	ldr	r1, [pc, #96]	; (80005dc <_ZN15Adc1Stm32f446re7setGPIOEv+0x108>)
 800057c:	4313      	orrs	r3, r2
 800057e:	600b      	str	r3, [r1, #0]
	else if (configFonctionnementADC[noAxe][0] == ('C' || 'c'))
	{
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN); //activation de la clock sur GPIOC
		GPIOC->MODER |= configFonctionnementADC[noAxe][1];//mise en mode analog de la pin voulu
	}
}
 8000580:	e022      	b.n	80005c8 <_ZN15Adc1Stm32f446re7setGPIOEv+0xf4>
	else if (configFonctionnementADC[noAxe][0] == ('C' || 'c'))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	791b      	ldrb	r3, [r3, #4]
 8000586:	4619      	mov	r1, r3
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	460b      	mov	r3, r1
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	1a5b      	subs	r3, r3, r1
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	4413      	add	r3, r2
 8000594:	3308      	adds	r3, #8
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d115      	bne.n	80005c8 <_ZN15Adc1Stm32f446re7setGPIOEv+0xf4>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN); //activation de la clock sur GPIOC
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <_ZN15Adc1Stm32f446re7setGPIOEv+0x100>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	4a0c      	ldr	r2, [pc, #48]	; (80005d4 <_ZN15Adc1Stm32f446re7setGPIOEv+0x100>)
 80005a2:	f043 0304 	orr.w	r3, r3, #4
 80005a6:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOC->MODER |= configFonctionnementADC[noAxe][1];//mise en mode analog de la pin voulu
 80005a8:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <_ZN15Adc1Stm32f446re7setGPIOEv+0x10c>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	791b      	ldrb	r3, [r3, #4]
 80005b0:	4618      	mov	r0, r3
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	4603      	mov	r3, r0
 80005b6:	00db      	lsls	r3, r3, #3
 80005b8:	1a1b      	subs	r3, r3, r0
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	440b      	add	r3, r1
 80005be:	330c      	adds	r3, #12
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4907      	ldr	r1, [pc, #28]	; (80005e0 <_ZN15Adc1Stm32f446re7setGPIOEv+0x10c>)
 80005c4:	4313      	orrs	r3, r2
 80005c6:	600b      	str	r3, [r1, #0]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020000 	.word	0x40020000
 80005dc:	40020400 	.word	0x40020400
 80005e0:	40020800 	.word	0x40020800

080005e4 <_ZN15Adc1Stm32f446re13setResolutionEh>:
 * @brief  -> Initialise la résolution de la conversion de l'ADC choisie
 * @param  -> resolution
 * @return -> none
 */
void Adc1Stm32f446re::setResolution(uint8_t resolution)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	70fb      	strb	r3, [r7, #3]
	switch(resolution)
 80005f0:	78fb      	ldrb	r3, [r7, #3]
 80005f2:	3b06      	subs	r3, #6
 80005f4:	2b06      	cmp	r3, #6
 80005f6:	d845      	bhi.n	8000684 <_ZN15Adc1Stm32f446re13setResolutionEh+0xa0>
 80005f8:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <_ZN15Adc1Stm32f446re13setResolutionEh+0x1c>)
 80005fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fe:	bf00      	nop
 8000600:	0800061d 	.word	0x0800061d
 8000604:	08000685 	.word	0x08000685
 8000608:	08000637 	.word	0x08000637
 800060c:	08000685 	.word	0x08000685
 8000610:	08000651 	.word	0x08000651
 8000614:	08000685 	.word	0x08000685
 8000618:	0800066b 	.word	0x0800066b
	{
	case 6:
		ADC1->CR1 |= ADC_CR1_RES_1;
 800061c:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000622:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000626:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_0;
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	4a18      	ldr	r2, [pc, #96]	; (8000690 <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 800062e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000632:	6053      	str	r3, [r2, #4]
		break;
 8000634:	e026      	b.n	8000684 <_ZN15Adc1Stm32f446re13setResolutionEh+0xa0>

	case 8:
		ADC1->CR1 |= ADC_CR1_RES_1;
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	4a15      	ldr	r2, [pc, #84]	; (8000690 <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 800063c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000640:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	4a12      	ldr	r2, [pc, #72]	; (8000690 <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000648:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800064c:	6053      	str	r3, [r2, #4]
		break;
 800064e:	e019      	b.n	8000684 <_ZN15Adc1Stm32f446re13setResolutionEh+0xa0>

	case 10:
		ADC1->CR1 |= ADC_CR1_RES_1;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000656:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800065a:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000666:	6053      	str	r3, [r2, #4]
		break;
 8000668:	e00c      	b.n	8000684 <_ZN15Adc1Stm32f446re13setResolutionEh+0xa0>

	case 12:
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000670:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000674:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ADC_CR1_RES_1;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 800067c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000680:	6053      	str	r3, [r2, #4]
		break;
 8000682:	bf00      	nop
	}
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	40012000 	.word	0x40012000

08000694 <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm>:
 * @param  -> noChannel: Numéro du channel à positionner
 * 			  queuePosition: position dans la queue de conversion normal
 * @return -> none
 */
void Adc1Stm32f446re::setChannelPositioningQueue(uint32_t noChannel, uint32_t queuePosition)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
	//	//Gestion de la position du channel dans la chaine de conversion
	if(queuePosition < 7)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b06      	cmp	r3, #6
 80006a4:	d81a      	bhi.n	80006dc <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm+0x48>
	{
		ADC1->SQR3 &= ~(ADC_SQR3_SQ1 << ((queuePosition-1)*5));
 80006a6:	4b31      	ldr	r3, [pc, #196]	; (800076c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm+0xd8>)
 80006a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	4613      	mov	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	3b05      	subs	r3, #5
 80006b4:	221f      	movs	r2, #31
 80006b6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ba:	43db      	mvns	r3, r3
 80006bc:	4a2b      	ldr	r2, [pc, #172]	; (800076c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm+0xd8>)
 80006be:	400b      	ands	r3, r1
 80006c0:	6353      	str	r3, [r2, #52]	; 0x34
		ADC1->SQR3 |= (noChannel << ((queuePosition-1)*5));
 80006c2:	4b2a      	ldr	r3, [pc, #168]	; (800076c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm+0xd8>)
 80006c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	4613      	mov	r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	3b05      	subs	r3, #5
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	fa02 f303 	lsl.w	r3, r2, r3
 80006d6:	4a25      	ldr	r2, [pc, #148]	; (800076c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm+0xd8>)
 80006d8:	430b      	orrs	r3, r1
 80006da:	6353      	str	r3, [r2, #52]	; 0x34
	}

	if(queuePosition > 6 && queuePosition < 13)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d91d      	bls.n	800071e <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm+0x8a>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b0c      	cmp	r3, #12
 80006e6:	d81a      	bhi.n	800071e <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm+0x8a>
	{
		ADC1->SQR2 &= ~(ADC_SQR2_SQ7 << ((queuePosition-1)*5));
 80006e8:	4b20      	ldr	r3, [pc, #128]	; (800076c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm+0xd8>)
 80006ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	4613      	mov	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	3b05      	subs	r3, #5
 80006f6:	221f      	movs	r2, #31
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	43db      	mvns	r3, r3
 80006fe:	4a1b      	ldr	r2, [pc, #108]	; (800076c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm+0xd8>)
 8000700:	400b      	ands	r3, r1
 8000702:	6313      	str	r3, [r2, #48]	; 0x30
		ADC1->SQR2 |= (noChannel << ((queuePosition-1)*5));
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm+0xd8>)
 8000706:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	4613      	mov	r3, r2
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4413      	add	r3, r2
 8000710:	3b05      	subs	r3, #5
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	fa02 f303 	lsl.w	r3, r2, r3
 8000718:	4a14      	ldr	r2, [pc, #80]	; (800076c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm+0xd8>)
 800071a:	430b      	orrs	r3, r1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
	}

	if(queuePosition > 12 && queuePosition < 17)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b0c      	cmp	r3, #12
 8000722:	d91d      	bls.n	8000760 <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm+0xcc>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b10      	cmp	r3, #16
 8000728:	d81a      	bhi.n	8000760 <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm+0xcc>
	{
		ADC1->SQR1 &= ~(ADC_SQR1_SQ13 << ((queuePosition - 1)*5));
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm+0xd8>)
 800072c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	4613      	mov	r3, r2
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	4413      	add	r3, r2
 8000736:	3b05      	subs	r3, #5
 8000738:	221f      	movs	r2, #31
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	43db      	mvns	r3, r3
 8000740:	4a0a      	ldr	r2, [pc, #40]	; (800076c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm+0xd8>)
 8000742:	400b      	ands	r3, r1
 8000744:	62d3      	str	r3, [r2, #44]	; 0x2c
		ADC1->SQR1 |= (noChannel << ((queuePosition - 1)*5));
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm+0xd8>)
 8000748:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	4613      	mov	r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	4413      	add	r3, r2
 8000752:	3b05      	subs	r3, #5
 8000754:	68ba      	ldr	r2, [r7, #8]
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	4a04      	ldr	r2, [pc, #16]	; (800076c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm+0xd8>)
 800075c:	430b      	orrs	r3, r1
 800075e:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	40012000 	.word	0x40012000

08000770 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv>:
 * @brief  -> initialise le nombre de cycle par conversion
 * @param  -> none
 * @return -> none
 */
void Adc1Stm32f446re::setADCConversionNbsCycle()
{
 8000770:	b490      	push	{r4, r7}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	if(configFonctionnementADC[noAxe][4] < 10)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	791b      	ldrb	r3, [r3, #4]
 800077c:	4619      	mov	r1, r3
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	1a5b      	subs	r3, r3, r1
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	3318      	adds	r3, #24
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b09      	cmp	r3, #9
 8000790:	d81f      	bhi.n	80007d2 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv+0x62>
	{
		ADC1->SMPR2 |= configFonctionnementADC[noAxe][6] << (configFonctionnementADC[noAxe][3] * 3);  //Channel sampling time
 8000792:	4b30      	ldr	r3, [pc, #192]	; (8000854 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv+0xe4>)
 8000794:	6919      	ldr	r1, [r3, #16]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	4618      	mov	r0, r3
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	4603      	mov	r3, r0
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	1a1b      	subs	r3, r3, r0
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	3320      	adds	r3, #32
 80007aa:	6818      	ldr	r0, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	461c      	mov	r4, r3
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4623      	mov	r3, r4
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	1b1b      	subs	r3, r3, r4
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	3314      	adds	r3, #20
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	4613      	mov	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	4413      	add	r3, r2
 80007c8:	fa00 f303 	lsl.w	r3, r0, r3
 80007cc:	4a21      	ldr	r2, [pc, #132]	; (8000854 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv+0xe4>)
 80007ce:	430b      	orrs	r3, r1
 80007d0:	6113      	str	r3, [r2, #16]
	}

	if((configFonctionnementADC[noAxe][4] < 19) && (configFonctionnementADC[noAxe][4] > 9))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	791b      	ldrb	r3, [r3, #4]
 80007d6:	4619      	mov	r1, r3
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	460b      	mov	r3, r1
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	1a5b      	subs	r3, r3, r1
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	3318      	adds	r3, #24
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b12      	cmp	r3, #18
 80007ea:	d82d      	bhi.n	8000848 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv+0xd8>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	4619      	mov	r1, r3
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	1a5b      	subs	r3, r3, r1
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	3318      	adds	r3, #24
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b09      	cmp	r3, #9
 8000804:	d920      	bls.n	8000848 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv+0xd8>
	{
		ADC1->SMPR1 |= configFonctionnementADC[noAxe][6] << ((configFonctionnementADC[noAxe][3] - 9) * 3);  //Channel sampling time
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv+0xe4>)
 8000808:	68d9      	ldr	r1, [r3, #12]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	791b      	ldrb	r3, [r3, #4]
 800080e:	4618      	mov	r0, r3
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4603      	mov	r3, r0
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	1a1b      	subs	r3, r3, r0
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	3320      	adds	r3, #32
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	461c      	mov	r4, r3
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	4623      	mov	r3, r4
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	1b1b      	subs	r3, r3, r4
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	3314      	adds	r3, #20
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4613      	mov	r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	4413      	add	r3, r2
 800083c:	3b1b      	subs	r3, #27
 800083e:	fa00 f303 	lsl.w	r3, r0, r3
 8000842:	4a04      	ldr	r2, [pc, #16]	; (8000854 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv+0xe4>)
 8000844:	430b      	orrs	r3, r1
 8000846:	60d3      	str	r3, [r2, #12]
	}
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bc90      	pop	{r4, r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40012000 	.word	0x40012000

08000858 <_ZN15Adc1Stm32f446re13getConversionEv>:
 * @brief  -> renvoie la valeur de la dernière conversion faite pas l'adc
 * @param  -> none
 * @return -> uint16: valeur de la dernière conversion faite pas l'adc
 */
uint16_t Adc1Stm32f446re::getConversion()
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	return ADC1->DR;
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <_ZN15Adc1Stm32f446re13getConversionEv+0x1c>)
 8000862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000864:	b29b      	uxth	r3, r3
}
 8000866:	4618      	mov	r0, r3
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40012000 	.word	0x40012000

08000878 <_ZN15Adc1Stm32f446re9enableADCEv>:
 * @brief  -> Active l'adc
 * @param  -> none
 * @return -> none
 */
void Adc1Stm32f446re::enableADC()
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	ADC1->CR2 |= ADC_CR2_ADON;  //enable ADON
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <_ZN15Adc1Stm32f446re9enableADCEv+0x3c>)
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <_ZN15Adc1Stm32f446re9enableADCEv+0x3c>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	6093      	str	r3, [r2, #8]

	uint32_t delay = 10000; //Wait for ADC to stabillize
 800088c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000890:	60fb      	str	r3, [r7, #12]
	while(delay--);
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	1e5a      	subs	r2, r3, #1
 8000896:	60fa      	str	r2, [r7, #12]
 8000898:	2b00      	cmp	r3, #0
 800089a:	bf14      	ite	ne
 800089c:	2301      	movne	r3, #1
 800089e:	2300      	moveq	r3, #0
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d000      	beq.n	80008a8 <_ZN15Adc1Stm32f446re9enableADCEv+0x30>
 80008a6:	e7f4      	b.n	8000892 <_ZN15Adc1Stm32f446re9enableADCEv+0x1a>
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40012000 	.word	0x40012000

080008b8 <_ZN15Adc1Stm32f446re18startAdcConversionEv>:
 * @brief  -> démarre la conversion de l'adc
 * @param  -> none
 * @return -> none
 */
void Adc1Stm32f446re::startAdcConversion()
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

	setChannelPositioningQueue(configFonctionnementADC[this->noAxe][3],1);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	791b      	ldrb	r3, [r3, #4]
 80008c4:	4619      	mov	r1, r3
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	1a5b      	subs	r3, r3, r1
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	4413      	add	r3, r2
 80008d2:	3314      	adds	r3, #20
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2201      	movs	r2, #1
 80008d8:	4619      	mov	r1, r3
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff feda 	bl	8000694 <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEmm>

	ADC1->CR2 |= ADC_CR2_SWSTART;
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <_ZN15Adc1Stm32f446re18startAdcConversionEv+0x3c>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	4a03      	ldr	r2, [pc, #12]	; (80008f4 <_ZN15Adc1Stm32f446re18startAdcConversionEv+0x3c>)
 80008e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80008ea:	6093      	str	r3, [r2, #8]
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40012000 	.word	0x40012000

080008f8 <_ZN15Adc1Stm32f446re11waitEocFlagEv>:
 * @brief  -> Flag de fin de conversion de l'adc
 * @param  -> none
 * @return ->
 */
uint8_t Adc1Stm32f446re::waitEocFlag()
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	uint32_t delay = 10000; //Wait for ADC to stabillize
 8000900:	f242 7310 	movw	r3, #10000	; 0x2710
 8000904:	60fb      	str	r3, [r7, #12]
	while(!(ADC1->SR & (1 << 1)) || !delay)
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <_ZN15Adc1Stm32f446re11waitEocFlagEv+0x4c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	2b00      	cmp	r3, #0
 8000910:	d002      	beq.n	8000918 <_ZN15Adc1Stm32f446re11waitEocFlagEv+0x20>
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d101      	bne.n	800091c <_ZN15Adc1Stm32f446re11waitEocFlagEv+0x24>
 8000918:	2301      	movs	r3, #1
 800091a:	e000      	b.n	800091e <_ZN15Adc1Stm32f446re11waitEocFlagEv+0x26>
 800091c:	2300      	movs	r3, #0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d003      	beq.n	800092a <_ZN15Adc1Stm32f446re11waitEocFlagEv+0x32>
	{
		delay--;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	3b01      	subs	r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
	while(!(ADC1->SR & (1 << 1)) || !delay)
 8000928:	e7ed      	b.n	8000906 <_ZN15Adc1Stm32f446re11waitEocFlagEv+0xe>
	}

	if(!delay)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d101      	bne.n	8000934 <_ZN15Adc1Stm32f446re11waitEocFlagEv+0x3c>
		return 0;
 8000930:	2300      	movs	r3, #0
 8000932:	e000      	b.n	8000936 <_ZN15Adc1Stm32f446re11waitEocFlagEv+0x3e>
	else
		return 1;
 8000934:	2301      	movs	r3, #1

}
 8000936:	4618      	mov	r0, r3
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40012000 	.word	0x40012000

08000948 <_ZN15Adc1Stm32f446re12clearEocFlagEv>:
 * @brief  -> remise à zéro du flag de fin de conversion de l'adc
 * @param  -> none
 * @return -> none
 */
void Adc1Stm32f446re::clearEocFlag()
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	ADC1->SR &= ~ADC_SR_EOC;
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <_ZN15Adc1Stm32f446re12clearEocFlagEv+0x2c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <_ZN15Adc1Stm32f446re12clearEocFlagEv+0x2c>)
 8000956:	f023 0302 	bic.w	r3, r3, #2
 800095a:	6013      	str	r3, [r2, #0]
	ADC1->SR &= ~ADC_SR_OVR;
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <_ZN15Adc1Stm32f446re12clearEocFlagEv+0x2c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <_ZN15Adc1Stm32f446re12clearEocFlagEv+0x2c>)
 8000962:	f023 0320 	bic.w	r3, r3, #32
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	40012000 	.word	0x40012000

08000978 <_ZN15Adc1Stm32f446reD1Ev>:
 * @name   -> ~Adc1Stm32f446re
 * @brief  -> destructeur de la classe
 * @param  -> none
 * @return -> none
 */
Adc1Stm32f446re::~Adc1Stm32f446re() {
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <_ZN15Adc1Stm32f446reD1Ev+0x1c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	08002de0 	.word	0x08002de0

08000998 <_ZN15Adc1Stm32f446reD0Ev>:
Adc1Stm32f446re::~Adc1Stm32f446re() {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
}
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ffe9 	bl	8000978 <_ZN15Adc1Stm32f446reD1Ev>
 80009a6:	21b0      	movs	r1, #176	; 0xb0
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f002 f80a 	bl	80029c2 <_ZdlPvj>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <_ZN22FiltreFenetreGlissanteC1Ev>:
 *      Author: Justin
 */

#include "FiltreFenetreGlissante.h"

FiltreFenetreGlissante::FiltreFenetreGlissante()
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <_ZN22FiltreFenetreGlissanteC1Ev+0x34>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	601a      	str	r2, [r3, #0]
{
	compteur = 0;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2200      	movs	r2, #0
 80009ca:	711a      	strb	r2, [r3, #4]
	filtrePositionAxe[0] = 0;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	715a      	strb	r2, [r3, #5]
	filtrePositionAxe[1] = 0;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	719a      	strb	r2, [r3, #6]
	filtrePositionAxe[2] = 0;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	71da      	strb	r2, [r3, #7]

}
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4618      	mov	r0, r3
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	08002df0 	.word	0x08002df0

080009f0 <_ZN22FiltreFenetreGlissante16miseNiveauFiltreEh>:

void FiltreFenetreGlissante::miseNiveauFiltre(uint8_t positionActuelAxe)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	70fb      	strb	r3, [r7, #3]
	if(compteur >  2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	791b      	ldrb	r3, [r3, #4]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d902      	bls.n	8000a0a <_ZN22FiltreFenetreGlissante16miseNiveauFiltreEh+0x1a>
	{
		compteur = 0;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	711a      	strb	r2, [r3, #4]
	}

	filtrePositionAxe[compteur] = positionActuelAxe;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	791b      	ldrb	r3, [r3, #4]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	78fa      	ldrb	r2, [r7, #3]
 8000a16:	715a      	strb	r2, [r3, #5]
	compteur += 1;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	791b      	ldrb	r3, [r3, #4]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	711a      	strb	r2, [r3, #4]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <_ZN22FiltreFenetreGlissante14resultatFiltreEv>:

uint16_t FiltreFenetreGlissante::resultatFiltre()
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	resultatFenetre = 0;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	811a      	strh	r2, [r3, #8]
	for(uint8_t i = 0; i < 3; i++)
 8000a3e:	2300      	movs	r3, #0
 8000a40:	73fb      	strb	r3, [r7, #15]
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d80e      	bhi.n	8000a66 <_ZN22FiltreFenetreGlissante14resultatFiltreEv+0x36>
	{
		resultatFenetre += filtrePositionAxe[i];
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	891a      	ldrh	r2, [r3, #8]
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	440b      	add	r3, r1
 8000a52:	795b      	ldrb	r3, [r3, #5]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	4413      	add	r3, r2
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	811a      	strh	r2, [r3, #8]
	for(uint8_t i = 0; i < 3; i++)
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	3301      	adds	r3, #1
 8000a62:	73fb      	strb	r3, [r7, #15]
 8000a64:	e7ed      	b.n	8000a42 <_ZN22FiltreFenetreGlissante14resultatFiltreEv+0x12>

	}
	resultatFenetre = resultatFenetre/3;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	891b      	ldrh	r3, [r3, #8]
 8000a6a:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <_ZN22FiltreFenetreGlissante14resultatFiltreEv+0x58>)
 8000a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a70:	085b      	lsrs	r3, r3, #1
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	811a      	strh	r2, [r3, #8]

	return resultatFenetre;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	891b      	ldrh	r3, [r3, #8]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	aaaaaaab 	.word	0xaaaaaaab

08000a8c <_ZN22FiltreFenetreGlissanteD1Ev>:

FiltreFenetreGlissante::~FiltreFenetreGlissante() {
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <_ZN22FiltreFenetreGlissanteD1Ev+0x1c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	08002df0 	.word	0x08002df0

08000aac <_ZN22FiltreFenetreGlissanteD0Ev>:
FiltreFenetreGlissante::~FiltreFenetreGlissante() {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
}
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff ffe9 	bl	8000a8c <_ZN22FiltreFenetreGlissanteD1Ev>
 8000aba:	210c      	movs	r1, #12
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f001 ff80 	bl	80029c2 <_ZdlPvj>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_ZN19GestionMouvementAxeC1Ehh>:

#include "GestionMouvementAxe.h"



GestionMouvementAxe::GestionMouvementAxe(uint8_t noMoteur, uint8_t noPot)
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	70fb      	strb	r3, [r7, #3]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	70bb      	strb	r3, [r7, #2]
 8000adc:	4a35      	ldr	r2, [pc, #212]	; (8000bb4 <_ZN19GestionMouvementAxeC1Ehh+0xe8>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]
{

	potentiometre = new PositionAxePotentiometre(noPot);
 8000ae2:	200c      	movs	r0, #12
 8000ae4:	f001 ff6f 	bl	80029c6 <_Znwj>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	461c      	mov	r4, r3
 8000aec:	78bb      	ldrb	r3, [r7, #2]
 8000aee:	4619      	mov	r1, r3
 8000af0:	4620      	mov	r0, r4
 8000af2:	f000 f935 	bl	8000d60 <_ZN24PositionAxePotentiometreC1Eh>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	609c      	str	r4, [r3, #8]

	switch(noMoteur)
 8000afa:	78fb      	ldrb	r3, [r7, #3]
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d036      	beq.n	8000b6e <_ZN19GestionMouvementAxeC1Ehh+0xa2>
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	dc46      	bgt.n	8000b92 <_ZN19GestionMouvementAxeC1Ehh+0xc6>
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d002      	beq.n	8000b0e <_ZN19GestionMouvementAxeC1Ehh+0x42>
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d018      	beq.n	8000b3e <_ZN19GestionMouvementAxeC1Ehh+0x72>
 8000b0c:	e041      	b.n	8000b92 <_ZN19GestionMouvementAxeC1Ehh+0xc6>
	{
	case 0:
		moteur = new controlL297(L297_2);
 8000b0e:	2014      	movs	r0, #20
 8000b10:	f001 ff59 	bl	80029c6 <_Znwj>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461c      	mov	r4, r3
 8000b18:	2101      	movs	r1, #1
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	f000 fedc 	bl	80018d8 <_ZN11controlL297C1E13_L297_SELECT_>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	60dc      	str	r4, [r3, #12]
		moteur->setSpeed(100);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	2164      	movs	r1, #100	; 0x64
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 f818 	bl	8001b60 <_ZN11controlL2978setSpeedEm>
		moteur->setLockState(LOCK);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 f898 	bl	8001c6c <_ZN11controlL29712setLockStateE11_LOCK_STATE>
		break;
 8000b3c:	e029      	b.n	8000b92 <_ZN19GestionMouvementAxeC1Ehh+0xc6>

	case 1:
		moteur = new controlL297(L297_1);
 8000b3e:	2014      	movs	r0, #20
 8000b40:	f001 ff41 	bl	80029c6 <_Znwj>
 8000b44:	4603      	mov	r3, r0
 8000b46:	461c      	mov	r4, r3
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f000 fec4 	bl	80018d8 <_ZN11controlL297C1E13_L297_SELECT_>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	60dc      	str	r4, [r3, #12]
		moteur->setSpeed(100);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	2164      	movs	r1, #100	; 0x64
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 f800 	bl	8001b60 <_ZN11controlL2978setSpeedEm>
		moteur->setLockState(LOCK);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 f880 	bl	8001c6c <_ZN11controlL29712setLockStateE11_LOCK_STATE>
		break;
 8000b6c:	e011      	b.n	8000b92 <_ZN19GestionMouvementAxeC1Ehh+0xc6>

	case 2:
		moteur = new controlL297(L297_3_4);
 8000b6e:	2014      	movs	r0, #20
 8000b70:	f001 ff29 	bl	80029c6 <_Znwj>
 8000b74:	4603      	mov	r3, r0
 8000b76:	461c      	mov	r4, r3
 8000b78:	2102      	movs	r1, #2
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	f000 feac 	bl	80018d8 <_ZN11controlL297C1E13_L297_SELECT_>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	60dc      	str	r4, [r3, #12]
		moteur->setLockState(LOCK);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 f86e 	bl	8001c6c <_ZN11controlL29712setLockStateE11_LOCK_STATE>
		break;
 8000b90:	bf00      	nop
	}
	moteur->setEnable(true);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	2101      	movs	r1, #1
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 f8c7 	bl	8001d2c <_ZN11controlL2979setEnableEb>
	moteur->setDirection(CCW);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fff9 	bl	8001b9c <_ZN11controlL29712setDirectionE11_DIRECTION_>


}
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd90      	pop	{r4, r7, pc}
 8000bb4:	08002e00 	.word	0x08002e00

08000bb8 <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>:
{
	return this->positionEncoPourcentage;
}

uint8_t GestionMouvementAxe::getPositionPotPourcentage()
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	return this->positionPotPourcentage;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	795b      	ldrb	r3, [r3, #5]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>:
}


//gestionMoteur
void GestionMouvementAxe::setMoteurLockState(bool state)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
	switch(state)
 8000bdc:	78fb      	ldrb	r3, [r7, #3]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d006      	beq.n	8000bf0 <_ZN19GestionMouvementAxe18setMoteurLockStateEb+0x20>
	{
	case 0:
		moteur->setLockState(LOCK);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 f83f 	bl	8001c6c <_ZN11controlL29712setLockStateE11_LOCK_STATE>
		break;
 8000bee:	e006      	b.n	8000bfe <_ZN19GestionMouvementAxe18setMoteurLockStateEb+0x2e>

	case 1:
		moteur->setLockState(UNLOCK);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 f838 	bl	8001c6c <_ZN11controlL29712setLockStateE11_LOCK_STATE>
		break;
 8000bfc:	bf00      	nop
	}
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb>:
{
	moteur->setEnable(state);
}

void GestionMouvementAxe::setMoteurDirEtSpeed(uint32_t speed, bool direction)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b084      	sub	sp, #16
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	4613      	mov	r3, r2
 8000c12:	71fb      	strb	r3, [r7, #7]
	if(checkMovementLimit(direction))
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	4619      	mov	r1, r3
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f000 f83b 	bl	8000c94 <_ZN19GestionMouvementAxe18checkMovementLimitEb>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d02d      	beq.n	8000c80 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb+0x7a>
	{
		if(speed < 400)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c2a:	d203      	bcs.n	8000c34 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb+0x2e>
		{
			speed = 400;
 8000c2c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	e007      	b.n	8000c44 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb+0x3e>
		}

		else if(speed > 5000)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d902      	bls.n	8000c44 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb+0x3e>
		{
			speed = 5000;
 8000c3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c42:	60bb      	str	r3, [r7, #8]
		}

		moteur->setSpeed(speed);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 ff88 	bl	8001b60 <_ZN11controlL2978setSpeedEm>

		switch(direction)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d006      	beq.n	8000c64 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb+0x5e>
		{
		case 0:
			moteur->setDirection(CW);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 ff9d 	bl	8001b9c <_ZN11controlL29712setDirectionE11_DIRECTION_>
			break;
 8000c62:	e006      	b.n	8000c72 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb+0x6c>

		case 1:
			moteur->setDirection(CCW);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	2101      	movs	r1, #1
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 ff96 	bl	8001b9c <_ZN11controlL29712setDirectionE11_DIRECTION_>
			break;
 8000c70:	bf00      	nop
		}
		moteur->setLockState(UNLOCK);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	2101      	movs	r1, #1
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 fff7 	bl	8001c6c <_ZN11controlL29712setLockStateE11_LOCK_STATE>

	else
	{
		moteur->setLockState(LOCK);
	}
}
 8000c7e:	e005      	b.n	8000c8c <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb+0x86>
		moteur->setLockState(LOCK);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fff0 	bl	8001c6c <_ZN11controlL29712setLockStateE11_LOCK_STATE>
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <_ZN19GestionMouvementAxe18checkMovementLimitEb>:

bool GestionMouvementAxe::checkMovementLimit(bool directionVoulue)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
	if(directionVoulue == 0 && (potentiometre->getPositionPourcentage() < 1))
 8000ca0:	78fb      	ldrb	r3, [r7, #3]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d109      	bne.n	8000cba <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x26>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f88d 	bl	8000dca <_ZN24PositionAxePotentiometre22getPositionPourcentageEv>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x26>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e000      	b.n	8000cbc <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x28>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x30>
	{
		return 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	e012      	b.n	8000cea <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x56>
	}

	else if(directionVoulue == 1 && (potentiometre->getPositionPourcentage() > 100))
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d109      	bne.n	8000cde <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x4a>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f87b 	bl	8000dca <_ZN24PositionAxePotentiometre22getPositionPourcentageEv>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b64      	cmp	r3, #100	; 0x64
 8000cd8:	d901      	bls.n	8000cde <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x4a>
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e000      	b.n	8000ce0 <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x4c>
 8000cde:	2300      	movs	r3, #0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x54>
	{
		return 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e000      	b.n	8000cea <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x56>
	}

	else
	{
		return 1;
 8000ce8:	2301      	movs	r3, #1
	}

}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <_ZN19GestionMouvementAxe17updatePositionPotEv>:

void GestionMouvementAxe::updatePositionPot()
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
	potentiometre->acquisitionNewPositionAxe();
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f870 	bl	8000de4 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv>
	this->positionPotPourcentage = potentiometre->getPositionPourcentage();
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 f85e 	bl	8000dca <_ZN24PositionAxePotentiometre22getPositionPourcentageEv>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	461a      	mov	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	715a      	strb	r2, [r3, #5]
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <_ZN19GestionMouvementAxeD1Ev>:


GestionMouvementAxe::~GestionMouvementAxe()
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <_ZN19GestionMouvementAxeD1Ev+0x1c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	08002e00 	.word	0x08002e00

08000d40 <_ZN19GestionMouvementAxeD0Ev>:
GestionMouvementAxe::~GestionMouvementAxe()
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
}
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ffe9 	bl	8000d20 <_ZN19GestionMouvementAxeD1Ev>
 8000d4e:	2110      	movs	r1, #16
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f001 fe36 	bl	80029c2 <_ZdlPvj>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <_ZN24PositionAxePotentiometreC1Eh>:
 *      Author: Justin
 */

#include "PositionAxePotentiometre.h"

PositionAxePotentiometre::PositionAxePotentiometre(uint8_t noAxeRobot)
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <_ZN24PositionAxePotentiometreC1Eh+0x48>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	601a      	str	r2, [r3, #0]
{
	adc =  new Adc1Stm32f446re(noAxeRobot);
 8000d72:	20b0      	movs	r0, #176	; 0xb0
 8000d74:	f001 fe27 	bl	80029c6 <_Znwj>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461c      	mov	r4, r3
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4620      	mov	r0, r4
 8000d82:	f7ff fa47 	bl	8000214 <_ZN15Adc1Stm32f446reC1Eh>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	605c      	str	r4, [r3, #4]
	positionAxePourcentage = 0;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	721a      	strb	r2, [r3, #8]

	rawPosition = 0;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	729a      	strb	r2, [r3, #10]


	this->noAxeRobot = noAxeRobot;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	78fa      	ldrb	r2, [r7, #3]
 8000d9a:	725a      	strb	r2, [r3, #9]
	//rawPosition = 1;
}
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd90      	pop	{r4, r7, pc}
 8000da6:	bf00      	nop
 8000da8:	08002e10 	.word	0x08002e10

08000dac <_ZN24PositionAxePotentiometre22setPositionPourcentageEh>:

void PositionAxePotentiometre::setPositionPourcentage(uint8_t positionPourcentage)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	70fb      	strb	r3, [r7, #3]
	this->positionAxePourcentage = positionPourcentage;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	78fa      	ldrb	r2, [r7, #3]
 8000dbc:	721a      	strb	r2, [r3, #8]
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <_ZN24PositionAxePotentiometre22getPositionPourcentageEv>:

uint8_t PositionAxePotentiometre::getPositionPourcentage()
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
	return this->positionAxePourcentage;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7a1b      	ldrb	r3, [r3, #8]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv>:

void PositionAxePotentiometre::acquisitionNewPositionAxe()
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	adc->startAdcConversion();
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fd61 	bl	80008b8 <_ZN15Adc1Stm32f446re18startAdcConversionEv>
	if(adc->waitEocFlag())
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fd7c 	bl	80008f8 <_ZN15Adc1Stm32f446re11waitEocFlagEv>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	bf14      	ite	ne
 8000e06:	2301      	movne	r3, #1
 8000e08:	2300      	moveq	r3, #0
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d06b      	beq.n	8000ee8 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0x104>
	{
		rawPosition = adc->getConversion();
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fd1f 	bl	8000858 <_ZN15Adc1Stm32f446re13getConversionEv>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	729a      	strb	r2, [r3, #10]
		switch(noAxeRobot)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7a5b      	ldrb	r3, [r3, #9]
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	d035      	beq.n	8000e96 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0xb2>
 8000e2a:	2b05      	cmp	r3, #5
 8000e2c:	dc4a      	bgt.n	8000ec4 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0xe0>
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d002      	beq.n	8000e38 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0x54>
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	d017      	beq.n	8000e66 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0x82>
 8000e36:	e045      	b.n	8000ec4 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0xe0>
		{


		case 3:

			if(rawPosition < POSITION_MIN_COUDE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7a9b      	ldrb	r3, [r3, #10]
 8000e3c:	2b8d      	cmp	r3, #141	; 0x8d
 8000e3e:	d802      	bhi.n	8000e46 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0x62>
			{
				rawPosition = POSITION_MIN_COUDE;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	228e      	movs	r2, #142	; 0x8e
 8000e44:	729a      	strb	r2, [r3, #10]
			}
			positionAxePourcentage = (100 * (rawPosition - POSITION_MIN_COUDE))/ (POSITION_MAX_COUDE - POSITION_MIN_COUDE);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7a9b      	ldrb	r3, [r3, #10]
 8000e4a:	3b8e      	subs	r3, #142	; 0x8e
 8000e4c:	2264      	movs	r2, #100	; 0x64
 8000e4e:	fb02 f303 	mul.w	r3, r2, r3
 8000e52:	4a27      	ldr	r2, [pc, #156]	; (8000ef0 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0x10c>)
 8000e54:	fb82 1203 	smull	r1, r2, r2, r3
 8000e58:	1152      	asrs	r2, r2, #5
 8000e5a:	17db      	asrs	r3, r3, #31
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	721a      	strb	r2, [r3, #8]
			break;
 8000e64:	e02e      	b.n	8000ec4 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0xe0>


		case 4:

			if(rawPosition < POSITION_MIN_EPAULE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7a9b      	ldrb	r3, [r3, #10]
 8000e6a:	2b81      	cmp	r3, #129	; 0x81
 8000e6c:	d802      	bhi.n	8000e74 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0x90>
			{
				rawPosition = POSITION_MIN_EPAULE;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2282      	movs	r2, #130	; 0x82
 8000e72:	729a      	strb	r2, [r3, #10]
			}
			positionAxePourcentage = (100 * (rawPosition - POSITION_MIN_EPAULE))/ (POSITION_MAX_EPAULE - POSITION_MIN_EPAULE);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7a9b      	ldrb	r3, [r3, #10]
 8000e78:	3b82      	subs	r3, #130	; 0x82
 8000e7a:	2264      	movs	r2, #100	; 0x64
 8000e7c:	fb02 f303 	mul.w	r3, r2, r3
 8000e80:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0x110>)
 8000e82:	fb82 1203 	smull	r1, r2, r2, r3
 8000e86:	441a      	add	r2, r3
 8000e88:	1112      	asrs	r2, r2, #4
 8000e8a:	17db      	asrs	r3, r3, #31
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	721a      	strb	r2, [r3, #8]
			break;
 8000e94:	e016      	b.n	8000ec4 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0xe0>

		case 5:
			if(rawPosition < POSITION_MIN_PINCE)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7a9b      	ldrb	r3, [r3, #10]
 8000e9a:	2bb9      	cmp	r3, #185	; 0xb9
 8000e9c:	d802      	bhi.n	8000ea4 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0xc0>
			{
				rawPosition = POSITION_MIN_PINCE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	22ba      	movs	r2, #186	; 0xba
 8000ea2:	729a      	strb	r2, [r3, #10]
			}

			positionAxePourcentage = (100 * (rawPosition - POSITION_MIN_PINCE))/ (POSITION_MAX_PINCE - POSITION_MIN_PINCE);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7a9b      	ldrb	r3, [r3, #10]
 8000ea8:	3bba      	subs	r3, #186	; 0xba
 8000eaa:	2264      	movs	r2, #100	; 0x64
 8000eac:	fb02 f303 	mul.w	r3, r2, r3
 8000eb0:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0x114>)
 8000eb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb6:	1152      	asrs	r2, r2, #5
 8000eb8:	17db      	asrs	r3, r3, #31
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	721a      	strb	r2, [r3, #8]
			break;
 8000ec2:	bf00      	nop
		}

		if(positionAxePourcentage > 100)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7a1b      	ldrb	r3, [r3, #8]
 8000ec8:	2b64      	cmp	r3, #100	; 0x64
 8000eca:	d902      	bls.n	8000ed2 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0xee>
		{
			positionAxePourcentage = 100;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2264      	movs	r2, #100	; 0x64
 8000ed0:	721a      	strb	r2, [r3, #8]
		}
		setPositionPourcentage(positionAxePourcentage);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	7a1b      	ldrb	r3, [r3, #8]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff67 	bl	8000dac <_ZN24PositionAxePotentiometre22setPositionPourcentageEh>
		adc->clearEocFlag();
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fd30 	bl	8000948 <_ZN15Adc1Stm32f446re12clearEocFlagEv>
	}

}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	63e7063f 	.word	0x63e7063f
 8000ef4:	b21642c9 	.word	0xb21642c9
 8000ef8:	76b981db 	.word	0x76b981db

08000efc <_ZN24PositionAxePotentiometreD1Ev>:
{
	return this->rawPosition;
}


PositionAxePotentiometre::~PositionAxePotentiometre()
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <_ZN24PositionAxePotentiometreD1Ev+0x1c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	08002e10 	.word	0x08002e10

08000f1c <_ZN24PositionAxePotentiometreD0Ev>:
PositionAxePotentiometre::~PositionAxePotentiometre()
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
}
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ffe9 	bl	8000efc <_ZN24PositionAxePotentiometreD1Ev>
 8000f2a:	210c      	movs	r1, #12
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f001 fd48 	bl	80029c2 <_ZdlPvj>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	f003 021f 	and.w	r2, r3, #31
 8000f4e:	4907      	ldr	r1, [pc, #28]	; (8000f6c <NVIC_EnableIRQ+0x30>)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	095b      	lsrs	r3, r3, #5
 8000f56:	2001      	movs	r0, #1
 8000f58:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	da0c      	bge.n	8000f9e <NVIC_SetPriority+0x2e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490d      	ldr	r1, [pc, #52]	; (8000fc0 <NVIC_SetPriority+0x50>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e009      	b.n	8000fb2 <NVIC_SetPriority+0x42>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	; (8000fc4 <NVIC_SetPriority+0x54>)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <_ZN15STM32F446Usart3C1Ev>:
#include "STM32F446Usart.h"

STM32F446Usart3* STM32F446Usart3::instance =0;


STM32F446Usart3::STM32F446Usart3()
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	4a38      	ldr	r2, [pc, #224]	; (80010b4 <_ZN15STM32F446Usart3C1Ev+0xec>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3308      	adds	r3, #8
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f9b4 	bl	8001348 <_ZN8BuffFifoImLt64EEC1Ev>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f9ae 	bl	8001348 <_ZN8BuffFifoImLt64EEC1Ev>
{
	config = new hardwareConfig();
 8000fec:	2004      	movs	r0, #4
 8000fee:	f001 fcea 	bl	80029c6 <_Znwj>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461c      	mov	r4, r3
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f000 feba 	bl	8001d70 <_ZN14hardwareConfigC1Ev>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218
	//active la clk du gpio B et du usart 3
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;//(1<<18)
 8001002:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <_ZN15STM32F446Usart3C1Ev+0xf0>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a2c      	ldr	r2, [pc, #176]	; (80010b8 <_ZN15STM32F446Usart3C1Ev+0xf0>)
 8001008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <_ZN15STM32F446Usart3C1Ev+0xf0>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <_ZN15STM32F446Usart3C1Ev+0xf0>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6413      	str	r3, [r2, #64]	; 0x40


	//mode alternatif pour pb10 et 11
	config->GPIO_Config(GPIOC, 10, ALTERNATE, 7);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
 8001020:	2307      	movs	r3, #7
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2302      	movs	r3, #2
 8001026:	220a      	movs	r2, #10
 8001028:	4924      	ldr	r1, [pc, #144]	; (80010bc <_ZN15STM32F446Usart3C1Ev+0xf4>)
 800102a:	f000 ff3f 	bl	8001eac <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
	config->GPIO_Config(GPIOC, 5 , ALTERNATE, 7);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
 8001034:	2307      	movs	r3, #7
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2302      	movs	r3, #2
 800103a:	2205      	movs	r2, #5
 800103c:	491f      	ldr	r1, [pc, #124]	; (80010bc <_ZN15STM32F446Usart3C1Ev+0xf4>)
 800103e:	f000 ff35 	bl	8001eac <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
	GPIOC->AFR[0] |= (7<<8); // registre af7 fction alternative USART3
 8001042:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	4a1d      	ldr	r2, [pc, #116]	; (80010bc <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8001048:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800104c:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[1] |= (7<<12);
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	4a1a      	ldr	r2, [pc, #104]	; (80010bc <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8001054:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001058:	6253      	str	r3, [r2, #36]	; 0x24

	//sélection du baud 8N1 @9600
	USART3->CR1 &= ~USART_CR1_UE;// usart disable
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <_ZN15STM32F446Usart3C1Ev+0xf8>)
 800105c:	899b      	ldrh	r3, [r3, #12]
 800105e:	b29b      	uxth	r3, r3
 8001060:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <_ZN15STM32F446Usart3C1Ev+0xf8>)
 8001062:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001066:	b29b      	uxth	r3, r3
 8001068:	8193      	strh	r3, [r2, #12]
	NVIC_EnableIRQ(USART3_IRQn);
 800106a:	2027      	movs	r0, #39	; 0x27
 800106c:	f7ff ff66 	bl	8000f3c <NVIC_EnableIRQ>
	NVIC_SetPriority(USART3_IRQn,4);
 8001070:	2104      	movs	r1, #4
 8001072:	2027      	movs	r0, #39	; 0x27
 8001074:	f7ff ff7c 	bl	8000f70 <NVIC_SetPriority>
	//active le tx et rx + les interruptions dee chaqu'un
	USART3->CR1 |=  USART_CR1_TE | USART_CR1_RE |  USART_CR1_RXNEIE | USART_CR1_TXEIE;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <_ZN15STM32F446Usart3C1Ev+0xf8>)
 800107a:	899b      	ldrh	r3, [r3, #12]
 800107c:	b29b      	uxth	r3, r3
 800107e:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <_ZN15STM32F446Usart3C1Ev+0xf8>)
 8001080:	f043 03ac 	orr.w	r3, r3, #172	; 0xac
 8001084:	b29b      	uxth	r3, r3
 8001086:	8193      	strh	r3, [r2, #12]
	setBaudRate(9600);
 8001088:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 f8bf 	bl	8001210 <_ZN15STM32F446Usart311setBaudRateEm>
	USART3->CR1 |= USART_CR1_UE; //usart enable
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <_ZN15STM32F446Usart3C1Ev+0xf8>)
 8001094:	899b      	ldrh	r3, [r3, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	4a09      	ldr	r2, [pc, #36]	; (80010c0 <_ZN15STM32F446Usart3C1Ev+0xf8>)
 800109a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800109e:	b29b      	uxth	r3, r3
 80010a0:	8193      	strh	r3, [r2, #12]


	isTransmitting = false;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	711a      	strb	r2, [r3, #4]
}
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd90      	pop	{r4, r7, pc}
 80010b2:	bf00      	nop
 80010b4:	08002e20 	.word	0x08002e20
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020800 	.word	0x40020800
 80010c0:	40004800 	.word	0x40004800

080010c4 <_ZN15STM32F446Usart3D1Ev>:

STM32F446Usart3::~STM32F446Usart3()
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	4a11      	ldr	r2, [pc, #68]	; (8001114 <_ZN15STM32F446Usart3D1Ev+0x50>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	601a      	str	r2, [r3, #0]
{
	if (instance)
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <_ZN15STM32F446Usart3D1Ev+0x54>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d008      	beq.n	80010ec <_ZN15STM32F446Usart3D1Ev+0x28>
		delete instance;
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <_ZN15STM32F446Usart3D1Ev+0x54>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d004      	beq.n	80010ec <_ZN15STM32F446Usart3D1Ev+0x28>
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	3204      	adds	r2, #4
 80010e6:	6812      	ldr	r2, [r2, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	4790      	blx	r2
	if(config)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d009      	beq.n	800110a <_ZN15STM32F446Usart3D1Ev+0x46>
		delete config;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <_ZN15STM32F446Usart3D1Ev+0x46>
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	3204      	adds	r2, #4
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	4790      	blx	r2
}
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	08002e20 	.word	0x08002e20
 8001118:	200000b0 	.word	0x200000b0

0800111c <_ZN15STM32F446Usart3D0Ev>:
STM32F446Usart3::~STM32F446Usart3()
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
}
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ffcd 	bl	80010c4 <_ZN15STM32F446Usart3D1Ev>
 800112a:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f001 fc47 	bl	80029c2 <_ZdlPvj>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <_ZN15STM32F446Usart311getInstanceEv>:
STM32F446Usart3 * STM32F446Usart3::getInstance()
{
 8001140:	b598      	push	{r3, r4, r7, lr}
 8001142:	af00      	add	r7, sp, #0
	if(instance==0)
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <_ZN15STM32F446Usart311getInstanceEv+0x2c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10a      	bne.n	8001162 <_ZN15STM32F446Usart311getInstanceEv+0x22>
		instance=new STM32F446Usart3();
 800114c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8001150:	f001 fc39 	bl	80029c6 <_Znwj>
 8001154:	4603      	mov	r3, r0
 8001156:	461c      	mov	r4, r3
 8001158:	4620      	mov	r0, r4
 800115a:	f7ff ff35 	bl	8000fc8 <_ZN15STM32F446Usart3C1Ev>
 800115e:	4b03      	ldr	r3, [pc, #12]	; (800116c <_ZN15STM32F446Usart311getInstanceEv+0x2c>)
 8001160:	601c      	str	r4, [r3, #0]
	return instance;
 8001162:	4b02      	ldr	r3, [pc, #8]	; (800116c <_ZN15STM32F446Usart311getInstanceEv+0x2c>)
 8001164:	681b      	ldr	r3, [r3, #0]
}
 8001166:	4618      	mov	r0, r3
 8001168:	bd98      	pop	{r3, r4, r7, pc}
 800116a:	bf00      	nop
 800116c:	200000b0 	.word	0x200000b0

08001170 <_ZN15STM32F446Usart35writeEh>:
void STM32F446Usart3::write(uint8_t data)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	70fb      	strb	r3, [r7, #3]
	buffTx.add(data);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001182:	78fa      	ldrb	r2, [r7, #3]
 8001184:	4611      	mov	r1, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f8ea 	bl	8001360 <_ZN8BuffFifoImLt64EE3addEm>
	if(!isTransmitting)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	791b      	ldrb	r3, [r3, #4]
 8001190:	f083 0301 	eor.w	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00a      	beq.n	80011b0 <_ZN15STM32F446Usart35writeEh+0x40>
	{
		isTransmitting =true;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	711a      	strb	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_TXEIE;
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <_ZN15STM32F446Usart35writeEh+0x48>)
 80011a2:	899b      	ldrh	r3, [r3, #12]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <_ZN15STM32F446Usart35writeEh+0x48>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	8193      	strh	r3, [r2, #12]
	}
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40004800 	.word	0x40004800

080011bc <_ZN15STM32F446Usart34readEv>:
		{
			write(*string++);
		}
}
uint8_t STM32F446Usart3:: read(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	if(buffRx.isEmpty())
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3308      	adds	r3, #8
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f8ea 	bl	80013a2 <_ZNK8BuffFifoImLt64EE7isEmptyEv>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <_ZN15STM32F446Usart34readEv+0x1c>
		return 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	e006      	b.n	80011e6 <_ZN15STM32F446Usart34readEv+0x2a>
	return buffRx.rem();
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3308      	adds	r3, #8
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 f8f3 	bl	80013c8 <_ZN8BuffFifoImLt64EE3remEv>
 80011e2:	4603      	mov	r3, r0
 80011e4:	b2db      	uxtb	r3, r3
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <_ZNK15STM32F446Usart313dataAvailableEv>:
bool STM32F446Usart3::dataAvailable() const
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
	return !buffRx.isEmpty();
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3308      	adds	r3, #8
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f8d1 	bl	80013a2 <_ZNK8BuffFifoImLt64EE7isEmptyEv>
 8001200:	4603      	mov	r3, r0
 8001202:	f083 0301 	eor.w	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_ZN15STM32F446Usart311setBaudRateEm>:
void STM32F446Usart3::setBaudRate(uint32_t baudrate)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
	if(baudrate > 2810000)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <_ZN15STM32F446Usart311setBaudRateEm+0x60>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d90a      	bls.n	8001238 <_ZN15STM32F446Usart311setBaudRateEm+0x28>
		USART3->CR1 |= USART_CR1_OVER8;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 8001224:	899b      	ldrh	r3, [r3, #12]
 8001226:	b29b      	uxth	r3, r3
 8001228:	4a12      	ldr	r2, [pc, #72]	; (8001274 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 800122a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800122e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001232:	b29b      	uxth	r3, r3
 8001234:	8193      	strh	r3, [r2, #12]
 8001236:	e007      	b.n	8001248 <_ZN15STM32F446Usart311setBaudRateEm+0x38>
	else
		USART3->CR1 &= ~USART_CR1_OVER8;
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 800123a:	899b      	ldrh	r3, [r3, #12]
 800123c:	b29b      	uxth	r3, r3
 800123e:	4a0d      	ldr	r2, [pc, #52]	; (8001274 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 8001240:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001244:	b29b      	uxth	r3, r3
 8001246:	8193      	strh	r3, [r2, #12]

	USART3->BRR |= (SystemCoreClock>>2) / baudrate;
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 800124a:	891b      	ldrh	r3, [r3, #8]
 800124c:	b29a      	uxth	r2, r3
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <_ZN15STM32F446Usart311setBaudRateEm+0x68>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	0899      	lsrs	r1, r3, #2
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	fbb1 f3f3 	udiv	r3, r1, r3
 800125a:	b29b      	uxth	r3, r3
 800125c:	4905      	ldr	r1, [pc, #20]	; (8001274 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 800125e:	4313      	orrs	r3, r2
 8001260:	b29b      	uxth	r3, r3
 8001262:	810b      	strh	r3, [r1, #8]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	002ae090 	.word	0x002ae090
 8001274:	40004800 	.word	0x40004800
 8001278:	2000001c 	.word	0x2000001c

0800127c <USART3_IRQHandler>:

extern "C"
{
void USART3_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
	volatile unsigned int usartStatus;
	char tmp;
	//recupere le statu de l'usart
	usartStatus = USART3->SR;
 8001282:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <USART3_IRQHandler+0xc4>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	b29b      	uxth	r3, r3
 8001288:	603b      	str	r3, [r7, #0]

	if(usartStatus & USART_SR_RXNE)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	f003 0320 	and.w	r3, r3, #32
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf14      	ite	ne
 8001294:	2301      	movne	r3, #1
 8001296:	2300      	moveq	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d013      	beq.n	80012c6 <USART3_IRQHandler+0x4a>
	{
		USART3->SR &= ~USART_SR_RXNE;
 800129e:	4b28      	ldr	r3, [pc, #160]	; (8001340 <USART3_IRQHandler+0xc4>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	4a26      	ldr	r2, [pc, #152]	; (8001340 <USART3_IRQHandler+0xc4>)
 80012a6:	f023 0320 	bic.w	r3, r3, #32
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	8013      	strh	r3, [r2, #0]
		tmp =USART3->DR;
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <USART3_IRQHandler+0xc4>)
 80012b0:	889b      	ldrh	r3, [r3, #4]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	71fb      	strb	r3, [r7, #7]
		STM32F446Usart3::instance->buffRx.add(tmp);
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <USART3_IRQHandler+0xc8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3308      	adds	r3, #8
 80012bc:	79fa      	ldrb	r2, [r7, #7]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f84d 	bl	8001360 <_ZN8BuffFifoImLt64EE3addEm>
	}
	if(usartStatus & USART_SR_TXE)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf14      	ite	ne
 80012d0:	2301      	movne	r3, #1
 80012d2:	2300      	moveq	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d02d      	beq.n	8001336 <USART3_IRQHandler+0xba>
	{
		USART3->SR &= ~USART_CR1_TXEIE;
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <USART3_IRQHandler+0xc4>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	4a17      	ldr	r2, [pc, #92]	; (8001340 <USART3_IRQHandler+0xc4>)
 80012e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	8013      	strh	r3, [r2, #0]
		if(STM32F446Usart3::instance->buffTx.isEmpty())
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <USART3_IRQHandler+0xc8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f855 	bl	80013a2 <_ZNK8BuffFifoImLt64EE7isEmptyEv>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00c      	beq.n	8001318 <USART3_IRQHandler+0x9c>
		{
			STM32F446Usart3::instance->isTransmitting =false;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <USART3_IRQHandler+0xc8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2200      	movs	r2, #0
 8001304:	711a      	strb	r2, [r3, #4]
			USART3->CR1 &= (~USART_CR1_TXEIE);
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <USART3_IRQHandler+0xc4>)
 8001308:	899b      	ldrh	r3, [r3, #12]
 800130a:	b29b      	uxth	r3, r3
 800130c:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <USART3_IRQHandler+0xc4>)
 800130e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001312:	b29b      	uxth	r3, r3
 8001314:	8193      	strh	r3, [r2, #12]

			USART3->DR = STM32F446Usart3::instance->buffTx.rem();
			STM32F446Usart3::instance->isTransmitting= true;
		}
	}
}
 8001316:	e00e      	b.n	8001336 <USART3_IRQHandler+0xba>
			USART3->DR = STM32F446Usart3::instance->buffTx.rem();
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <USART3_IRQHandler+0xc8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001320:	4618      	mov	r0, r3
 8001322:	f000 f851 	bl	80013c8 <_ZN8BuffFifoImLt64EE3remEv>
 8001326:	4602      	mov	r2, r0
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <USART3_IRQHandler+0xc4>)
 800132a:	b292      	uxth	r2, r2
 800132c:	809a      	strh	r2, [r3, #4]
			STM32F446Usart3::instance->isTransmitting= true;
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <USART3_IRQHandler+0xc8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2201      	movs	r2, #1
 8001334:	711a      	strb	r2, [r3, #4]
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40004800 	.word	0x40004800
 8001344:	200000b0 	.word	0x200000b0

08001348 <_ZN8BuffFifoImLt64EEC1Ev>:
#include <stdlib.h>
template <class T, uint16_t nSize>
class BuffFifo {
public:

	BuffFifo()
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	{
        reset();
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 f858 	bl	8001406 <_ZN8BuffFifoImLt64EE5resetEv>
    }
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <_ZN8BuffFifoImLt64EE3addEm>:
    {
        in = 0;
        out = 0;
    }

    bool add(T e)
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
    {
        if( (in + 1) != out )
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	d00d      	beq.n	8001394 <_ZN8BuffFifoImLt64EE3addEm+0x34>
        {
            data[in++ & (nSize-1)] = e;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	1c59      	adds	r1, r3, #1
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	6011      	str	r1, [r2, #0]
 8001382:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3202      	adds	r2, #2
 800138a:	6839      	ldr	r1, [r7, #0]
 800138c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            return 1;
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <_ZN8BuffFifoImLt64EE3addEm+0x36>
        }
        return 0;
 8001394:	2300      	movs	r3, #0
    }
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <_ZNK8BuffFifoImLt64EE7isEmptyEv>:
            return data[out++ & (nSize-1)] ;
        }
        return data[0];
    }

    bool isEmpty() const{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
        return (out == in);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	bf0c      	ite	eq
 80013b6:	2301      	moveq	r3, #1
 80013b8:	2300      	movne	r3, #0
 80013ba:	b2db      	uxtb	r3, r3
    }
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <_ZN8BuffFifoImLt64EE3remEv>:
    T rem(){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
        if (!isEmpty())
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ffe6 	bl	80013a2 <_ZNK8BuffFifoImLt64EE7isEmptyEv>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f083 0301 	eor.w	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <_ZN8BuffFifoImLt64EE3remEv+0x32>
            return data[out++ & (nSize-1)] ;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	1c59      	adds	r1, r3, #1
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6051      	str	r1, [r2, #4]
 80013ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3202      	adds	r2, #2
 80013f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f8:	e001      	b.n	80013fe <_ZN8BuffFifoImLt64EE3remEv+0x36>
        return data[0];
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
    }
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_ZN8BuffFifoImLt64EE5resetEv>:
    void reset()
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
        in = 0;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
        out = 0;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
    }
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <NVIC_EnableIRQ>:
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	f003 021f 	and.w	r2, r3, #31
 800143a:	4907      	ldr	r1, [pc, #28]	; (8001458 <NVIC_EnableIRQ+0x30>)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	095b      	lsrs	r3, r3, #5
 8001442:	2001      	movs	r0, #1
 8001444:	fa00 f202 	lsl.w	r2, r0, r2
 8001448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100

0800145c <NVIC_SetPriority>:
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	da0c      	bge.n	800148a <NVIC_SetPriority+0x2e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490d      	ldr	r1, [pc, #52]	; (80014ac <NVIC_SetPriority+0x50>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	e009      	b.n	800149e <NVIC_SetPriority+0x42>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <NVIC_SetPriority+0x54>)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <_ZN5TimerD1Ev>:
	 */
	Timer(TIM_TypeDef * tmr, uint32_t us,bool interruptEnable);
	/*
	 * Destructeur
	 */
	virtual ~Timer(){};
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <_ZN5TimerD1Ev+0x1c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	08002e6c 	.word	0x08002e6c

080014d4 <_ZN5TimerD0Ev>:
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ffe9 	bl	80014b4 <_ZN5TimerD1Ev>
 80014e2:	2108      	movs	r1, #8
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f001 fa6c 	bl	80029c2 <_ZdlPvj>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <_ZN5TimerC1EP11TIM_TypeDefmb>:
 *      Author: Tristan Franc
 */

#include "Timer_PWM.h"

Timer::Timer(TIM_TypeDef * tmr, uint32_t us,bool interruptEnable)
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	70fb      	strb	r3, [r7, #3]
 8001502:	4a4c      	ldr	r2, [pc, #304]	; (8001634 <_ZN5TimerC1EP11TIM_TypeDefmb+0x140>)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	601a      	str	r2, [r3, #0]
{
	timer = tmr;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	605a      	str	r2, [r3, #4]
	if(tmr== TIM1)
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	4a49      	ldr	r2, [pc, #292]	; (8001638 <_ZN5TimerC1EP11TIM_TypeDefmb+0x144>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d10f      	bne.n	8001536 <_ZN5TimerC1EP11TIM_TypeDefmb+0x42>
	{
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001516:	4b49      	ldr	r3, [pc, #292]	; (800163c <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a48      	ldr	r2, [pc, #288]	; (800163c <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
		if(interruptEnable)
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d006      	beq.n	8001536 <_ZN5TimerC1EP11TIM_TypeDefmb+0x42>
		{
			NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001528:	201b      	movs	r0, #27
 800152a:	f7ff ff7d 	bl	8001428 <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM1_CC_IRQn, 2);
 800152e:	2102      	movs	r1, #2
 8001530:	201b      	movs	r0, #27
 8001532:	f7ff ff93 	bl	800145c <NVIC_SetPriority>
		}
	}
	if ( tmr == TIM2)
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800153c:	d10f      	bne.n	800155e <_ZN5TimerC1EP11TIM_TypeDefmb+0x6a>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800153e:	4b3f      	ldr	r3, [pc, #252]	; (800163c <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a3e      	ldr	r2, [pc, #248]	; (800163c <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
		if(interruptEnable)
 800154a:	78fb      	ldrb	r3, [r7, #3]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d006      	beq.n	800155e <_ZN5TimerC1EP11TIM_TypeDefmb+0x6a>
		{
			NVIC_EnableIRQ(TIM2_IRQn);
 8001550:	201c      	movs	r0, #28
 8001552:	f7ff ff69 	bl	8001428 <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM2_IRQn,1);
 8001556:	2101      	movs	r1, #1
 8001558:	201c      	movs	r0, #28
 800155a:	f7ff ff7f 	bl	800145c <NVIC_SetPriority>
		}
	}
	if ( tmr == TIM3)
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	4a37      	ldr	r2, [pc, #220]	; (8001640 <_ZN5TimerC1EP11TIM_TypeDefmb+0x14c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d10f      	bne.n	8001586 <_ZN5TimerC1EP11TIM_TypeDefmb+0x92>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001566:	4b35      	ldr	r3, [pc, #212]	; (800163c <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a34      	ldr	r2, [pc, #208]	; (800163c <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
		if(interruptEnable)
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d006      	beq.n	8001586 <_ZN5TimerC1EP11TIM_TypeDefmb+0x92>
		{
			NVIC_EnableIRQ(TIM3_IRQn);
 8001578:	201d      	movs	r0, #29
 800157a:	f7ff ff55 	bl	8001428 <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM3_IRQn,1);
 800157e:	2101      	movs	r1, #1
 8001580:	201d      	movs	r0, #29
 8001582:	f7ff ff6b 	bl	800145c <NVIC_SetPriority>
		}
	}
	if ( tmr == TIM4)
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	4a2e      	ldr	r2, [pc, #184]	; (8001644 <_ZN5TimerC1EP11TIM_TypeDefmb+0x150>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d10f      	bne.n	80015ae <_ZN5TimerC1EP11TIM_TypeDefmb+0xba>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800158e:	4b2b      	ldr	r3, [pc, #172]	; (800163c <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a2a      	ldr	r2, [pc, #168]	; (800163c <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
		if(interruptEnable)
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d006      	beq.n	80015ae <_ZN5TimerC1EP11TIM_TypeDefmb+0xba>
		{
			NVIC_EnableIRQ(TIM4_IRQn);
 80015a0:	201e      	movs	r0, #30
 80015a2:	f7ff ff41 	bl	8001428 <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM4_IRQn,0);
 80015a6:	2100      	movs	r1, #0
 80015a8:	201e      	movs	r0, #30
 80015aa:	f7ff ff57 	bl	800145c <NVIC_SetPriority>
		}

	}
	if ( tmr == TIM5)
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	4a25      	ldr	r2, [pc, #148]	; (8001648 <_ZN5TimerC1EP11TIM_TypeDefmb+0x154>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d10f      	bne.n	80015d6 <_ZN5TimerC1EP11TIM_TypeDefmb+0xe2>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a20      	ldr	r2, [pc, #128]	; (800163c <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
		if(interruptEnable)
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <_ZN5TimerC1EP11TIM_TypeDefmb+0xe2>
		{
			NVIC_EnableIRQ(TIM5_IRQn);
 80015c8:	2032      	movs	r0, #50	; 0x32
 80015ca:	f7ff ff2d 	bl	8001428 <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM5_IRQn,2);
 80015ce:	2102      	movs	r1, #2
 80015d0:	2032      	movs	r0, #50	; 0x32
 80015d2:	f7ff ff43 	bl	800145c <NVIC_SetPriority>
		}
	}
	if (tmr == TIM7)
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	4a1c      	ldr	r2, [pc, #112]	; (800164c <_ZN5TimerC1EP11TIM_TypeDefmb+0x158>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d10f      	bne.n	80015fe <_ZN5TimerC1EP11TIM_TypeDefmb+0x10a>
	    {
	        RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a16      	ldr	r2, [pc, #88]	; (800163c <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 80015e4:	f043 0320 	orr.w	r3, r3, #32
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
	        if(interruptEnable)
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d006      	beq.n	80015fe <_ZN5TimerC1EP11TIM_TypeDefmb+0x10a>
	        {
	            NVIC_EnableIRQ(TIM7_IRQn);
 80015f0:	2037      	movs	r0, #55	; 0x37
 80015f2:	f7ff ff19 	bl	8001428 <NVIC_EnableIRQ>
	            NVIC_SetPriority(TIM7_IRQn,2);
 80015f6:	2102      	movs	r1, #2
 80015f8:	2037      	movs	r0, #55	; 0x37
 80015fa:	f7ff ff2f 	bl	800145c <NVIC_SetPriority>
	        }
	    }
	setPeriod(us);
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 f825 	bl	8001650 <_ZN5Timer9setPeriodEm>
	if(interruptEnable)
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>
		timer->DIER = TIM_DIER_UIE;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	819a      	strh	r2, [r3, #12]
	timer->CR1 |= TIM_CR1_ARPE;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	b29a      	uxth	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001624:	b292      	uxth	r2, r2
 8001626:	801a      	strh	r2, [r3, #0]
}
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	08002e6c 	.word	0x08002e6c
 8001638:	40010000 	.word	0x40010000
 800163c:	40023800 	.word	0x40023800
 8001640:	40000400 	.word	0x40000400
 8001644:	40000800 	.word	0x40000800
 8001648:	40000c00 	.word	0x40000c00
 800164c:	40001400 	.word	0x40001400

08001650 <_ZN5Timer9setPeriodEm>:

void Timer::setPeriod(uint32_t us)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
	uint32_t divFactor = 2000000;
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <_ZN5Timer9setPeriodEm+0x68>)
 800165c:	60fb      	str	r3, [r7, #12]
	uint32_t reload = us - 1;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	3b01      	subs	r3, #1
 8001662:	60bb      	str	r3, [r7, #8]

	if ( us > 10000)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	f242 7210 	movw	r2, #10000	; 0x2710
 800166a:	4293      	cmp	r3, r2
 800166c:	d909      	bls.n	8001682 <_ZN5Timer9setPeriodEm+0x32>
	{
		reload = us / 100 - 1;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	4a12      	ldr	r2, [pc, #72]	; (80016bc <_ZN5Timer9setPeriodEm+0x6c>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	3b01      	subs	r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
		divFactor = 20000;
 800167c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001680:	60fb      	str	r3, [r7, #12]
	}

	if(reload < 1)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <_ZN5Timer9setPeriodEm+0x3c>
		reload = 1;
 8001688:	2301      	movs	r3, #1
 800168a:	60bb      	str	r3, [r7, #8]

	stop();
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f90f 	bl	80018b0 <_ZN5Timer4stopEv>
	timer->PSC = SystemCoreClock / divFactor - 1;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <_ZN5Timer9setPeriodEm+0x70>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	fbb2 f3f3 	udiv	r3, r2, r3
 800169c:	b29a      	uxth	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	3a01      	subs	r2, #1
 80016a4:	b292      	uxth	r2, r2
 80016a6:	851a      	strh	r2, [r3, #40]	; 0x28
	timer->ARR = reload;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c

}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	001e8480 	.word	0x001e8480
 80016bc:	51eb851f 	.word	0x51eb851f
 80016c0:	2000001c 	.word	0x2000001c

080016c4 <_ZN5Timer9enablePWMEhmt>:
void Timer::enablePWM(uint8_t ch, uint32_t freq, uint16_t range)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	461a      	mov	r2, r3
 80016d0:	460b      	mov	r3, r1
 80016d2:	72fb      	strb	r3, [r7, #11]
 80016d4:	4613      	mov	r3, r2
 80016d6:	813b      	strh	r3, [r7, #8]
	timer->CR1 |= TIM_CR1_DIR;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f042 0210 	orr.w	r2, r2, #16
 80016e8:	b292      	uxth	r2, r2
 80016ea:	801a      	strh	r2, [r3, #0]
	if((range+1) * freq * 2 > SystemCoreClock)
 80016ec:	893b      	ldrh	r3, [r7, #8]
 80016ee:	3301      	adds	r3, #1
 80016f0:	461a      	mov	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	fb03 f302 	mul.w	r3, r3, r2
 80016f8:	005a      	lsls	r2, r3, #1
 80016fa:	4b62      	ldr	r3, [pc, #392]	; (8001884 <_ZN5Timer9enablePWMEhmt+0x1c0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d907      	bls.n	8001712 <_ZN5Timer9enablePWMEhmt+0x4e>
	{
		freq = SystemCoreClock / ( 2 * (range+1) );
 8001702:	4b60      	ldr	r3, [pc, #384]	; (8001884 <_ZN5Timer9enablePWMEhmt+0x1c0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	893a      	ldrh	r2, [r7, #8]
 8001708:	3201      	adds	r2, #1
 800170a:	0052      	lsls	r2, r2, #1
 800170c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001710:	607b      	str	r3, [r7, #4]
	}
	timer->ARR = range;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	893a      	ldrh	r2, [r7, #8]
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c
	timer->PSC = SystemCoreClock / (freq*2*range) - 1;
 800171a:	4b5a      	ldr	r3, [pc, #360]	; (8001884 <_ZN5Timer9enablePWMEhmt+0x1c0>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	893b      	ldrh	r3, [r7, #8]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fbb2 f3f3 	udiv	r3, r2, r3
 800172c:	b29a      	uxth	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	3a01      	subs	r2, #1
 8001734:	b292      	uxth	r2, r2
 8001736:	851a      	strh	r2, [r3, #40]	; 0x28

	switch(ch)
 8001738:	7afb      	ldrb	r3, [r7, #11]
 800173a:	3b01      	subs	r3, #1
 800173c:	2b03      	cmp	r3, #3
 800173e:	f200 809b 	bhi.w	8001878 <_ZN5Timer9enablePWMEhmt+0x1b4>
 8001742:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <_ZN5Timer9enablePWMEhmt+0x84>)
 8001744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001748:	08001759 	.word	0x08001759
 800174c:	080017a1 	.word	0x080017a1
 8001750:	080017e9 	.word	0x080017e9
 8001754:	08001831 	.word	0x08001831
	{
	case 1  :
		timer->CCMR1 &= ~TIM_CCMR1_OC1M;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	8b1b      	ldrh	r3, [r3, #24]
 800175e:	b29a      	uxth	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001768:	b292      	uxth	r2, r2
 800176a:	831a      	strh	r2, [r3, #24]
		timer->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	8b1b      	ldrh	r3, [r3, #24]
 8001772:	b29a      	uxth	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800177c:	b292      	uxth	r2, r2
 800177e:	831a      	strh	r2, [r3, #24]
		timer->CCR1 = range>>1;
 8001780:	893b      	ldrh	r3, [r7, #8]
 8001782:	105a      	asrs	r2, r3, #1
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	635a      	str	r2, [r3, #52]	; 0x34
		timer->CCER |= TIM_CCER_CC1E;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	8c1b      	ldrh	r3, [r3, #32]
 8001790:	b29a      	uxth	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f042 0201 	orr.w	r2, r2, #1
 800179a:	b292      	uxth	r2, r2
 800179c:	841a      	strh	r2, [r3, #32]
		break;
 800179e:	e06b      	b.n	8001878 <_ZN5Timer9enablePWMEhmt+0x1b4>
	case 2  :
		timer->CCMR1 &= ~TIM_CCMR1_OC2M;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	8b1b      	ldrh	r3, [r3, #24]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80017b0:	b292      	uxth	r2, r2
 80017b2:	831a      	strh	r2, [r3, #24]
		timer->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	8b1b      	ldrh	r3, [r3, #24]
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80017c4:	b292      	uxth	r2, r2
 80017c6:	831a      	strh	r2, [r3, #24]
		timer->CCR2 = range>>1;
 80017c8:	893b      	ldrh	r3, [r7, #8]
 80017ca:	105a      	asrs	r2, r3, #1
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	639a      	str	r2, [r3, #56]	; 0x38
		timer->CCER |= TIM_CCER_CC2E;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	8c1b      	ldrh	r3, [r3, #32]
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f042 0210 	orr.w	r2, r2, #16
 80017e2:	b292      	uxth	r2, r2
 80017e4:	841a      	strh	r2, [r3, #32]
		break;
 80017e6:	e047      	b.n	8001878 <_ZN5Timer9enablePWMEhmt+0x1b4>
	case 3  :
		timer->CCMR2 &= ~TIM_CCMR2_OC3M;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	8b9b      	ldrh	r3, [r3, #28]
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017f8:	b292      	uxth	r2, r2
 80017fa:	839a      	strh	r2, [r3, #28]
		timer->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	8b9b      	ldrh	r3, [r3, #28]
 8001802:	b29a      	uxth	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800180c:	b292      	uxth	r2, r2
 800180e:	839a      	strh	r2, [r3, #28]
		timer->CCR3 = range>>1;
 8001810:	893b      	ldrh	r3, [r7, #8]
 8001812:	105a      	asrs	r2, r3, #1
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	63da      	str	r2, [r3, #60]	; 0x3c
		timer->CCER |= TIM_CCER_CC3E;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	8c1b      	ldrh	r3, [r3, #32]
 8001820:	b29a      	uxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800182a:	b292      	uxth	r2, r2
 800182c:	841a      	strh	r2, [r3, #32]
		break;
 800182e:	e023      	b.n	8001878 <_ZN5Timer9enablePWMEhmt+0x1b4>
	case 4  :
		timer->CCMR2 &= ~TIM_CCMR2_OC4M;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	8b9b      	ldrh	r3, [r3, #28]
 8001836:	b29a      	uxth	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001840:	b292      	uxth	r2, r2
 8001842:	839a      	strh	r2, [r3, #28]
		timer->CCMR2 |= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	8b9b      	ldrh	r3, [r3, #28]
 800184a:	b29a      	uxth	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001854:	b292      	uxth	r2, r2
 8001856:	839a      	strh	r2, [r3, #28]
		timer->CCR4 = range>>1;
 8001858:	893b      	ldrh	r3, [r7, #8]
 800185a:	105a      	asrs	r2, r3, #1
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
		timer->CCER |= TIM_CCER_CC4E;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	8c1b      	ldrh	r3, [r3, #32]
 8001868:	b29a      	uxth	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001872:	b292      	uxth	r2, r2
 8001874:	841a      	strh	r2, [r3, #32]
		break;
 8001876:	bf00      	nop
	}
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	2000001c 	.word	0x2000001c

08001888 <_ZN5Timer5startEv>:
		break;
	}
}

void Timer::start()
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	timer->CR1 |= TIM_CR1_CEN;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	b29a      	uxth	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f042 0201 	orr.w	r2, r2, #1
 80018a0:	b292      	uxth	r2, r2
 80018a2:	801a      	strh	r2, [r3, #0]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_ZN5Timer4stopEv>:

void Timer::stop()
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	timer->CR1 &= ~TIM_CR1_CEN;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f022 0201 	bic.w	r2, r2, #1
 80018c8:	b292      	uxth	r2, r2
 80018ca:	801a      	strh	r2, [r3, #0]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_ZN11controlL297C1E13_L297_SELECT_>:
 *      Author: 201723940
 */

#include "controlL297.h"

controlL297::controlL297(_L297_SELECT_ selection)
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b085      	sub	sp, #20
 80018dc:	af02      	add	r7, sp, #8
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
 80018e4:	4a7c      	ldr	r2, [pc, #496]	; (8001ad8 <_ZN11controlL297C1E13_L297_SELECT_+0x200>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	601a      	str	r2, [r3, #0]
{
	config = new hardwareConfig();
 80018ea:	2004      	movs	r0, #4
 80018ec:	f001 f86b 	bl	80029c6 <_Znwj>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461c      	mov	r4, r3
 80018f4:	4620      	mov	r0, r4
 80018f6:	f000 fa3b 	bl	8001d70 <_ZN14hardwareConfigC1Ev>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	605c      	str	r4, [r3, #4]
	config->GPIO_Config(GPIOB, 0, OUTPUT);//enable de tout les moteurs
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6858      	ldr	r0, [r3, #4]
 8001902:	2300      	movs	r3, #0
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2301      	movs	r3, #1
 8001908:	2200      	movs	r2, #0
 800190a:	4974      	ldr	r1, [pc, #464]	; (8001adc <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 800190c:	f000 face 	bl	8001eac <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
	config->GPIO_Config(GPIOB, 1, OUTPUT);//half full
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6858      	ldr	r0, [r3, #4]
 8001914:	2300      	movs	r3, #0
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2301      	movs	r3, #1
 800191a:	2201      	movs	r2, #1
 800191c:	496f      	ldr	r1, [pc, #444]	; (8001adc <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 800191e:	f000 fac5 	bl	8001eac <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>

	config->GPIO_Pin_Enable(GPIOB, 1);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	496c      	ldr	r1, [pc, #432]	; (8001adc <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fb1e 	bl	8001f6c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
	//config->GPIO_Pin_Disable(GPIOB,1);
	speed = 1;// vitesse en HZ
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	60da      	str	r2, [r3, #12]
	lock = true;// actif bas
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	749a      	strb	r2, [r3, #18]
	chanel=0;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	741a      	strb	r2, [r3, #16]

	_selection= selection;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	745a      	strb	r2, [r3, #17]

	enabled = false;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	74da      	strb	r2, [r3, #19]


	switch (selection) {
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d074      	beq.n	8001a3e <_ZN11controlL297C1E13_L297_SELECT_+0x166>
 8001954:	2b02      	cmp	r3, #2
 8001956:	f300 80ba 	bgt.w	8001ace <_ZN11controlL297C1E13_L297_SELECT_+0x1f6>
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <_ZN11controlL297C1E13_L297_SELECT_+0x8c>
 800195e:	2b01      	cmp	r3, #1
 8001960:	d037      	beq.n	80019d2 <_ZN11controlL297C1E13_L297_SELECT_+0xfa>
 8001962:	e0b4      	b.n	8001ace <_ZN11controlL297C1E13_L297_SELECT_+0x1f6>
	case L297_1://master
		//init pinout
		chanel = 2;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	741a      	strb	r2, [r3, #16]
		config->GPIO_Config(GPIOB, 3, ALTERNATE,1);//voir datasheet à table 11 pour les details de AFR
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6858      	ldr	r0, [r3, #4]
 800196e:	2301      	movs	r3, #1
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2302      	movs	r3, #2
 8001974:	2203      	movs	r2, #3
 8001976:	4959      	ldr	r1, [pc, #356]	; (8001adc <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 8001978:	f000 fa98 	bl	8001eac <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOA, 10, OUTPUT);// direction
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6858      	ldr	r0, [r3, #4]
 8001980:	2300      	movs	r3, #0
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2301      	movs	r3, #1
 8001986:	220a      	movs	r2, #10
 8001988:	4955      	ldr	r1, [pc, #340]	; (8001ae0 <_ZN11controlL297C1E13_L297_SELECT_+0x208>)
 800198a:	f000 fa8f 	bl	8001eac <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOC, 9, OUTPUT);// lock
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6858      	ldr	r0, [r3, #4]
 8001992:	2300      	movs	r3, #0
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	2209      	movs	r2, #9
 800199a:	4952      	ldr	r1, [pc, #328]	; (8001ae4 <_ZN11controlL297C1E13_L297_SELECT_+0x20c>)
 800199c:	f000 fa86 	bl	8001eac <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>

		timer = new Timer(TIM2,50000,false);
 80019a0:	2008      	movs	r0, #8
 80019a2:	f001 f810 	bl	80029c6 <_Znwj>
 80019a6:	4603      	mov	r3, r0
 80019a8:	461c      	mov	r4, r3
 80019aa:	2300      	movs	r3, #0
 80019ac:	f24c 3250 	movw	r2, #50000	; 0xc350
 80019b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019b4:	4620      	mov	r0, r4
 80019b6:	f7ff fd9d 	bl	80014f4 <_ZN5TimerC1EP11TIM_TypeDefmb>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	609c      	str	r4, [r3, #8]
		timer->enablePWM(chanel,speed);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6898      	ldr	r0, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7c19      	ldrb	r1, [r3, #16]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	23ff      	movs	r3, #255	; 0xff
 80019cc:	f7ff fe7a 	bl	80016c4 <_ZN5Timer9enablePWMEhmt>


		break;
 80019d0:	e07d      	b.n	8001ace <_ZN11controlL297C1E13_L297_SELECT_+0x1f6>
	case L297_2://master
		//init pinout
		chanel = 1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	741a      	strb	r2, [r3, #16]
		config->GPIO_Config(GPIOB, 6, ALTERNATE, 2);//voir datasheet à table 11 pour les details de AFR
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6858      	ldr	r0, [r3, #4]
 80019dc:	2302      	movs	r3, #2
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2302      	movs	r3, #2
 80019e2:	2206      	movs	r2, #6
 80019e4:	493d      	ldr	r1, [pc, #244]	; (8001adc <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 80019e6:	f000 fa61 	bl	8001eac <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOA, 11, OUTPUT);// direction
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6858      	ldr	r0, [r3, #4]
 80019ee:	2300      	movs	r3, #0
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2301      	movs	r3, #1
 80019f4:	220b      	movs	r2, #11
 80019f6:	493a      	ldr	r1, [pc, #232]	; (8001ae0 <_ZN11controlL297C1E13_L297_SELECT_+0x208>)
 80019f8:	f000 fa58 	bl	8001eac <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOC, 8, OUTPUT);// lock
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6858      	ldr	r0, [r3, #4]
 8001a00:	2300      	movs	r3, #0
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	2301      	movs	r3, #1
 8001a06:	2208      	movs	r2, #8
 8001a08:	4936      	ldr	r1, [pc, #216]	; (8001ae4 <_ZN11controlL297C1E13_L297_SELECT_+0x20c>)
 8001a0a:	f000 fa4f 	bl	8001eac <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>

		timer = new Timer(TIM4,50000,false);
 8001a0e:	2008      	movs	r0, #8
 8001a10:	f000 ffd9 	bl	80029c6 <_Znwj>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461c      	mov	r4, r3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001a1e:	4932      	ldr	r1, [pc, #200]	; (8001ae8 <_ZN11controlL297C1E13_L297_SELECT_+0x210>)
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff fd67 	bl	80014f4 <_ZN5TimerC1EP11TIM_TypeDefmb>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	609c      	str	r4, [r3, #8]
		timer->enablePWM(chanel, speed);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6898      	ldr	r0, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	7c19      	ldrb	r1, [r3, #16]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	23ff      	movs	r3, #255	; 0xff
 8001a38:	f7ff fe44 	bl	80016c4 <_ZN5Timer9enablePWMEhmt>

		break;
 8001a3c:	e047      	b.n	8001ace <_ZN11controlL297C1E13_L297_SELECT_+0x1f6>
	case L297_3_4: // master
		//init pinout
		chanel = 2;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2202      	movs	r2, #2
 8001a42:	741a      	strb	r2, [r3, #16]
		config->GPIO_Config(GPIOB, 5, ALTERNATE, 2);//voir datasheet à table 11 pour les details de AFR
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6858      	ldr	r0, [r3, #4]
 8001a48:	2302      	movs	r3, #2
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	2205      	movs	r2, #5
 8001a50:	4922      	ldr	r1, [pc, #136]	; (8001adc <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 8001a52:	f000 fa2b 	bl	8001eac <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOA, 12, OUTPUT);// direction
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6858      	ldr	r0, [r3, #4]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	220c      	movs	r2, #12
 8001a62:	491f      	ldr	r1, [pc, #124]	; (8001ae0 <_ZN11controlL297C1E13_L297_SELECT_+0x208>)
 8001a64:	f000 fa22 	bl	8001eac <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOC, 7, OUTPUT);// lock
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6858      	ldr	r0, [r3, #4]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2301      	movs	r3, #1
 8001a72:	2207      	movs	r2, #7
 8001a74:	491b      	ldr	r1, [pc, #108]	; (8001ae4 <_ZN11controlL297C1E13_L297_SELECT_+0x20c>)
 8001a76:	f000 fa19 	bl	8001eac <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>

		timer= new Timer(TIM3, 50000, false);
 8001a7a:	2008      	movs	r0, #8
 8001a7c:	f000 ffa3 	bl	80029c6 <_Znwj>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461c      	mov	r4, r3
 8001a84:	2300      	movs	r3, #0
 8001a86:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001a8a:	4918      	ldr	r1, [pc, #96]	; (8001aec <_ZN11controlL297C1E13_L297_SELECT_+0x214>)
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7ff fd31 	bl	80014f4 <_ZN5TimerC1EP11TIM_TypeDefmb>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	609c      	str	r4, [r3, #8]
		timer->enablePWM(chanel, speed);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6898      	ldr	r0, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7c19      	ldrb	r1, [r3, #16]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	23ff      	movs	r3, #255	; 0xff
 8001aa4:	f7ff fe0e 	bl	80016c4 <_ZN5Timer9enablePWMEhmt>

		// L297_4: slave de L297_3
		// pas besoin de sa propre clk, mais suivre les mouvements de L297_3;
		//init pinout
		config->GPIO_Config(GPIOB, 12, OUTPUT);// lock
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6858      	ldr	r0, [r3, #4]
 8001aac:	2300      	movs	r3, #0
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	4909      	ldr	r1, [pc, #36]	; (8001adc <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 8001ab6:	f000 f9f9 	bl	8001eac <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOC, 12, OUTPUT);// direction
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6858      	ldr	r0, [r3, #4]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	220c      	movs	r2, #12
 8001ac6:	4907      	ldr	r1, [pc, #28]	; (8001ae4 <_ZN11controlL297C1E13_L297_SELECT_+0x20c>)
 8001ac8:	f000 f9f0 	bl	8001eac <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		break;
 8001acc:	bf00      	nop

	}


}
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd90      	pop	{r4, r7, pc}
 8001ad8:	08002e30 	.word	0x08002e30
 8001adc:	40020400 	.word	0x40020400
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	40020800 	.word	0x40020800
 8001ae8:	40000800 	.word	0x40000800
 8001aec:	40000400 	.word	0x40000400

08001af0 <_ZN11controlL297D1Ev>:

controlL297::~controlL297()
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	4a10      	ldr	r2, [pc, #64]	; (8001b3c <_ZN11controlL297D1Ev+0x4c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	601a      	str	r2, [r3, #0]
{
	if(config)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d008      	beq.n	8001b18 <_ZN11controlL297D1Ev+0x28>
		delete config;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d004      	beq.n	8001b18 <_ZN11controlL297D1Ev+0x28>
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	3204      	adds	r2, #4
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	4790      	blx	r2
	if(timer)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <_ZN11controlL297D1Ev+0x42>
		delete timer;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <_ZN11controlL297D1Ev+0x42>
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	3204      	adds	r2, #4
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	4790      	blx	r2
}
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	08002e30 	.word	0x08002e30

08001b40 <_ZN11controlL297D0Ev>:
controlL297::~controlL297()
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
}
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ffd1 	bl	8001af0 <_ZN11controlL297D1Ev>
 8001b4e:	2114      	movs	r1, #20
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 ff36 	bl	80029c2 <_ZdlPvj>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_ZN11controlL2978setSpeedEm>:
void controlL297::setSpeed(uint32_t speed)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]

	this->speed = speed;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	60da      	str	r2, [r3, #12]
	timer->stop();
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fe9b 	bl	80018b0 <_ZN5Timer4stopEv>
	timer->enablePWM(chanel, speed);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6898      	ldr	r0, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7c19      	ldrb	r1, [r3, #16]
 8001b82:	23ff      	movs	r3, #255	; 0xff
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	f7ff fd9d 	bl	80016c4 <_ZN5Timer9enablePWMEhmt>
	timer->start();
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fe7a 	bl	8001888 <_ZN5Timer5startEv>
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_ZN11controlL29712setDirectionE11_DIRECTION_>:
void controlL297::setDirection(_DIRECTION_ dir)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d02a      	beq.n	8001c04 <_ZN11controlL29712setDirectionE11_DIRECTION_+0x68>
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d154      	bne.n	8001c5c <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc0>
	case CCW:

		if(_selection==0)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	7c5b      	ldrb	r3, [r3, #17]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d106      	bne.n	8001bc8 <_ZN11controlL29712setDirectionE11_DIRECTION_+0x2c>
			config->GPIO_Pin_Disable(GPIOA, 10);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	220a      	movs	r2, #10
 8001bc0:	4928      	ldr	r1, [pc, #160]	; (8001c64 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fa10 	bl	8001fe8 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
		if(_selection==1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7c5b      	ldrb	r3, [r3, #17]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d106      	bne.n	8001bde <_ZN11controlL29712setDirectionE11_DIRECTION_+0x42>
			config->GPIO_Pin_Enable(GPIOA, 11);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	220b      	movs	r2, #11
 8001bd6:	4923      	ldr	r1, [pc, #140]	; (8001c64 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 f9c7 	bl	8001f6c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		if(_selection==2)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7c5b      	ldrb	r3, [r3, #17]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d137      	bne.n	8001c56 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xba>
		{
			//les directions sont inverses, car les moteurs sont vis à vis
			config->GPIO_Pin_Enable(GPIOA, 12);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	220c      	movs	r2, #12
 8001bec:	491d      	ldr	r1, [pc, #116]	; (8001c64 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f9bc 	bl	8001f6c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
			config->GPIO_Pin_Disable(GPIOC, 12);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	220c      	movs	r2, #12
 8001bfa:	491b      	ldr	r1, [pc, #108]	; (8001c68 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xcc>)
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 f9f3 	bl	8001fe8 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>

		}

		break;
 8001c02:	e028      	b.n	8001c56 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xba>

	case CW:
		if(_selection==0)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7c5b      	ldrb	r3, [r3, #17]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d106      	bne.n	8001c1a <_ZN11controlL29712setDirectionE11_DIRECTION_+0x7e>
			config->GPIO_Pin_Enable(GPIOA, 10);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	220a      	movs	r2, #10
 8001c12:	4914      	ldr	r1, [pc, #80]	; (8001c64 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 f9a9 	bl	8001f6c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		if(_selection==1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7c5b      	ldrb	r3, [r3, #17]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d106      	bne.n	8001c30 <_ZN11controlL29712setDirectionE11_DIRECTION_+0x94>
			config->GPIO_Pin_Disable(GPIOA, 11);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	220b      	movs	r2, #11
 8001c28:	490e      	ldr	r1, [pc, #56]	; (8001c64 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f9dc 	bl	8001fe8 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
		if(_selection==2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7c5b      	ldrb	r3, [r3, #17]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d110      	bne.n	8001c5a <_ZN11controlL29712setDirectionE11_DIRECTION_+0xbe>
		{
			//les directions sont inverses, car les moteurs sont vis à vis
			config->GPIO_Pin_Disable(GPIOA, 12);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	220c      	movs	r2, #12
 8001c3e:	4909      	ldr	r1, [pc, #36]	; (8001c64 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 f9d1 	bl	8001fe8 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
			config->GPIO_Pin_Enable(GPIOC, 12);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	4906      	ldr	r1, [pc, #24]	; (8001c68 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xcc>)
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f98c 	bl	8001f6c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		}
		break;
 8001c54:	e001      	b.n	8001c5a <_ZN11controlL29712setDirectionE11_DIRECTION_+0xbe>
		break;
 8001c56:	bf00      	nop
 8001c58:	e000      	b.n	8001c5c <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc0>
		break;
 8001c5a:	bf00      	nop
	}
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40020000 	.word	0x40020000
 8001c68:	40020800 	.word	0x40020800

08001c6c <_ZN11controlL29712setLockStateE11_LOCK_STATE>:
void controlL297::setLockState(_STATE_ state)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
	this->lock= state;
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bf14      	ite	ne
 8001c7e:	2301      	movne	r3, #1
 8001c80:	2300      	moveq	r3, #0
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	749a      	strb	r2, [r3, #18]
	switch (state) {
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d023      	beq.n	8001cd6 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0x6a>
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d146      	bne.n	8001d20 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xb4>
	case UNLOCK :
		if(_selection==0)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7c5b      	ldrb	r3, [r3, #17]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0x3c>
			config->GPIO_Pin_Enable(GPIOC, 9);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2209      	movs	r2, #9
 8001ca0:	4921      	ldr	r1, [pc, #132]	; (8001d28 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f962 	bl	8001f6c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		if(_selection==1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7c5b      	ldrb	r3, [r3, #17]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d106      	bne.n	8001cbe <_ZN11controlL29712setLockStateE11_LOCK_STATE+0x52>
			config->GPIO_Pin_Enable(GPIOC, 8);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	491c      	ldr	r1, [pc, #112]	; (8001d28 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 f957 	bl	8001f6c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		if(_selection==2)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	7c5b      	ldrb	r3, [r3, #17]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d129      	bne.n	8001d1a <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xae>
		{
			config->GPIO_Pin_Enable(GPIOC, 7);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2207      	movs	r2, #7
 8001ccc:	4916      	ldr	r1, [pc, #88]	; (8001d28 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f94c 	bl	8001f6c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
			//config->GPIO_Pin_Enable(GPIOB, 12);
		}
		break;
 8001cd4:	e021      	b.n	8001d1a <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xae>
	case LOCK:
		if(_selection==0)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7c5b      	ldrb	r3, [r3, #17]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <_ZN11controlL29712setLockStateE11_LOCK_STATE+0x80>
			config->GPIO_Pin_Disable(GPIOC, 9);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2209      	movs	r2, #9
 8001ce4:	4910      	ldr	r1, [pc, #64]	; (8001d28 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f97e 	bl	8001fe8 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
		if(_selection==1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7c5b      	ldrb	r3, [r3, #17]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d106      	bne.n	8001d02 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0x96>
			config->GPIO_Pin_Disable(GPIOC, 8);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	490b      	ldr	r1, [pc, #44]	; (8001d28 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 f973 	bl	8001fe8 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
		if(_selection==2)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	7c5b      	ldrb	r3, [r3, #17]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d109      	bne.n	8001d1e <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xb2>
		{
			config->GPIO_Pin_Disable(GPIOC, 7);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2207      	movs	r2, #7
 8001d10:	4905      	ldr	r1, [pc, #20]	; (8001d28 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f968 	bl	8001fe8 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
			//config->GPIO_Pin_Disable(GPIOB, 12);// la trace dois être arranger avant de pouvoir parré ce moteur
			//à revoir
		}
		break;
 8001d18:	e001      	b.n	8001d1e <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xb2>
		break;
 8001d1a:	bf00      	nop
 8001d1c:	e000      	b.n	8001d20 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xb4>
		break;
 8001d1e:	bf00      	nop
	}

}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40020800 	.word	0x40020800

08001d2c <_ZN11controlL2979setEnableEb>:
void controlL297::setEnable(bool state)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	70fb      	strb	r3, [r7, #3]
	this->enabled= state;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	78fa      	ldrb	r2, [r7, #3]
 8001d3c:	74da      	strb	r2, [r3, #19]
	switch (state) {
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d107      	bne.n	8001d54 <_ZN11controlL2979setEnableEb+0x28>
	case true:
		config->GPIO_Pin_Enable(GPIOB, 0);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	4908      	ldr	r1, [pc, #32]	; (8001d6c <_ZN11controlL2979setEnableEb+0x40>)
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 f90d 	bl	8001f6c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		break;
 8001d52:	e007      	b.n	8001d64 <_ZN11controlL2979setEnableEb+0x38>
	default:
		config->GPIO_Pin_Disable(GPIOB, 0);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	4904      	ldr	r1, [pc, #16]	; (8001d6c <_ZN11controlL2979setEnableEb+0x40>)
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 f943 	bl	8001fe8 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
		break;
 8001d62:	bf00      	nop
	}

}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40020400 	.word	0x40020400

08001d70 <_ZN14hardwareConfigC1Ev>:
 *      Author: 201723940
 */

#include "hardwareConfig.h"

hardwareConfig::hardwareConfig() {
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <_ZN14hardwareConfigC1Ev+0x1c>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	601a      	str	r2, [r3, #0]

}
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	08002e40 	.word	0x08002e40

08001d90 <_ZN14hardwareConfigD1Ev>:

hardwareConfig::~hardwareConfig() {
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	4a04      	ldr	r2, [pc, #16]	; (8001dac <_ZN14hardwareConfigD1Ev+0x1c>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	601a      	str	r2, [r3, #0]

}
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	08002e40 	.word	0x08002e40

08001db0 <_ZN14hardwareConfigD0Ev>:
hardwareConfig::~hardwareConfig() {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
}
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ffe9 	bl	8001d90 <_ZN14hardwareConfigD1Ev>
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 fdfe 	bl	80029c2 <_ZdlPvj>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_ZN14hardwareConfig14SysClockConfigEv>:
// gère l'initialisation de base pour assurer le fonctionnement de base du nucle
//****dois être la première chose appeler dans le main.
void hardwareConfig::SysClockConfig(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	// active le hse
	RCC->CR = RCC_CR_HSEON;
 8001dd8:	4b30      	ldr	r3, [pc, #192]	; (8001e9c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001dda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dde:	601a      	str	r2, [r3, #0]
	//attendre que le cristal soit activer
	while(!(RCC->CR & RCC_CR_HSERDY));
 8001de0:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf0c      	ite	eq
 8001dec:	2301      	moveq	r3, #1
 8001dee:	2300      	movne	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d000      	beq.n	8001df8 <_ZN14hardwareConfig14SysClockConfigEv+0x28>
 8001df6:	e7f3      	b.n	8001de0 <_ZN14hardwareConfig14SysClockConfigEv+0x10>

	//set le power enable et le regulateur de tension
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001df8:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	4a27      	ldr	r2, [pc, #156]	; (8001e9c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e02:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= PWR_CR_VOS; // corresponds à la valeure reset "11"
 8001e04:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <_ZN14hardwareConfig14SysClockConfigEv+0xd0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a25      	ldr	r2, [pc, #148]	; (8001ea0 <_ZN14hardwareConfig14SysClockConfigEv+0xd0>)
 8001e0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e0e:	6013      	str	r3, [r2, #0]

	// configuration du flash
	FLASH->ACR |= FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN |FLASH_ACR_LATENCY_5WS;
 8001e10:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <_ZN14hardwareConfig14SysClockConfigEv+0xd4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a23      	ldr	r2, [pc, #140]	; (8001ea4 <_ZN14hardwareConfig14SysClockConfigEv+0xd4>)
 8001e16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e1a:	f043 0305 	orr.w	r3, r3, #5
 8001e1e:	6013      	str	r3, [r2, #0]

	// configuration des prescalers
	//AHB PR
	RCC->CFGR|= RCC_CFGR_HPRE_DIV1;
 8001e20:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001e22:	4a1e      	ldr	r2, [pc, #120]	; (8001e9c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	6093      	str	r3, [r2, #8]

	//APB1
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; //division par 4
 8001e28:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001e2e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001e32:	6093      	str	r3, [r2, #8]

	//APB1
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2; //division par 4
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e3e:	6093      	str	r3, [r2, #8]

	//configuration du pll
	RCC->PLLCFGR =(PLL_M << 0) |(PLL_N << 6) | (PLL_P << 16) | (RCC_PLLCFGR_PLLSRC_HSE);
 8001e40:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001e42:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <_ZN14hardwareConfig14SysClockConfigEv+0xd8>)
 8001e44:	605a      	str	r2, [r3, #4]

	// activerle pll et attendre qu'il soit pret
	RCC->CR |= RCC_CR_PLLON;
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001e4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e50:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	bf0c      	ite	eq
 8001e5e:	2301      	moveq	r3, #1
 8001e60:	2300      	movne	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d000      	beq.n	8001e6a <_ZN14hardwareConfig14SysClockConfigEv+0x9a>
 8001e68:	e7f3      	b.n	8001e52 <_ZN14hardwareConfig14SysClockConfigEv+0x82>

	//Sélectionner la source de la clock (pll dans ce cas ci)
	RCC-> CFGR |= RCC_CFGR_SW_PLL;
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	bf14      	ite	ne
 8001e82:	2301      	movne	r3, #1
 8001e84:	2300      	moveq	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d000      	beq.n	8001e8e <_ZN14hardwareConfig14SysClockConfigEv+0xbe>
 8001e8c:	e7f3      	b.n	8001e76 <_ZN14hardwareConfig14SysClockConfigEv+0xa6>
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40007000 	.word	0x40007000
 8001ea4:	40023c00 	.word	0x40023c00
 8001ea8:	00402d04 	.word	0x00402d04

08001eac <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>:

//Permet de configurer facilement les modes de chaques io
void hardwareConfig::GPIO_Config(GPIO_TypeDef* gpio, uint8_t pin, _IO_MODES_t mode,
		uint8_t alterFunction)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	461a      	mov	r2, r3
 8001eba:	460b      	mov	r3, r1
 8001ebc:	71fb      	strb	r3, [r7, #7]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	71bb      	strb	r3, [r7, #6]
	if (gpio == GPIOA)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	4a25      	ldr	r2, [pc, #148]	; (8001f5c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d105      	bne.n	8001ed6 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x2a>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8001eca:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a24      	ldr	r2, [pc, #144]	; (8001f60 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
	if (gpio == GPIOB)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	4a22      	ldr	r2, [pc, #136]	; (8001f64 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d105      	bne.n	8001eea <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x3e>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
	if (gpio == GPIOC)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xbc>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d105      	bne.n	8001efe <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x52>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a1a      	ldr	r2, [pc, #104]	; (8001f60 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30

	if (pin < 16)
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	2b0f      	cmp	r3, #15
 8001f02:	d809      	bhi.n	8001f18 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x6c>
	gpio->MODER |= mode << (2 * pin);
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	79b9      	ldrb	r1, [r7, #6]
 8001f0a:	79fa      	ldrb	r2, [r7, #7]
 8001f0c:	0052      	lsls	r2, r2, #1
 8001f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f12:	431a      	orrs	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	601a      	str	r2, [r3, #0]

	if (mode == ALTERNATE) {
 8001f18:	79bb      	ldrb	r3, [r7, #6]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d118      	bne.n	8001f50 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xa4>
		if (pin < 8)
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	2b07      	cmp	r3, #7
 8001f22:	d80a      	bhi.n	8001f3a <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x8e>
			gpio->AFR[0] |= (alterFunction << (4 * pin));
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	7e39      	ldrb	r1, [r7, #24]
 8001f2a:	79fa      	ldrb	r2, [r7, #7]
 8001f2c:	0092      	lsls	r2, r2, #2
 8001f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f32:	431a      	orrs	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	621a      	str	r2, [r3, #32]
		else
			gpio->AFR[1] |= (alterFunction << (4 * (pin - 8)));
	}

}
 8001f38:	e00a      	b.n	8001f50 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xa4>
			gpio->AFR[1] |= (alterFunction << (4 * (pin - 8)));
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	7e39      	ldrb	r1, [r7, #24]
 8001f40:	79fa      	ldrb	r2, [r7, #7]
 8001f42:	3a08      	subs	r2, #8
 8001f44:	0092      	lsls	r2, r2, #2
 8001f46:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020400 	.word	0x40020400
 8001f68:	40020800 	.word	0x40020800

08001f6c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>:
void hardwareConfig::GPIO_Pin_Enable(GPIO_TypeDef* gpio, uint8_t pin)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	4613      	mov	r3, r2
 8001f78:	71fb      	strb	r3, [r7, #7]
	if (gpio == GPIOA)
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x70>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d109      	bne.n	8001f96 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x2a>
		GPIOA->ODR |= 1<<pin;
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x70>)
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	79fa      	ldrb	r2, [r7, #7]
 8001f88:	2101      	movs	r1, #1
 8001f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x70>)
 8001f92:	430b      	orrs	r3, r1
 8001f94:	6153      	str	r3, [r2, #20]
	if (gpio == GPIOB)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	4a11      	ldr	r2, [pc, #68]	; (8001fe0 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x74>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d109      	bne.n	8001fb2 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x46>
		GPIOB->ODR |= 1<<pin;
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x74>)
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	79fa      	ldrb	r2, [r7, #7]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001faa:	4611      	mov	r1, r2
 8001fac:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x74>)
 8001fae:	430b      	orrs	r3, r1
 8001fb0:	6153      	str	r3, [r2, #20]
	if (gpio == GPIOC)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x78>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d109      	bne.n	8001fce <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x62>
		GPIOC->ODR |= 1<<pin;
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x78>)
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	79fa      	ldrb	r2, [r7, #7]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x78>)
 8001fca:	430b      	orrs	r3, r1
 8001fcc:	6153      	str	r3, [r2, #20]
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40020000 	.word	0x40020000
 8001fe0:	40020400 	.word	0x40020400
 8001fe4:	40020800 	.word	0x40020800

08001fe8 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>:
void hardwareConfig::GPIO_Pin_Disable(GPIO_TypeDef* gpio, uint8_t pin)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	71fb      	strb	r3, [r7, #7]
	if (gpio == GPIOA)
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4a18      	ldr	r2, [pc, #96]	; (800205c <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x74>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d10a      	bne.n	8002014 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x2c>
		GPIOA -> ODR &= ~(1<<pin);
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x74>)
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	79fa      	ldrb	r2, [r7, #7]
 8002004:	2101      	movs	r1, #1
 8002006:	fa01 f202 	lsl.w	r2, r1, r2
 800200a:	43d2      	mvns	r2, r2
 800200c:	4611      	mov	r1, r2
 800200e:	4a13      	ldr	r2, [pc, #76]	; (800205c <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x74>)
 8002010:	400b      	ands	r3, r1
 8002012:	6153      	str	r3, [r2, #20]
	if (gpio == GPIOB)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x78>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d10a      	bne.n	8002032 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x4a>
		GPIOB -> ODR &= ~(1<<pin);
 800201c:	4b10      	ldr	r3, [pc, #64]	; (8002060 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x78>)
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	79fa      	ldrb	r2, [r7, #7]
 8002022:	2101      	movs	r1, #1
 8002024:	fa01 f202 	lsl.w	r2, r1, r2
 8002028:	43d2      	mvns	r2, r2
 800202a:	4611      	mov	r1, r2
 800202c:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x78>)
 800202e:	400b      	ands	r3, r1
 8002030:	6153      	str	r3, [r2, #20]
	if (gpio == GPIOC)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x7c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d10a      	bne.n	8002050 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x68>
		GPIOC -> ODR &= ~(1<<pin);
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x7c>)
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	79fa      	ldrb	r2, [r7, #7]
 8002040:	2101      	movs	r1, #1
 8002042:	fa01 f202 	lsl.w	r2, r1, r2
 8002046:	43d2      	mvns	r2, r2
 8002048:	4611      	mov	r1, r2
 800204a:	4a06      	ldr	r2, [pc, #24]	; (8002064 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x7c>)
 800204c:	400b      	ands	r3, r1
 800204e:	6153      	str	r3, [r2, #20]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	40020000 	.word	0x40020000
 8002060:	40020400 	.word	0x40020400
 8002064:	40020800 	.word	0x40020800

08002068 <main>:
uint8_t valTargetEpaule=0;
uint8_t valTargetCoude=0;
uint8_t valTargetPince =0;


int main(void) {
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0

	initSysteme();
 800206e:	f000 f9e1 	bl	8002434 <_Z11initSystemev>
	initGestionMouvementAxe();
 8002072:	f000 fa25 	bl	80024c0 <_Z23initGestionMouvementAxev>
	initcommUsart3();
 8002076:	f000 f9f3 	bl	8002460 <_Z14initcommUsart3v>
	timerConversionEMG->start();
 800207a:	4b89      	ldr	r3, [pc, #548]	; (80022a0 <main+0x238>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fc02 	bl	8001888 <_ZN5Timer5startEv>
	//testL298= new L298x();

	while(1)
	{

		while(commAffichage->dataAvailable())
 8002084:	4b87      	ldr	r3, [pc, #540]	; (80022a4 <main+0x23c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff f8b0 	bl	80011ee <_ZNK15STM32F446Usart313dataAvailableEv>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80e7 	beq.w	8002264 <main+0x1fc>
		{
			rxData= commAffichage->read();
 8002096:	4b83      	ldr	r3, [pc, #524]	; (80022a4 <main+0x23c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff f88e 	bl	80011bc <_ZN15STM32F446Usart34readEv>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b80      	ldr	r3, [pc, #512]	; (80022a8 <main+0x240>)
 80020a6:	701a      	strb	r2, [r3, #0]
			switch (commState) {
 80020a8:	4b80      	ldr	r3, [pc, #512]	; (80022ac <main+0x244>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d8e9      	bhi.n	8002084 <main+0x1c>
 80020b0:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <main+0x50>)
 80020b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b6:	bf00      	nop
 80020b8:	080020c9 	.word	0x080020c9
 80020bc:	080020db 	.word	0x080020db
 80020c0:	0800216f 	.word	0x0800216f
 80020c4:	080021a5 	.word	0x080021a5
			case WAIT:
				if(rxData=='<')
 80020c8:	4b77      	ldr	r3, [pc, #476]	; (80022a8 <main+0x240>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b3c      	cmp	r3, #60	; 0x3c
 80020ce:	f040 80c3 	bne.w	8002258 <main+0x1f0>
					commState=RXCMD;
 80020d2:	4b76      	ldr	r3, [pc, #472]	; (80022ac <main+0x244>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
				break;
 80020d8:	e0be      	b.n	8002258 <main+0x1f0>
			case RXCMD:
				commState=RXPAYLOAD;
 80020da:	4b74      	ldr	r3, [pc, #464]	; (80022ac <main+0x244>)
 80020dc:	2202      	movs	r2, #2
 80020de:	701a      	strb	r2, [r3, #0]
				rxCnt=0;
 80020e0:	4b73      	ldr	r3, [pc, #460]	; (80022b0 <main+0x248>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	801a      	strh	r2, [r3, #0]
				//rxCmd=rxData;//commande à executer
				rxPayload[rxCnt++]=rxData;
 80020e6:	4b70      	ldr	r3, [pc, #448]	; (80022a8 <main+0x240>)
 80020e8:	7819      	ldrb	r1, [r3, #0]
 80020ea:	4b71      	ldr	r3, [pc, #452]	; (80022b0 <main+0x248>)
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	b290      	uxth	r0, r2
 80020f2:	4a6f      	ldr	r2, [pc, #444]	; (80022b0 <main+0x248>)
 80020f4:	8010      	strh	r0, [r2, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	b289      	uxth	r1, r1
 80020fa:	4b6e      	ldr	r3, [pc, #440]	; (80022b4 <main+0x24c>)
 80020fc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				switch (rxData) {
 8002100:	4b69      	ldr	r3, [pc, #420]	; (80022a8 <main+0x240>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	3b43      	subs	r3, #67	; 0x43
 8002106:	2b0d      	cmp	r3, #13
 8002108:	f200 80a8 	bhi.w	800225c <main+0x1f4>
 800210c:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <main+0xac>)
 800210e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002112:	bf00      	nop
 8002114:	0800215d 	.word	0x0800215d
 8002118:	0800225d 	.word	0x0800225d
 800211c:	08002165 	.word	0x08002165
 8002120:	0800225d 	.word	0x0800225d
 8002124:	0800225d 	.word	0x0800225d
 8002128:	0800225d 	.word	0x0800225d
 800212c:	0800225d 	.word	0x0800225d
 8002130:	0800225d 	.word	0x0800225d
 8002134:	0800225d 	.word	0x0800225d
 8002138:	0800225d 	.word	0x0800225d
 800213c:	0800214d 	.word	0x0800214d
 8002140:	0800225d 	.word	0x0800225d
 8002144:	0800225d 	.word	0x0800225d
 8002148:	08002155 	.word	0x08002155
				case 'M':
					//mode
					rxCmd=0;
 800214c:	4b5a      	ldr	r3, [pc, #360]	; (80022b8 <main+0x250>)
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
					break;
 8002152:	e00b      	b.n	800216c <main+0x104>
				case 'P':
					//position
					rxCmd=1;
 8002154:	4b58      	ldr	r3, [pc, #352]	; (80022b8 <main+0x250>)
 8002156:	2201      	movs	r2, #1
 8002158:	701a      	strb	r2, [r3, #0]

					break;
 800215a:	e007      	b.n	800216c <main+0x104>
				case 'C':
					//calibration
					rxCmd=2;
 800215c:	4b56      	ldr	r3, [pc, #344]	; (80022b8 <main+0x250>)
 800215e:	2202      	movs	r2, #2
 8002160:	701a      	strb	r2, [r3, #0]
					break;
 8002162:	e003      	b.n	800216c <main+0x104>
				case 'E':
					//erreure
					rxCmd=3;
 8002164:	4b54      	ldr	r3, [pc, #336]	; (80022b8 <main+0x250>)
 8002166:	2203      	movs	r2, #3
 8002168:	701a      	strb	r2, [r3, #0]
					break;
 800216a:	bf00      	nop
				}
				break;
 800216c:	e076      	b.n	800225c <main+0x1f4>
				case RXPAYLOAD:
					rxPayload[rxCnt++]=rxData;
 800216e:	4b4e      	ldr	r3, [pc, #312]	; (80022a8 <main+0x240>)
 8002170:	7819      	ldrb	r1, [r3, #0]
 8002172:	4b4f      	ldr	r3, [pc, #316]	; (80022b0 <main+0x248>)
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	b290      	uxth	r0, r2
 800217a:	4a4d      	ldr	r2, [pc, #308]	; (80022b0 <main+0x248>)
 800217c:	8010      	strh	r0, [r2, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	b289      	uxth	r1, r1
 8002182:	4b4c      	ldr	r3, [pc, #304]	; (80022b4 <main+0x24c>)
 8002184:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if(rxCnt>PAYLOAD_SIZE[rxCmd])
 8002188:	4b4b      	ldr	r3, [pc, #300]	; (80022b8 <main+0x250>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	4b4b      	ldr	r3, [pc, #300]	; (80022bc <main+0x254>)
 8002190:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002194:	4b46      	ldr	r3, [pc, #280]	; (80022b0 <main+0x248>)
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d261      	bcs.n	8002260 <main+0x1f8>
					{

						commState =VALIDATE;
 800219c:	4b43      	ldr	r3, [pc, #268]	; (80022ac <main+0x244>)
 800219e:	2203      	movs	r2, #3
 80021a0:	701a      	strb	r2, [r3, #0]
					}
					break;
 80021a2:	e05d      	b.n	8002260 <main+0x1f8>
				case VALIDATE:
					if(rxData=='>')
 80021a4:	4b40      	ldr	r3, [pc, #256]	; (80022a8 <main+0x240>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b3e      	cmp	r3, #62	; 0x3e
 80021aa:	d151      	bne.n	8002250 <main+0x1e8>
					{


						switch (rxCmd) {
 80021ac:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <main+0x250>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d84d      	bhi.n	8002250 <main+0x1e8>
 80021b4:	a201      	add	r2, pc, #4	; (adr r2, 80021bc <main+0x154>)
 80021b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ba:	bf00      	nop
 80021bc:	080021cd 	.word	0x080021cd
 80021c0:	08002207 	.word	0x08002207
 80021c4:	08002251 	.word	0x08002251
 80021c8:	08002251 	.word	0x08002251
						case 0:
							//mode
							if(rxPayload[1]==0)
 80021cc:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <main+0x24c>)
 80021ce:	885b      	ldrh	r3, [r3, #2]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <main+0x172>
								modeSocrate=IDLE;
 80021d4:	4b3a      	ldr	r3, [pc, #232]	; (80022c0 <main+0x258>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
							if(rxPayload[1]==1)
 80021da:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <main+0x24c>)
 80021dc:	885b      	ldrh	r3, [r3, #2]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d102      	bne.n	80021e8 <main+0x180>
								modeSocrate=CAPTEURS;
 80021e2:	4b37      	ldr	r3, [pc, #220]	; (80022c0 <main+0x258>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
							if(rxPayload[1]==2)
 80021e8:	4b32      	ldr	r3, [pc, #200]	; (80022b4 <main+0x24c>)
 80021ea:	885b      	ldrh	r3, [r3, #2]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d102      	bne.n	80021f6 <main+0x18e>
								modeSocrate=MANUEL;
 80021f0:	4b33      	ldr	r3, [pc, #204]	; (80022c0 <main+0x258>)
 80021f2:	2202      	movs	r2, #2
 80021f4:	701a      	strb	r2, [r3, #0]
							if(rxPayload[1]==3)
 80021f6:	4b2f      	ldr	r3, [pc, #188]	; (80022b4 <main+0x24c>)
 80021f8:	885b      	ldrh	r3, [r3, #2]
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d125      	bne.n	800224a <main+0x1e2>
								modeSocrate=CALIBRATION;
 80021fe:	4b30      	ldr	r3, [pc, #192]	; (80022c0 <main+0x258>)
 8002200:	2203      	movs	r2, #3
 8002202:	701a      	strb	r2, [r3, #0]

							break;
 8002204:	e021      	b.n	800224a <main+0x1e2>

						case 1:
							//position
							if(modeSocrate==MANUEL)
 8002206:	4b2e      	ldr	r3, [pc, #184]	; (80022c0 <main+0x258>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d11f      	bne.n	800224e <main+0x1e6>
							{

								switch (rxPayload[1]) {
 800220e:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <main+0x24c>)
 8002210:	885b      	ldrh	r3, [r3, #2]
 8002212:	2b66      	cmp	r3, #102	; 0x66
 8002214:	d012      	beq.n	800223c <main+0x1d4>
 8002216:	2b66      	cmp	r3, #102	; 0x66
 8002218:	dc19      	bgt.n	800224e <main+0x1e6>
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d002      	beq.n	8002224 <main+0x1bc>
 800221e:	2b65      	cmp	r3, #101	; 0x65
 8002220:	d006      	beq.n	8002230 <main+0x1c8>
								//								if(coude->getPositionPotPourcentage()<rxPayload[2])
									//								{
								//									coude->setMoteurDirEtSpeed(100, 1);
								//								}
							}
							break;
 8002222:	e014      	b.n	800224e <main+0x1e6>
									valTargetEpaule= rxPayload[2];
 8002224:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <main+0x24c>)
 8002226:	889b      	ldrh	r3, [r3, #4]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <main+0x25c>)
 800222c:	701a      	strb	r2, [r3, #0]
									break;
 800222e:	e00b      	b.n	8002248 <main+0x1e0>
									valTargetCoude= rxPayload[2];
 8002230:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <main+0x24c>)
 8002232:	889b      	ldrh	r3, [r3, #4]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <main+0x260>)
 8002238:	701a      	strb	r2, [r3, #0]
									break;
 800223a:	e005      	b.n	8002248 <main+0x1e0>
									valTargetPince = rxPayload[2];
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <main+0x24c>)
 800223e:	889b      	ldrh	r3, [r3, #4]
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4b22      	ldr	r3, [pc, #136]	; (80022cc <main+0x264>)
 8002244:	701a      	strb	r2, [r3, #0]
									break;
 8002246:	bf00      	nop
							break;
 8002248:	e001      	b.n	800224e <main+0x1e6>
							break;
 800224a:	bf00      	nop
 800224c:	e000      	b.n	8002250 <main+0x1e8>
							break;
 800224e:	bf00      	nop
							break;
						}

					}

					commState =WAIT;
 8002250:	4b16      	ldr	r3, [pc, #88]	; (80022ac <main+0x244>)
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
					break;
 8002256:	e004      	b.n	8002262 <main+0x1fa>
				break;
 8002258:	bf00      	nop
 800225a:	e713      	b.n	8002084 <main+0x1c>
				break;
 800225c:	bf00      	nop
 800225e:	e711      	b.n	8002084 <main+0x1c>
					break;
 8002260:	bf00      	nop
		while(commAffichage->dataAvailable())
 8002262:	e70f      	b.n	8002084 <main+0x1c>
			}
		}
		/********************Gestion du Menu*****************************/
		switch (modeSocrate)
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <main+0x258>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b03      	cmp	r3, #3
 800226a:	f200 80a7 	bhi.w	80023bc <main+0x354>
 800226e:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <main+0x20c>)
 8002270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002274:	08002285 	.word	0x08002285
 8002278:	080023bd 	.word	0x080023bd
 800227c:	080022d9 	.word	0x080022d9
 8002280:	080023bd 	.word	0x080023bd
		{
		case IDLE:
			coude->setMoteurLockState(0);//lock
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <main+0x268>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fca0 	bl	8000bd0 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>
			epaule->setMoteurLockState(0);//lock
 8002290:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <main+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fc9a 	bl	8000bd0 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>
			break;
 800229c:	e08e      	b.n	80023bc <main+0x354>
 800229e:	bf00      	nop
 80022a0:	200000bc 	.word	0x200000bc
 80022a4:	200000c0 	.word	0x200000c0
 80022a8:	20000112 	.word	0x20000112
 80022ac:	20000110 	.word	0x20000110
 80022b0:	20000114 	.word	0x20000114
 80022b4:	20000118 	.word	0x20000118
 80022b8:	20000116 	.word	0x20000116
 80022bc:	08002e4c 	.word	0x08002e4c
 80022c0:	20000111 	.word	0x20000111
 80022c4:	20000136 	.word	0x20000136
 80022c8:	20000137 	.word	0x20000137
 80022cc:	20000138 	.word	0x20000138
 80022d0:	200000c4 	.word	0x200000c4
 80022d4:	200000c8 	.word	0x200000c8

			break;
		case MANUEL:
			// mis à jour dees messages de position

			if(valTargetCoude <= filtreCoude->resultatFiltre())
 80022d8:	4b4e      	ldr	r3, [pc, #312]	; (8002414 <main+0x3ac>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	461c      	mov	r4, r3
 80022de:	4b4e      	ldr	r3, [pc, #312]	; (8002418 <main+0x3b0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe fba4 	bl	8000a30 <_ZN22FiltreFenetreGlissante14resultatFiltreEv>
 80022e8:	4603      	mov	r3, r0
 80022ea:	429c      	cmp	r4, r3
 80022ec:	bfd4      	ite	le
 80022ee:	2301      	movle	r3, #1
 80022f0:	2300      	movgt	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00c      	beq.n	8002312 <main+0x2aa>
			{
				coude->setMoteurLockState(1);//unlock
 80022f8:	4b48      	ldr	r3, [pc, #288]	; (800241c <main+0x3b4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fc66 	bl	8000bd0 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>
				coude->setMoteurDirEtSpeed(100, 0);
 8002304:	4b45      	ldr	r3, [pc, #276]	; (800241c <main+0x3b4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2200      	movs	r2, #0
 800230a:	2164      	movs	r1, #100	; 0x64
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe fc7a 	bl	8000c06 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb>
			}
			if(valTargetCoude >= filtreCoude->resultatFiltre())
 8002312:	4b40      	ldr	r3, [pc, #256]	; (8002414 <main+0x3ac>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	461c      	mov	r4, r3
 8002318:	4b3f      	ldr	r3, [pc, #252]	; (8002418 <main+0x3b0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe fb87 	bl	8000a30 <_ZN22FiltreFenetreGlissante14resultatFiltreEv>
 8002322:	4603      	mov	r3, r0
 8002324:	429c      	cmp	r4, r3
 8002326:	bfac      	ite	ge
 8002328:	2301      	movge	r3, #1
 800232a:	2300      	movlt	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00c      	beq.n	800234c <main+0x2e4>
			{
				coude->setMoteurLockState(1);//unlock
 8002332:	4b3a      	ldr	r3, [pc, #232]	; (800241c <main+0x3b4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2101      	movs	r1, #1
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe fc49 	bl	8000bd0 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>
				coude->setMoteurDirEtSpeed(100, 1);
 800233e:	4b37      	ldr	r3, [pc, #220]	; (800241c <main+0x3b4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2201      	movs	r2, #1
 8002344:	2164      	movs	r1, #100	; 0x64
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe fc5d 	bl	8000c06 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb>
			}
			if(valTargetCoude ==filtreCoude->resultatFiltre())
 800234c:	4b31      	ldr	r3, [pc, #196]	; (8002414 <main+0x3ac>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	461c      	mov	r4, r3
 8002352:	4b31      	ldr	r3, [pc, #196]	; (8002418 <main+0x3b0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fb6a 	bl	8000a30 <_ZN22FiltreFenetreGlissante14resultatFiltreEv>
 800235c:	4603      	mov	r3, r0
 800235e:	429c      	cmp	r4, r3
 8002360:	bf0c      	ite	eq
 8002362:	2301      	moveq	r3, #1
 8002364:	2300      	movne	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <main+0x310>
			{
				coude->setMoteurLockState(0);//lock
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <main+0x3b4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fc2c 	bl	8000bd0 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>
			}
			messagePosition[0][3]=(100+filtreEpaule->resultatFiltre());
 8002378:	4b29      	ldr	r3, [pc, #164]	; (8002420 <main+0x3b8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fb57 	bl	8000a30 <_ZN22FiltreFenetreGlissante14resultatFiltreEv>
 8002382:	4603      	mov	r3, r0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	3364      	adds	r3, #100	; 0x64
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4b26      	ldr	r3, [pc, #152]	; (8002424 <main+0x3bc>)
 800238c:	70da      	strb	r2, [r3, #3]
			messagePosition[1][3]=(100+filtreCoude->resultatFiltre());
 800238e:	4b22      	ldr	r3, [pc, #136]	; (8002418 <main+0x3b0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fb4c 	bl	8000a30 <_ZN22FiltreFenetreGlissante14resultatFiltreEv>
 8002398:	4603      	mov	r3, r0
 800239a:	b2db      	uxtb	r3, r3
 800239c:	3364      	adds	r3, #100	; 0x64
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	4b20      	ldr	r3, [pc, #128]	; (8002424 <main+0x3bc>)
 80023a2:	725a      	strb	r2, [r3, #9]
			messagePosition[2][3]=(100+filtrePince->resultatFiltre());
 80023a4:	4b20      	ldr	r3, [pc, #128]	; (8002428 <main+0x3c0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fb41 	bl	8000a30 <_ZN22FiltreFenetreGlissante14resultatFiltreEv>
 80023ae:	4603      	mov	r3, r0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	3364      	adds	r3, #100	; 0x64
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <main+0x3bc>)
 80023b8:	73da      	strb	r2, [r3, #15]

			break;
 80023ba:	bf00      	nop

			break;
		}

		/*************************** envoie des messages****************/
		if (serialPcPauseCompleted)
 80023bc:	4b1b      	ldr	r3, [pc, #108]	; (800242c <main+0x3c4>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f43f ae5e 	beq.w	8002084 <main+0x1c>
		{
			//position des axes
			for(uint8_t a=0;a<3;a++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	71fb      	strb	r3, [r7, #7]
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d81b      	bhi.n	800240a <main+0x3a2>
			{
				for(uint8_t b=0;b<6;b++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	71bb      	strb	r3, [r7, #6]
 80023d6:	79bb      	ldrb	r3, [r7, #6]
 80023d8:	2b05      	cmp	r3, #5
 80023da:	d812      	bhi.n	8002402 <main+0x39a>
				{
					commAffichage->write(messagePosition[a][b]);
 80023dc:	4b14      	ldr	r3, [pc, #80]	; (8002430 <main+0x3c8>)
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	79fa      	ldrb	r2, [r7, #7]
 80023e2:	79b9      	ldrb	r1, [r7, #6]
 80023e4:	4c0f      	ldr	r4, [pc, #60]	; (8002424 <main+0x3bc>)
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4423      	add	r3, r4
 80023f0:	440b      	add	r3, r1
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	f7fe febb 	bl	8001170 <_ZN15STM32F446Usart35writeEh>
				for(uint8_t b=0;b<6;b++)
 80023fa:	79bb      	ldrb	r3, [r7, #6]
 80023fc:	3301      	adds	r3, #1
 80023fe:	71bb      	strb	r3, [r7, #6]
 8002400:	e7e9      	b.n	80023d6 <main+0x36e>
			for(uint8_t a=0;a<3;a++)
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	3301      	adds	r3, #1
 8002406:	71fb      	strb	r3, [r7, #7]
 8002408:	e7e0      	b.n	80023cc <main+0x364>
				}
			}

			serialPcPauseCompleted = false;
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <main+0x3c4>)
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
		}

	}
 8002410:	e638      	b.n	8002084 <main+0x1c>
 8002412:	bf00      	nop
 8002414:	20000137 	.word	0x20000137
 8002418:	200000d0 	.word	0x200000d0
 800241c:	200000c4 	.word	0x200000c4
 8002420:	200000d4 	.word	0x200000d4
 8002424:	20000000 	.word	0x20000000
 8002428:	200000d8 	.word	0x200000d8
 800242c:	200000dc 	.word	0x200000dc
 8002430:	200000c0 	.word	0x200000c0

08002434 <_Z11initSystemev>:
}
void initSysteme(void)
{
 8002434:	b598      	push	{r3, r4, r7, lr}
 8002436:	af00      	add	r7, sp, #0
	stm32F446 = new hardwareConfig();
 8002438:	2004      	movs	r0, #4
 800243a:	f000 fac4 	bl	80029c6 <_Znwj>
 800243e:	4603      	mov	r3, r0
 8002440:	461c      	mov	r4, r3
 8002442:	4620      	mov	r0, r4
 8002444:	f7ff fc94 	bl	8001d70 <_ZN14hardwareConfigC1Ev>
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <_Z11initSystemev+0x28>)
 800244a:	601c      	str	r4, [r3, #0]
	stm32F446->SysClockConfig();
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <_Z11initSystemev+0x28>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fcbd 	bl	8001dd0 <_ZN14hardwareConfig14SysClockConfigEv>
}
 8002456:	bf00      	nop
 8002458:	bd98      	pop	{r3, r4, r7, pc}
 800245a:	bf00      	nop
 800245c:	200000b4 	.word	0x200000b4

08002460 <_Z14initcommUsart3v>:
void initcommUsart3(void)
{
 8002460:	b598      	push	{r3, r4, r7, lr}
 8002462:	af00      	add	r7, sp, #0
	commAffichage = STM32F446Usart3::getInstance();
 8002464:	f7fe fe6c 	bl	8001140 <_ZN15STM32F446Usart311getInstanceEv>
 8002468:	4603      	mov	r3, r0
 800246a:	4a12      	ldr	r2, [pc, #72]	; (80024b4 <_Z14initcommUsart3v+0x54>)
 800246c:	6013      	str	r3, [r2, #0]
	commAffichage->setBaudRate(9600);
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <_Z14initcommUsart3v+0x54>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe feca 	bl	8001210 <_ZN15STM32F446Usart311setBaudRateEm>
	cadanceComm = new Timer(TIM5,10000,true);
 800247c:	2008      	movs	r0, #8
 800247e:	f000 faa2 	bl	80029c6 <_Znwj>
 8002482:	4603      	mov	r3, r0
 8002484:	461c      	mov	r4, r3
 8002486:	2301      	movs	r3, #1
 8002488:	f242 7210 	movw	r2, #10000	; 0x2710
 800248c:	490a      	ldr	r1, [pc, #40]	; (80024b8 <_Z14initcommUsart3v+0x58>)
 800248e:	4620      	mov	r0, r4
 8002490:	f7ff f830 	bl	80014f4 <_ZN5TimerC1EP11TIM_TypeDefmb>
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <_Z14initcommUsart3v+0x5c>)
 8002496:	601c      	str	r4, [r3, #0]
	cadanceComm->enablePWM(2,100);
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <_Z14initcommUsart3v+0x5c>)
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	23ff      	movs	r3, #255	; 0xff
 800249e:	2264      	movs	r2, #100	; 0x64
 80024a0:	2102      	movs	r1, #2
 80024a2:	f7ff f90f 	bl	80016c4 <_ZN5Timer9enablePWMEhmt>
	cadanceComm->start();
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <_Z14initcommUsart3v+0x5c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff f9ec 	bl	8001888 <_ZN5Timer5startEv>
}
 80024b0:	bf00      	nop
 80024b2:	bd98      	pop	{r3, r4, r7, pc}
 80024b4:	200000c0 	.word	0x200000c0
 80024b8:	40000c00 	.word	0x40000c00
 80024bc:	200000b8 	.word	0x200000b8

080024c0 <_Z23initGestionMouvementAxev>:
void initGestionMouvementAxe(void)
{
 80024c0:	b598      	push	{r3, r4, r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	timerConversionEMG = new Timer(TIM7,10000,true);
 80024c4:	2008      	movs	r0, #8
 80024c6:	f000 fa7e 	bl	80029c6 <_Znwj>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461c      	mov	r4, r3
 80024ce:	2301      	movs	r3, #1
 80024d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80024d4:	4924      	ldr	r1, [pc, #144]	; (8002568 <_Z23initGestionMouvementAxev+0xa8>)
 80024d6:	4620      	mov	r0, r4
 80024d8:	f7ff f80c 	bl	80014f4 <_ZN5TimerC1EP11TIM_TypeDefmb>
 80024dc:	4b23      	ldr	r3, [pc, #140]	; (800256c <_Z23initGestionMouvementAxev+0xac>)
 80024de:	601c      	str	r4, [r3, #0]

	coude = new GestionMouvementAxe(AXE_COUDE, POT_COUDE);
 80024e0:	2010      	movs	r0, #16
 80024e2:	f000 fa70 	bl	80029c6 <_Znwj>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461c      	mov	r4, r3
 80024ea:	2204      	movs	r2, #4
 80024ec:	2101      	movs	r1, #1
 80024ee:	4620      	mov	r0, r4
 80024f0:	f7fe faec 	bl	8000acc <_ZN19GestionMouvementAxeC1Ehh>
 80024f4:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <_Z23initGestionMouvementAxev+0xb0>)
 80024f6:	601c      	str	r4, [r3, #0]
	epaule = new GestionMouvementAxe(AXE_EPAULE, POT_EPAULE);
 80024f8:	2010      	movs	r0, #16
 80024fa:	f000 fa64 	bl	80029c6 <_Znwj>
 80024fe:	4603      	mov	r3, r0
 8002500:	461c      	mov	r4, r3
 8002502:	2203      	movs	r2, #3
 8002504:	2100      	movs	r1, #0
 8002506:	4620      	mov	r0, r4
 8002508:	f7fe fae0 	bl	8000acc <_ZN19GestionMouvementAxeC1Ehh>
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <_Z23initGestionMouvementAxev+0xb4>)
 800250e:	601c      	str	r4, [r3, #0]
	pince = new GestionMouvementAxe(AXE_PINCE, POT_PINCE);
 8002510:	2010      	movs	r0, #16
 8002512:	f000 fa58 	bl	80029c6 <_Znwj>
 8002516:	4603      	mov	r3, r0
 8002518:	461c      	mov	r4, r3
 800251a:	2205      	movs	r2, #5
 800251c:	2102      	movs	r1, #2
 800251e:	4620      	mov	r0, r4
 8002520:	f7fe fad4 	bl	8000acc <_ZN19GestionMouvementAxeC1Ehh>
 8002524:	4b14      	ldr	r3, [pc, #80]	; (8002578 <_Z23initGestionMouvementAxev+0xb8>)
 8002526:	601c      	str	r4, [r3, #0]

	filtreCoude = new FiltreFenetreGlissante();
 8002528:	200c      	movs	r0, #12
 800252a:	f000 fa4c 	bl	80029c6 <_Znwj>
 800252e:	4603      	mov	r3, r0
 8002530:	461c      	mov	r4, r3
 8002532:	4620      	mov	r0, r4
 8002534:	f7fe fa40 	bl	80009b8 <_ZN22FiltreFenetreGlissanteC1Ev>
 8002538:	4b10      	ldr	r3, [pc, #64]	; (800257c <_Z23initGestionMouvementAxev+0xbc>)
 800253a:	601c      	str	r4, [r3, #0]
	filtreEpaule = new FiltreFenetreGlissante();
 800253c:	200c      	movs	r0, #12
 800253e:	f000 fa42 	bl	80029c6 <_Znwj>
 8002542:	4603      	mov	r3, r0
 8002544:	461c      	mov	r4, r3
 8002546:	4620      	mov	r0, r4
 8002548:	f7fe fa36 	bl	80009b8 <_ZN22FiltreFenetreGlissanteC1Ev>
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <_Z23initGestionMouvementAxev+0xc0>)
 800254e:	601c      	str	r4, [r3, #0]
	filtrePince = new FiltreFenetreGlissante();
 8002550:	200c      	movs	r0, #12
 8002552:	f000 fa38 	bl	80029c6 <_Znwj>
 8002556:	4603      	mov	r3, r0
 8002558:	461c      	mov	r4, r3
 800255a:	4620      	mov	r0, r4
 800255c:	f7fe fa2c 	bl	80009b8 <_ZN22FiltreFenetreGlissanteC1Ev>
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <_Z23initGestionMouvementAxev+0xc4>)
 8002562:	601c      	str	r4, [r3, #0]

	//encodeurCoude = new PositionAxeEncodeur(GPIOB, NO_PIN_ENCO_COUDE, ENCO_RISING_TRIGGER); // peut être rajouter si on utilise les encodeurs éventuellement
	//encodeurEpaule = new PositionAxeEncodeur(GPIOB, NO_PIN_ENCO_EPAULE, ENCO_RISING_TRIGGER);

}
 8002564:	bf00      	nop
 8002566:	bd98      	pop	{r3, r4, r7, pc}
 8002568:	40001400 	.word	0x40001400
 800256c:	200000bc 	.word	0x200000bc
 8002570:	200000c4 	.word	0x200000c4
 8002574:	200000c8 	.word	0x200000c8
 8002578:	200000cc 	.word	0x200000cc
 800257c:	200000d0 	.word	0x200000d0
 8002580:	200000d4 	.word	0x200000d4
 8002584:	200000d8 	.word	0x200000d8

08002588 <TIM7_IRQHandler>:
// interruptions
extern "C" void TIM7_IRQHandler(void)
{
 8002588:	b598      	push	{r3, r4, r7, lr}
 800258a:	af00      	add	r7, sp, #0
	if (TIM7->SR & TIM_SR_UIF) // if UIF flag is set
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <TIM7_IRQHandler+0x98>)
 800258e:	8a1b      	ldrh	r3, [r3, #16]
 8002590:	b29b      	uxth	r3, r3
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf14      	ite	ne
 800259a:	2301      	movne	r3, #1
 800259c:	2300      	moveq	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d03a      	beq.n	800261a <TIM7_IRQHandler+0x92>
	{
		TIM7->SR &= ~TIM_SR_UIF; // clear UIF flag
 80025a4:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <TIM7_IRQHandler+0x98>)
 80025a6:	8a1b      	ldrh	r3, [r3, #16]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	4a1d      	ldr	r2, [pc, #116]	; (8002620 <TIM7_IRQHandler+0x98>)
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	8213      	strh	r3, [r2, #16]

		coude->updatePositionPot();
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <TIM7_IRQHandler+0x9c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fb9a 	bl	8000cf2 <_ZN19GestionMouvementAxe17updatePositionPotEv>
		epaule->updatePositionPot();
 80025be:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <TIM7_IRQHandler+0xa0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fb95 	bl	8000cf2 <_ZN19GestionMouvementAxe17updatePositionPotEv>
		pince->updatePositionPot();
 80025c8:	4b18      	ldr	r3, [pc, #96]	; (800262c <TIM7_IRQHandler+0xa4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fb90 	bl	8000cf2 <_ZN19GestionMouvementAxe17updatePositionPotEv>

		// filtrage des valeures de pourentage de pot à chaque foi qu'ils sont mis à jour
		filtreCoude->miseNiveauFiltre(coude->getPositionPotPourcentage());
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <TIM7_IRQHandler+0xa8>)
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <TIM7_IRQHandler+0x9c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe faec 	bl	8000bb8 <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4619      	mov	r1, r3
 80025e4:	4620      	mov	r0, r4
 80025e6:	f7fe fa03 	bl	80009f0 <_ZN22FiltreFenetreGlissante16miseNiveauFiltreEh>
		filtreEpaule->miseNiveauFiltre(epaule->getPositionPotPourcentage());
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <TIM7_IRQHandler+0xac>)
 80025ec:	681c      	ldr	r4, [r3, #0]
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <TIM7_IRQHandler+0xa0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fae0 	bl	8000bb8 <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4619      	mov	r1, r3
 80025fc:	4620      	mov	r0, r4
 80025fe:	f7fe f9f7 	bl	80009f0 <_ZN22FiltreFenetreGlissante16miseNiveauFiltreEh>
		filtrePince->miseNiveauFiltre(pince->getPositionPotPourcentage());
 8002602:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <TIM7_IRQHandler+0xb0>)
 8002604:	681c      	ldr	r4, [r3, #0]
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <TIM7_IRQHandler+0xa4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fad4 	bl	8000bb8 <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 8002610:	4603      	mov	r3, r0
 8002612:	4619      	mov	r1, r3
 8002614:	4620      	mov	r0, r4
 8002616:	f7fe f9eb 	bl	80009f0 <_ZN22FiltreFenetreGlissante16miseNiveauFiltreEh>
	}
}
 800261a:	bf00      	nop
 800261c:	bd98      	pop	{r3, r4, r7, pc}
 800261e:	bf00      	nop
 8002620:	40001400 	.word	0x40001400
 8002624:	200000c4 	.word	0x200000c4
 8002628:	200000c8 	.word	0x200000c8
 800262c:	200000cc 	.word	0x200000cc
 8002630:	200000d0 	.word	0x200000d0
 8002634:	200000d4 	.word	0x200000d4
 8002638:	200000d8 	.word	0x200000d8

0800263c <TIM5_IRQHandler>:
extern "C" void TIM5_IRQHandler(void) {
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
	if (TIM5->SR & TIM_SR_UIF) // if UIF flag is set
 8002640:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <TIM5_IRQHandler+0x3c>)
 8002642:	8a1b      	ldrh	r3, [r3, #16]
 8002644:	b29b      	uxth	r3, r3
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf14      	ite	ne
 800264e:	2301      	movne	r3, #1
 8002650:	2300      	moveq	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <TIM5_IRQHandler+0x32>
	{
		TIM5->SR &= ~TIM_SR_UIF; // clear UIF flag
 8002658:	4b07      	ldr	r3, [pc, #28]	; (8002678 <TIM5_IRQHandler+0x3c>)
 800265a:	8a1b      	ldrh	r3, [r3, #16]
 800265c:	b29b      	uxth	r3, r3
 800265e:	4a06      	ldr	r2, [pc, #24]	; (8002678 <TIM5_IRQHandler+0x3c>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	b29b      	uxth	r3, r3
 8002666:	8213      	strh	r3, [r2, #16]
		serialPcPauseCompleted = true;
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <TIM5_IRQHandler+0x40>)
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]

	}

}
 800266e:	bf00      	nop
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	40000c00 	.word	0x40000c00
 800267c:	200000dc 	.word	0x200000dc

08002680 <_Z41__static_initialization_and_destruction_0ii>:
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d128      	bne.n	80026e2 <_Z41__static_initialization_and_destruction_0ii+0x62>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002696:	4293      	cmp	r3, r2
 8002698:	d123      	bne.n	80026e2 <_Z41__static_initialization_and_destruction_0ii+0x62>
std::string messageComm[2]= {"<ACK>","<ERR>"};
 800269a:	4c1c      	ldr	r4, [pc, #112]	; (800270c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800269c:	f107 0308 	add.w	r3, r7, #8
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 f9a1 	bl	80029e8 <_ZNSaIcEC1Ev>
 80026a6:	f107 0308 	add.w	r3, r7, #8
 80026aa:	461a      	mov	r2, r3
 80026ac:	4918      	ldr	r1, [pc, #96]	; (8002710 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80026ae:	4620      	mov	r0, r4
 80026b0:	f000 fa02 	bl	8002ab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80026b4:	f107 0308 	add.w	r3, r7, #8
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 f996 	bl	80029ea <_ZNSaIcED1Ev>
 80026be:	3418      	adds	r4, #24
 80026c0:	f107 030c 	add.w	r3, r7, #12
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 f98f 	bl	80029e8 <_ZNSaIcEC1Ev>
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	461a      	mov	r2, r3
 80026d0:	4910      	ldr	r1, [pc, #64]	; (8002714 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80026d2:	4620      	mov	r0, r4
 80026d4:	f000 f9f0 	bl	8002ab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80026d8:	f107 030c 	add.w	r3, r7, #12
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f984 	bl	80029ea <_ZNSaIcED1Ev>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10d      	bne.n	8002704 <_Z41__static_initialization_and_destruction_0ii+0x84>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d108      	bne.n	8002704 <_Z41__static_initialization_and_destruction_0ii+0x84>
 80026f2:	4c09      	ldr	r4, [pc, #36]	; (8002718 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80026f6:	429c      	cmp	r4, r3
 80026f8:	d004      	beq.n	8002704 <_Z41__static_initialization_and_destruction_0ii+0x84>
 80026fa:	3c18      	subs	r4, #24
 80026fc:	4620      	mov	r0, r4
 80026fe:	f000 f9b1 	bl	8002a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002702:	e7f7      	b.n	80026f4 <_Z41__static_initialization_and_destruction_0ii+0x74>
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	bd90      	pop	{r4, r7, pc}
 800270c:	200000e0 	.word	0x200000e0
 8002710:	08002e54 	.word	0x08002e54
 8002714:	08002e5c 	.word	0x08002e5c
 8002718:	20000110 	.word	0x20000110

0800271c <_GLOBAL__sub_I_stm32F446>:
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
 8002720:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002724:	2001      	movs	r0, #1
 8002726:	f7ff ffab 	bl	8002680 <_Z41__static_initialization_and_destruction_0ii>
 800272a:	bd80      	pop	{r7, pc}

0800272c <_GLOBAL__sub_D_stm32F446>:
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
 8002730:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002734:	2000      	movs	r0, #0
 8002736:	f7ff ffa3 	bl	8002680 <_Z41__static_initialization_and_destruction_0ii>
 800273a:	bd80      	pop	{r7, pc}

0800273c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
	return 1;
 8002740:	2301      	movs	r3, #1
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <_kill>:

int _kill(int pid, int sig)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002756:	f000 f9df 	bl	8002b18 <__errno>
 800275a:	4603      	mov	r3, r0
 800275c:	2216      	movs	r2, #22
 800275e:	601a      	str	r2, [r3, #0]
	return -1;
 8002760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <_exit>:

void _exit (int status)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002774:	f04f 31ff 	mov.w	r1, #4294967295
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ffe7 	bl	800274c <_kill>
	while (1) {}		/* Make sure we hang here */
 800277e:	e7fe      	b.n	800277e <_exit+0x12>

08002780 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <_sbrk+0x50>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <_sbrk+0x16>
		heap_end = &end;
 8002790:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <_sbrk+0x50>)
 8002792:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <_sbrk+0x54>)
 8002794:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <_sbrk+0x50>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <_sbrk+0x50>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4413      	add	r3, r2
 80027a4:	466a      	mov	r2, sp
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d907      	bls.n	80027ba <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80027aa:	f000 f9b5 	bl	8002b18 <__errno>
 80027ae:	4603      	mov	r3, r0
 80027b0:	220c      	movs	r2, #12
 80027b2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80027b4:	f04f 33ff 	mov.w	r3, #4294967295
 80027b8:	e006      	b.n	80027c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <_sbrk+0x50>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	4a03      	ldr	r2, [pc, #12]	; (80027d0 <_sbrk+0x50>)
 80027c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000140 	.word	0x20000140
 80027d4:	20000160 	.word	0x20000160

080027d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027dc:	4b16      	ldr	r3, [pc, #88]	; (8002838 <SystemInit+0x60>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e2:	4a15      	ldr	r2, [pc, #84]	; (8002838 <SystemInit+0x60>)
 80027e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <SystemInit+0x64>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a12      	ldr	r2, [pc, #72]	; (800283c <SystemInit+0x64>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <SystemInit+0x64>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80027fe:	4b0f      	ldr	r3, [pc, #60]	; (800283c <SystemInit+0x64>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a0e      	ldr	r2, [pc, #56]	; (800283c <SystemInit+0x64>)
 8002804:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <SystemInit+0x64>)
 8002810:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <SystemInit+0x68>)
 8002812:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <SystemInit+0x64>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a08      	ldr	r2, [pc, #32]	; (800283c <SystemInit+0x64>)
 800281a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <SystemInit+0x64>)
 8002822:	2200      	movs	r2, #0
 8002824:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002826:	f000 f80d 	bl	8002844 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800282a:	4b03      	ldr	r3, [pc, #12]	; (8002838 <SystemInit+0x60>)
 800282c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002830:	609a      	str	r2, [r3, #8]
#endif
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	e000ed00 	.word	0xe000ed00
 800283c:	40023800 	.word	0x40023800
 8002840:	24003010 	.word	0x24003010

08002844 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	2300      	movs	r3, #0
 8002850:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002852:	4b43      	ldr	r3, [pc, #268]	; (8002960 <SetSysClock+0x11c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a42      	ldr	r2, [pc, #264]	; (8002960 <SetSysClock+0x11c>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800285e:	4b40      	ldr	r3, [pc, #256]	; (8002960 <SetSysClock+0x11c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3301      	adds	r3, #1
 800286c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d103      	bne.n	800287c <SetSysClock+0x38>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800287a:	d1f0      	bne.n	800285e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800287c:	4b38      	ldr	r3, [pc, #224]	; (8002960 <SetSysClock+0x11c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002888:	2301      	movs	r3, #1
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	e001      	b.n	8002892 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800288e:	2300      	movs	r3, #0
 8002890:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d15c      	bne.n	8002952 <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002898:	4b31      	ldr	r3, [pc, #196]	; (8002960 <SetSysClock+0x11c>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	4a30      	ldr	r2, [pc, #192]	; (8002960 <SetSysClock+0x11c>)
 800289e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80028a4:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <SetSysClock+0x120>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a2e      	ldr	r2, [pc, #184]	; (8002964 <SetSysClock+0x120>)
 80028aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028ae:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80028b0:	4b2b      	ldr	r3, [pc, #172]	; (8002960 <SetSysClock+0x11c>)
 80028b2:	4a2b      	ldr	r2, [pc, #172]	; (8002960 <SetSysClock+0x11c>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80028b8:	4b29      	ldr	r3, [pc, #164]	; (8002960 <SetSysClock+0x11c>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4a28      	ldr	r2, [pc, #160]	; (8002960 <SetSysClock+0x11c>)
 80028be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80028c4:	4b26      	ldr	r3, [pc, #152]	; (8002960 <SetSysClock+0x11c>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4a25      	ldr	r2, [pc, #148]	; (8002960 <SetSysClock+0x11c>)
 80028ca:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80028ce:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80028d0:	4b23      	ldr	r3, [pc, #140]	; (8002960 <SetSysClock+0x11c>)
 80028d2:	4a25      	ldr	r2, [pc, #148]	; (8002968 <SetSysClock+0x124>)
 80028d4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80028d6:	4b22      	ldr	r3, [pc, #136]	; (8002960 <SetSysClock+0x11c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a21      	ldr	r2, [pc, #132]	; (8002960 <SetSysClock+0x11c>)
 80028dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80028e2:	bf00      	nop
 80028e4:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <SetSysClock+0x11c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f9      	beq.n	80028e4 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 80028f0:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <SetSysClock+0x120>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1b      	ldr	r2, [pc, #108]	; (8002964 <SetSysClock+0x120>)
 80028f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fa:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 80028fc:	bf00      	nop
 80028fe:	4b19      	ldr	r3, [pc, #100]	; (8002964 <SetSysClock+0x120>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f9      	beq.n	80028fe <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <SetSysClock+0x120>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a15      	ldr	r2, [pc, #84]	; (8002964 <SetSysClock+0x120>)
 8002910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002914:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8002916:	bf00      	nop
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <SetSysClock+0x120>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f9      	beq.n	8002918 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <SetSysClock+0x128>)
 8002926:	f240 7205 	movw	r2, #1797	; 0x705
 800292a:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <SetSysClock+0x11c>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a0b      	ldr	r2, [pc, #44]	; (8002960 <SetSysClock+0x11c>)
 8002932:	f023 0303 	bic.w	r3, r3, #3
 8002936:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <SetSysClock+0x11c>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4a08      	ldr	r2, [pc, #32]	; (8002960 <SetSysClock+0x11c>)
 800293e:	f043 0302 	orr.w	r3, r3, #2
 8002942:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002944:	bf00      	nop
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <SetSysClock+0x11c>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b08      	cmp	r3, #8
 8002950:	d1f9      	bne.n	8002946 <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	40007000 	.word	0x40007000
 8002968:	77405a08 	.word	0x77405a08
 800296c:	40023c00 	.word	0x40023c00

08002970 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002970:	480d      	ldr	r0, [pc, #52]	; (80029a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002972:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002974:	480d      	ldr	r0, [pc, #52]	; (80029ac <LoopForever+0x6>)
  ldr r1, =_edata
 8002976:	490e      	ldr	r1, [pc, #56]	; (80029b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002978:	4a0e      	ldr	r2, [pc, #56]	; (80029b4 <LoopForever+0xe>)
  movs r3, #0
 800297a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800297c:	e002      	b.n	8002984 <LoopCopyDataInit>

0800297e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002982:	3304      	adds	r3, #4

08002984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002988:	d3f9      	bcc.n	800297e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800298a:	4a0b      	ldr	r2, [pc, #44]	; (80029b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800298c:	4c0b      	ldr	r4, [pc, #44]	; (80029bc <LoopForever+0x16>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002990:	e001      	b.n	8002996 <LoopFillZerobss>

08002992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002994:	3204      	adds	r2, #4

08002996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002998:	d3fb      	bcc.n	8002992 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800299a:	f7ff ff1d 	bl	80027d8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800299e:	f000 f8c1 	bl	8002b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029a2:	f7ff fb61 	bl	8002068 <main>

080029a6 <LoopForever>:

LoopForever:
    b LoopForever
 80029a6:	e7fe      	b.n	80029a6 <LoopForever>
  ldr   r0, =_estack
 80029a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80029b4:	08002ec8 	.word	0x08002ec8
  ldr r2, =_sbss
 80029b8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80029bc:	20000160 	.word	0x20000160

080029c0 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029c0:	e7fe      	b.n	80029c0 <ADC_IRQHandler>

080029c2 <_ZdlPvj>:
 80029c2:	f000 b88f 	b.w	8002ae4 <_ZdlPv>

080029c6 <_Znwj>:
 80029c6:	2801      	cmp	r0, #1
 80029c8:	bf38      	it	cc
 80029ca:	2001      	movcc	r0, #1
 80029cc:	b510      	push	{r4, lr}
 80029ce:	4604      	mov	r4, r0
 80029d0:	4620      	mov	r0, r4
 80029d2:	f000 f8cb 	bl	8002b6c <malloc>
 80029d6:	b930      	cbnz	r0, 80029e6 <_Znwj+0x20>
 80029d8:	f000 f886 	bl	8002ae8 <_ZSt15get_new_handlerv>
 80029dc:	b908      	cbnz	r0, 80029e2 <_Znwj+0x1c>
 80029de:	f000 f894 	bl	8002b0a <abort>
 80029e2:	4780      	blx	r0
 80029e4:	e7f4      	b.n	80029d0 <_Znwj+0xa>
 80029e6:	bd10      	pop	{r4, pc}

080029e8 <_ZNSaIcEC1Ev>:
 80029e8:	4770      	bx	lr

080029ea <_ZNSaIcED1Ev>:
 80029ea:	4770      	bx	lr

080029ec <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80029ec:	b10a      	cbz	r2, 80029f2 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80029ee:	f000 b8cd 	b.w	8002b8c <memcpy>
 80029f2:	4770      	bx	lr

080029f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80029f4:	b508      	push	{r3, lr}
 80029f6:	680b      	ldr	r3, [r1, #0]
 80029f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fc:	d302      	bcc.n	8002a04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80029fe:	480d      	ldr	r0, [pc, #52]	; (8002a34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8002a00:	f000 f880 	bl	8002b04 <_ZSt20__throw_length_errorPKc>
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d90b      	bls.n	8002a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8002a08:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8002a0c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8002a10:	d206      	bcs.n	8002a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8002a12:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a16:	bf2a      	itet	cs
 8002a18:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8002a1c:	6008      	strcc	r0, [r1, #0]
 8002a1e:	600b      	strcs	r3, [r1, #0]
 8002a20:	6808      	ldr	r0, [r1, #0]
 8002a22:	3001      	adds	r0, #1
 8002a24:	d501      	bpl.n	8002a2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8002a26:	f000 f867 	bl	8002af8 <_ZSt17__throw_bad_allocv>
 8002a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002a2e:	f7ff bfca 	b.w	80029c6 <_Znwj>
 8002a32:	bf00      	nop
 8002a34:	08002e74 	.word	0x08002e74

08002a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8002a38:	f850 3b08 	ldr.w	r3, [r0], #8
 8002a3c:	4283      	cmp	r3, r0
 8002a3e:	d002      	beq.n	8002a46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 b84f 	b.w	8002ae4 <_ZdlPv>
 8002a46:	4770      	bx	lr

08002a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8002a48:	2a01      	cmp	r2, #1
 8002a4a:	b510      	push	{r4, lr}
 8002a4c:	d102      	bne.n	8002a54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8002a4e:	780a      	ldrb	r2, [r1, #0]
 8002a50:	7002      	strb	r2, [r0, #0]
 8002a52:	bd10      	pop	{r4, pc}
 8002a54:	f7ff ffca 	bl	80029ec <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8002a58:	e7fb      	b.n	8002a52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08002a5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8002a5a:	b508      	push	{r3, lr}
 8002a5c:	1a52      	subs	r2, r2, r1
 8002a5e:	f7ff fff3 	bl	8002a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002a62:	bd08      	pop	{r3, pc}

08002a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8002a64:	b510      	push	{r4, lr}
 8002a66:	4604      	mov	r4, r0
 8002a68:	f7ff ffe6 	bl	8002a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	bd10      	pop	{r4, pc}

08002a70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8002a70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a72:	4604      	mov	r4, r0
 8002a74:	4616      	mov	r6, r2
 8002a76:	460d      	mov	r5, r1
 8002a78:	b919      	cbnz	r1, 8002a82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8002a7a:	b112      	cbz	r2, 8002a82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8002a7c:	480d      	ldr	r0, [pc, #52]	; (8002ab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8002a7e:	f000 f83e 	bl	8002afe <_ZSt19__throw_logic_errorPKc>
 8002a82:	1b73      	subs	r3, r6, r5
 8002a84:	2b0f      	cmp	r3, #15
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	d907      	bls.n	8002a9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	a901      	add	r1, sp, #4
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f7ff ffb0 	bl	80029f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002a94:	9b01      	ldr	r3, [sp, #4]
 8002a96:	6020      	str	r0, [r4, #0]
 8002a98:	60a3      	str	r3, [r4, #8]
 8002a9a:	4632      	mov	r2, r6
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	6820      	ldr	r0, [r4, #0]
 8002aa0:	f7ff ffdb 	bl	8002a5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8002aa4:	9b01      	ldr	r3, [sp, #4]
 8002aa6:	6822      	ldr	r2, [r4, #0]
 8002aa8:	6063      	str	r3, [r4, #4]
 8002aaa:	2100      	movs	r1, #0
 8002aac:	54d1      	strb	r1, [r2, r3]
 8002aae:	b002      	add	sp, #8
 8002ab0:	bd70      	pop	{r4, r5, r6, pc}
 8002ab2:	bf00      	nop
 8002ab4:	08002e8c 	.word	0x08002e8c

08002ab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8002ab8:	b538      	push	{r3, r4, r5, lr}
 8002aba:	f100 0308 	add.w	r3, r0, #8
 8002abe:	4604      	mov	r4, r0
 8002ac0:	6003      	str	r3, [r0, #0]
 8002ac2:	460d      	mov	r5, r1
 8002ac4:	b159      	cbz	r1, 8002ade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8002ac6:	4608      	mov	r0, r1
 8002ac8:	f7fd fb9c 	bl	8000204 <strlen>
 8002acc:	182a      	adds	r2, r5, r0
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	f7ff ffcb 	bl	8002a70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8002ada:	4620      	mov	r0, r4
 8002adc:	bd38      	pop	{r3, r4, r5, pc}
 8002ade:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae2:	e7f4      	b.n	8002ace <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08002ae4 <_ZdlPv>:
 8002ae4:	f000 b84a 	b.w	8002b7c <free>

08002ae8 <_ZSt15get_new_handlerv>:
 8002ae8:	4b02      	ldr	r3, [pc, #8]	; (8002af4 <_ZSt15get_new_handlerv+0xc>)
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	f3bf 8f5b 	dmb	ish
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	20000144 	.word	0x20000144

08002af8 <_ZSt17__throw_bad_allocv>:
 8002af8:	b508      	push	{r3, lr}
 8002afa:	f000 f806 	bl	8002b0a <abort>

08002afe <_ZSt19__throw_logic_errorPKc>:
 8002afe:	b508      	push	{r3, lr}
 8002b00:	f000 f803 	bl	8002b0a <abort>

08002b04 <_ZSt20__throw_length_errorPKc>:
 8002b04:	b508      	push	{r3, lr}
 8002b06:	f000 f800 	bl	8002b0a <abort>

08002b0a <abort>:
 8002b0a:	b508      	push	{r3, lr}
 8002b0c:	2006      	movs	r0, #6
 8002b0e:	f000 f92d 	bl	8002d6c <raise>
 8002b12:	2001      	movs	r0, #1
 8002b14:	f7ff fe2a 	bl	800276c <_exit>

08002b18 <__errno>:
 8002b18:	4b01      	ldr	r3, [pc, #4]	; (8002b20 <__errno+0x8>)
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000030 	.word	0x20000030

08002b24 <__libc_init_array>:
 8002b24:	b570      	push	{r4, r5, r6, lr}
 8002b26:	4d0d      	ldr	r5, [pc, #52]	; (8002b5c <__libc_init_array+0x38>)
 8002b28:	4c0d      	ldr	r4, [pc, #52]	; (8002b60 <__libc_init_array+0x3c>)
 8002b2a:	1b64      	subs	r4, r4, r5
 8002b2c:	10a4      	asrs	r4, r4, #2
 8002b2e:	2600      	movs	r6, #0
 8002b30:	42a6      	cmp	r6, r4
 8002b32:	d109      	bne.n	8002b48 <__libc_init_array+0x24>
 8002b34:	4d0b      	ldr	r5, [pc, #44]	; (8002b64 <__libc_init_array+0x40>)
 8002b36:	4c0c      	ldr	r4, [pc, #48]	; (8002b68 <__libc_init_array+0x44>)
 8002b38:	f000 f942 	bl	8002dc0 <_init>
 8002b3c:	1b64      	subs	r4, r4, r5
 8002b3e:	10a4      	asrs	r4, r4, #2
 8002b40:	2600      	movs	r6, #0
 8002b42:	42a6      	cmp	r6, r4
 8002b44:	d105      	bne.n	8002b52 <__libc_init_array+0x2e>
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
 8002b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b4c:	4798      	blx	r3
 8002b4e:	3601      	adds	r6, #1
 8002b50:	e7ee      	b.n	8002b30 <__libc_init_array+0xc>
 8002b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b56:	4798      	blx	r3
 8002b58:	3601      	adds	r6, #1
 8002b5a:	e7f2      	b.n	8002b42 <__libc_init_array+0x1e>
 8002b5c:	08002eb8 	.word	0x08002eb8
 8002b60:	08002eb8 	.word	0x08002eb8
 8002b64:	08002eb8 	.word	0x08002eb8
 8002b68:	08002ec0 	.word	0x08002ec0

08002b6c <malloc>:
 8002b6c:	4b02      	ldr	r3, [pc, #8]	; (8002b78 <malloc+0xc>)
 8002b6e:	4601      	mov	r1, r0
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	f000 b869 	b.w	8002c48 <_malloc_r>
 8002b76:	bf00      	nop
 8002b78:	20000030 	.word	0x20000030

08002b7c <free>:
 8002b7c:	4b02      	ldr	r3, [pc, #8]	; (8002b88 <free+0xc>)
 8002b7e:	4601      	mov	r1, r0
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	f000 b811 	b.w	8002ba8 <_free_r>
 8002b86:	bf00      	nop
 8002b88:	20000030 	.word	0x20000030

08002b8c <memcpy>:
 8002b8c:	440a      	add	r2, r1
 8002b8e:	4291      	cmp	r1, r2
 8002b90:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b94:	d100      	bne.n	8002b98 <memcpy+0xc>
 8002b96:	4770      	bx	lr
 8002b98:	b510      	push	{r4, lr}
 8002b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ba2:	4291      	cmp	r1, r2
 8002ba4:	d1f9      	bne.n	8002b9a <memcpy+0xe>
 8002ba6:	bd10      	pop	{r4, pc}

08002ba8 <_free_r>:
 8002ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002baa:	2900      	cmp	r1, #0
 8002bac:	d048      	beq.n	8002c40 <_free_r+0x98>
 8002bae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bb2:	9001      	str	r0, [sp, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f1a1 0404 	sub.w	r4, r1, #4
 8002bba:	bfb8      	it	lt
 8002bbc:	18e4      	addlt	r4, r4, r3
 8002bbe:	f000 f8f1 	bl	8002da4 <__malloc_lock>
 8002bc2:	4a20      	ldr	r2, [pc, #128]	; (8002c44 <_free_r+0x9c>)
 8002bc4:	9801      	ldr	r0, [sp, #4]
 8002bc6:	6813      	ldr	r3, [r2, #0]
 8002bc8:	4615      	mov	r5, r2
 8002bca:	b933      	cbnz	r3, 8002bda <_free_r+0x32>
 8002bcc:	6063      	str	r3, [r4, #4]
 8002bce:	6014      	str	r4, [r2, #0]
 8002bd0:	b003      	add	sp, #12
 8002bd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002bd6:	f000 b8eb 	b.w	8002db0 <__malloc_unlock>
 8002bda:	42a3      	cmp	r3, r4
 8002bdc:	d90b      	bls.n	8002bf6 <_free_r+0x4e>
 8002bde:	6821      	ldr	r1, [r4, #0]
 8002be0:	1862      	adds	r2, r4, r1
 8002be2:	4293      	cmp	r3, r2
 8002be4:	bf04      	itt	eq
 8002be6:	681a      	ldreq	r2, [r3, #0]
 8002be8:	685b      	ldreq	r3, [r3, #4]
 8002bea:	6063      	str	r3, [r4, #4]
 8002bec:	bf04      	itt	eq
 8002bee:	1852      	addeq	r2, r2, r1
 8002bf0:	6022      	streq	r2, [r4, #0]
 8002bf2:	602c      	str	r4, [r5, #0]
 8002bf4:	e7ec      	b.n	8002bd0 <_free_r+0x28>
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	b10b      	cbz	r3, 8002c00 <_free_r+0x58>
 8002bfc:	42a3      	cmp	r3, r4
 8002bfe:	d9fa      	bls.n	8002bf6 <_free_r+0x4e>
 8002c00:	6811      	ldr	r1, [r2, #0]
 8002c02:	1855      	adds	r5, r2, r1
 8002c04:	42a5      	cmp	r5, r4
 8002c06:	d10b      	bne.n	8002c20 <_free_r+0x78>
 8002c08:	6824      	ldr	r4, [r4, #0]
 8002c0a:	4421      	add	r1, r4
 8002c0c:	1854      	adds	r4, r2, r1
 8002c0e:	42a3      	cmp	r3, r4
 8002c10:	6011      	str	r1, [r2, #0]
 8002c12:	d1dd      	bne.n	8002bd0 <_free_r+0x28>
 8002c14:	681c      	ldr	r4, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	6053      	str	r3, [r2, #4]
 8002c1a:	4421      	add	r1, r4
 8002c1c:	6011      	str	r1, [r2, #0]
 8002c1e:	e7d7      	b.n	8002bd0 <_free_r+0x28>
 8002c20:	d902      	bls.n	8002c28 <_free_r+0x80>
 8002c22:	230c      	movs	r3, #12
 8002c24:	6003      	str	r3, [r0, #0]
 8002c26:	e7d3      	b.n	8002bd0 <_free_r+0x28>
 8002c28:	6825      	ldr	r5, [r4, #0]
 8002c2a:	1961      	adds	r1, r4, r5
 8002c2c:	428b      	cmp	r3, r1
 8002c2e:	bf04      	itt	eq
 8002c30:	6819      	ldreq	r1, [r3, #0]
 8002c32:	685b      	ldreq	r3, [r3, #4]
 8002c34:	6063      	str	r3, [r4, #4]
 8002c36:	bf04      	itt	eq
 8002c38:	1949      	addeq	r1, r1, r5
 8002c3a:	6021      	streq	r1, [r4, #0]
 8002c3c:	6054      	str	r4, [r2, #4]
 8002c3e:	e7c7      	b.n	8002bd0 <_free_r+0x28>
 8002c40:	b003      	add	sp, #12
 8002c42:	bd30      	pop	{r4, r5, pc}
 8002c44:	20000148 	.word	0x20000148

08002c48 <_malloc_r>:
 8002c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4a:	1ccd      	adds	r5, r1, #3
 8002c4c:	f025 0503 	bic.w	r5, r5, #3
 8002c50:	3508      	adds	r5, #8
 8002c52:	2d0c      	cmp	r5, #12
 8002c54:	bf38      	it	cc
 8002c56:	250c      	movcc	r5, #12
 8002c58:	2d00      	cmp	r5, #0
 8002c5a:	4606      	mov	r6, r0
 8002c5c:	db01      	blt.n	8002c62 <_malloc_r+0x1a>
 8002c5e:	42a9      	cmp	r1, r5
 8002c60:	d903      	bls.n	8002c6a <_malloc_r+0x22>
 8002c62:	230c      	movs	r3, #12
 8002c64:	6033      	str	r3, [r6, #0]
 8002c66:	2000      	movs	r0, #0
 8002c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c6a:	f000 f89b 	bl	8002da4 <__malloc_lock>
 8002c6e:	4921      	ldr	r1, [pc, #132]	; (8002cf4 <_malloc_r+0xac>)
 8002c70:	680a      	ldr	r2, [r1, #0]
 8002c72:	4614      	mov	r4, r2
 8002c74:	b99c      	cbnz	r4, 8002c9e <_malloc_r+0x56>
 8002c76:	4f20      	ldr	r7, [pc, #128]	; (8002cf8 <_malloc_r+0xb0>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	b923      	cbnz	r3, 8002c86 <_malloc_r+0x3e>
 8002c7c:	4621      	mov	r1, r4
 8002c7e:	4630      	mov	r0, r6
 8002c80:	f000 f83c 	bl	8002cfc <_sbrk_r>
 8002c84:	6038      	str	r0, [r7, #0]
 8002c86:	4629      	mov	r1, r5
 8002c88:	4630      	mov	r0, r6
 8002c8a:	f000 f837 	bl	8002cfc <_sbrk_r>
 8002c8e:	1c43      	adds	r3, r0, #1
 8002c90:	d123      	bne.n	8002cda <_malloc_r+0x92>
 8002c92:	230c      	movs	r3, #12
 8002c94:	6033      	str	r3, [r6, #0]
 8002c96:	4630      	mov	r0, r6
 8002c98:	f000 f88a 	bl	8002db0 <__malloc_unlock>
 8002c9c:	e7e3      	b.n	8002c66 <_malloc_r+0x1e>
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	1b5b      	subs	r3, r3, r5
 8002ca2:	d417      	bmi.n	8002cd4 <_malloc_r+0x8c>
 8002ca4:	2b0b      	cmp	r3, #11
 8002ca6:	d903      	bls.n	8002cb0 <_malloc_r+0x68>
 8002ca8:	6023      	str	r3, [r4, #0]
 8002caa:	441c      	add	r4, r3
 8002cac:	6025      	str	r5, [r4, #0]
 8002cae:	e004      	b.n	8002cba <_malloc_r+0x72>
 8002cb0:	6863      	ldr	r3, [r4, #4]
 8002cb2:	42a2      	cmp	r2, r4
 8002cb4:	bf0c      	ite	eq
 8002cb6:	600b      	streq	r3, [r1, #0]
 8002cb8:	6053      	strne	r3, [r2, #4]
 8002cba:	4630      	mov	r0, r6
 8002cbc:	f000 f878 	bl	8002db0 <__malloc_unlock>
 8002cc0:	f104 000b 	add.w	r0, r4, #11
 8002cc4:	1d23      	adds	r3, r4, #4
 8002cc6:	f020 0007 	bic.w	r0, r0, #7
 8002cca:	1ac2      	subs	r2, r0, r3
 8002ccc:	d0cc      	beq.n	8002c68 <_malloc_r+0x20>
 8002cce:	1a1b      	subs	r3, r3, r0
 8002cd0:	50a3      	str	r3, [r4, r2]
 8002cd2:	e7c9      	b.n	8002c68 <_malloc_r+0x20>
 8002cd4:	4622      	mov	r2, r4
 8002cd6:	6864      	ldr	r4, [r4, #4]
 8002cd8:	e7cc      	b.n	8002c74 <_malloc_r+0x2c>
 8002cda:	1cc4      	adds	r4, r0, #3
 8002cdc:	f024 0403 	bic.w	r4, r4, #3
 8002ce0:	42a0      	cmp	r0, r4
 8002ce2:	d0e3      	beq.n	8002cac <_malloc_r+0x64>
 8002ce4:	1a21      	subs	r1, r4, r0
 8002ce6:	4630      	mov	r0, r6
 8002ce8:	f000 f808 	bl	8002cfc <_sbrk_r>
 8002cec:	3001      	adds	r0, #1
 8002cee:	d1dd      	bne.n	8002cac <_malloc_r+0x64>
 8002cf0:	e7cf      	b.n	8002c92 <_malloc_r+0x4a>
 8002cf2:	bf00      	nop
 8002cf4:	20000148 	.word	0x20000148
 8002cf8:	2000014c 	.word	0x2000014c

08002cfc <_sbrk_r>:
 8002cfc:	b538      	push	{r3, r4, r5, lr}
 8002cfe:	4d06      	ldr	r5, [pc, #24]	; (8002d18 <_sbrk_r+0x1c>)
 8002d00:	2300      	movs	r3, #0
 8002d02:	4604      	mov	r4, r0
 8002d04:	4608      	mov	r0, r1
 8002d06:	602b      	str	r3, [r5, #0]
 8002d08:	f7ff fd3a 	bl	8002780 <_sbrk>
 8002d0c:	1c43      	adds	r3, r0, #1
 8002d0e:	d102      	bne.n	8002d16 <_sbrk_r+0x1a>
 8002d10:	682b      	ldr	r3, [r5, #0]
 8002d12:	b103      	cbz	r3, 8002d16 <_sbrk_r+0x1a>
 8002d14:	6023      	str	r3, [r4, #0]
 8002d16:	bd38      	pop	{r3, r4, r5, pc}
 8002d18:	20000150 	.word	0x20000150

08002d1c <_raise_r>:
 8002d1c:	291f      	cmp	r1, #31
 8002d1e:	b538      	push	{r3, r4, r5, lr}
 8002d20:	4604      	mov	r4, r0
 8002d22:	460d      	mov	r5, r1
 8002d24:	d904      	bls.n	8002d30 <_raise_r+0x14>
 8002d26:	2316      	movs	r3, #22
 8002d28:	6003      	str	r3, [r0, #0]
 8002d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2e:	bd38      	pop	{r3, r4, r5, pc}
 8002d30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002d32:	b112      	cbz	r2, 8002d3a <_raise_r+0x1e>
 8002d34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002d38:	b94b      	cbnz	r3, 8002d4e <_raise_r+0x32>
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f000 f830 	bl	8002da0 <_getpid_r>
 8002d40:	462a      	mov	r2, r5
 8002d42:	4601      	mov	r1, r0
 8002d44:	4620      	mov	r0, r4
 8002d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d4a:	f000 b817 	b.w	8002d7c <_kill_r>
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d00a      	beq.n	8002d68 <_raise_r+0x4c>
 8002d52:	1c59      	adds	r1, r3, #1
 8002d54:	d103      	bne.n	8002d5e <_raise_r+0x42>
 8002d56:	2316      	movs	r3, #22
 8002d58:	6003      	str	r3, [r0, #0]
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	e7e7      	b.n	8002d2e <_raise_r+0x12>
 8002d5e:	2400      	movs	r4, #0
 8002d60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002d64:	4628      	mov	r0, r5
 8002d66:	4798      	blx	r3
 8002d68:	2000      	movs	r0, #0
 8002d6a:	e7e0      	b.n	8002d2e <_raise_r+0x12>

08002d6c <raise>:
 8002d6c:	4b02      	ldr	r3, [pc, #8]	; (8002d78 <raise+0xc>)
 8002d6e:	4601      	mov	r1, r0
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	f7ff bfd3 	b.w	8002d1c <_raise_r>
 8002d76:	bf00      	nop
 8002d78:	20000030 	.word	0x20000030

08002d7c <_kill_r>:
 8002d7c:	b538      	push	{r3, r4, r5, lr}
 8002d7e:	4d07      	ldr	r5, [pc, #28]	; (8002d9c <_kill_r+0x20>)
 8002d80:	2300      	movs	r3, #0
 8002d82:	4604      	mov	r4, r0
 8002d84:	4608      	mov	r0, r1
 8002d86:	4611      	mov	r1, r2
 8002d88:	602b      	str	r3, [r5, #0]
 8002d8a:	f7ff fcdf 	bl	800274c <_kill>
 8002d8e:	1c43      	adds	r3, r0, #1
 8002d90:	d102      	bne.n	8002d98 <_kill_r+0x1c>
 8002d92:	682b      	ldr	r3, [r5, #0]
 8002d94:	b103      	cbz	r3, 8002d98 <_kill_r+0x1c>
 8002d96:	6023      	str	r3, [r4, #0]
 8002d98:	bd38      	pop	{r3, r4, r5, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000150 	.word	0x20000150

08002da0 <_getpid_r>:
 8002da0:	f7ff bccc 	b.w	800273c <_getpid>

08002da4 <__malloc_lock>:
 8002da4:	4801      	ldr	r0, [pc, #4]	; (8002dac <__malloc_lock+0x8>)
 8002da6:	f000 b809 	b.w	8002dbc <__retarget_lock_acquire_recursive>
 8002daa:	bf00      	nop
 8002dac:	20000158 	.word	0x20000158

08002db0 <__malloc_unlock>:
 8002db0:	4801      	ldr	r0, [pc, #4]	; (8002db8 <__malloc_unlock+0x8>)
 8002db2:	f000 b804 	b.w	8002dbe <__retarget_lock_release_recursive>
 8002db6:	bf00      	nop
 8002db8:	20000158 	.word	0x20000158

08002dbc <__retarget_lock_acquire_recursive>:
 8002dbc:	4770      	bx	lr

08002dbe <__retarget_lock_release_recursive>:
 8002dbe:	4770      	bx	lr

08002dc0 <_init>:
 8002dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc2:	bf00      	nop
 8002dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc6:	bc08      	pop	{r3}
 8002dc8:	469e      	mov	lr, r3
 8002dca:	4770      	bx	lr

08002dcc <_fini>:
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dce:	bf00      	nop
 8002dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dd2:	bc08      	pop	{r3}
 8002dd4:	469e      	mov	lr, r3
 8002dd6:	4770      	bx	lr
