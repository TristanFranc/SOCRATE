
SOCRATE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d20  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ff8  08003ff8  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08003ff8  08003ff8  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ff8  08003ff8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000094  0800409c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000178  0800409c  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f91e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f64  00000000  00000000  0002f9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000620  00000000  00000000  00032948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000538  00000000  00000000  00032f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000070c8  00000000  00000000  000334a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a184  00000000  00000000  0003a568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f326  00000000  00000000  000446ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c3a12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f58  00000000  00000000  000c3a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000094 	.word	0x20000094
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003ed0 	.word	0x08003ed0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000098 	.word	0x20000098
 8000204:	08003ed0 	.word	0x08003ed0

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2iz>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d215      	bcs.n	800081a <__aeabi_d2iz+0x36>
 80007ee:	d511      	bpl.n	8000814 <__aeabi_d2iz+0x30>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d912      	bls.n	8000820 <__aeabi_d2iz+0x3c>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080a:	fa23 f002 	lsr.w	r0, r3, r2
 800080e:	bf18      	it	ne
 8000810:	4240      	negne	r0, r0
 8000812:	4770      	bx	lr
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	4770      	bx	lr
 800081a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800081e:	d105      	bne.n	800082c <__aeabi_d2iz+0x48>
 8000820:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000824:	bf08      	it	eq
 8000826:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <_ZN15Adc1Stm32f446reC1Eh>:
 * @name   -> Adc1Stm32f446re
 * @brief  -> Constructeur de la classe
 * @param  -> noAxe: numéro de l'axe à auxquel l'adc sera associer
 * @return -> none
 */
Adc1Stm32f446re::Adc1Stm32f446re(uint8_t noAxe)
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
 8000840:	4a56      	ldr	r2, [pc, #344]	; (800099c <_ZN15Adc1Stm32f446reC1Eh+0x168>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	601a      	str	r2, [r3, #0]
{
	this->noAxe = noAxe;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	78fa      	ldrb	r2, [r7, #3]
 800084a:	711a      	strb	r2, [r3, #4]
	nbsTotalConversionADC = 1;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2201      	movs	r2, #1
 8000850:	715a      	strb	r2, [r3, #5]

	//Config ADC axe 0	(Épaule)
	configFonctionnementADC[0][0] = 'A';               			//GPIO à activer
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2241      	movs	r2, #65	; 0x41
 8000856:	609a      	str	r2, [r3, #8]
	configFonctionnementADC[0][1] = GPIO_MODER_MODER2; 			//no de la pin MODER à activer en mode analogique
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2230      	movs	r2, #48	; 0x30
 800085c:	60da      	str	r2, [r3, #12]
	configFonctionnementADC[0][2] = 1;                 			//no de l'ADC à activer
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2201      	movs	r2, #1
 8000862:	611a      	str	r2, [r3, #16]
	configFonctionnementADC[0][3] = 2;							//no du channel à activer
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2202      	movs	r2, #2
 8000868:	615a      	str	r2, [r3, #20]
	configFonctionnementADC[0][4] = 1;							//position dans la chaine de conversion
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2201      	movs	r2, #1
 800086e:	619a      	str	r2, [r3, #24]
	configFonctionnementADC[0][5] = 8;							//nbs de bit de Résolution
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2208      	movs	r2, #8
 8000874:	61da      	str	r2, [r3, #28]
	configFonctionnementADC[0][6] = CHANNEL_SAMPLING_TIME_84;	//Channel sampling time
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2204      	movs	r2, #4
 800087a:	621a      	str	r2, [r3, #32]

	//Config ADC axe 1 (Coude)
	configFonctionnementADC[1][0] = 'A';               			//GPIO à activer
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2241      	movs	r2, #65	; 0x41
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
	configFonctionnementADC[1][1] = GPIO_MODER_MODER0; 			//no de la pin MODER à activer en mode analogique
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2203      	movs	r2, #3
 8000886:	629a      	str	r2, [r3, #40]	; 0x28
	configFonctionnementADC[1][2] = 1;                 			//no de l'ADC à activer
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2201      	movs	r2, #1
 800088c:	62da      	str	r2, [r3, #44]	; 0x2c
	configFonctionnementADC[1][3] = 0;							//no du channel à activer
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2200      	movs	r2, #0
 8000892:	631a      	str	r2, [r3, #48]	; 0x30
	configFonctionnementADC[1][4] = 1;							//position dans la chaine de conversion
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2201      	movs	r2, #1
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
	configFonctionnementADC[1][5] = 8;							//nbs de bit de Résolution
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2208      	movs	r2, #8
 800089e:	639a      	str	r2, [r3, #56]	; 0x38
	configFonctionnementADC[1][6] = CHANNEL_SAMPLING_TIME_84;	//Channel sampling time
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2204      	movs	r2, #4
 80008a4:	63da      	str	r2, [r3, #60]	; 0x3c

	//Config ADC axe 2 (Pince)
	configFonctionnementADC[2][0] = 'A';               			//GPIO à activer
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2241      	movs	r2, #65	; 0x41
 80008aa:	641a      	str	r2, [r3, #64]	; 0x40
	configFonctionnementADC[2][1] = GPIO_MODER_MODER1; 			//no de la pin MODER à activer en mode analogique
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	220c      	movs	r2, #12
 80008b0:	645a      	str	r2, [r3, #68]	; 0x44
	configFonctionnementADC[2][2] = 1;                 			//no de l'ADC à activer
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2201      	movs	r2, #1
 80008b6:	649a      	str	r2, [r3, #72]	; 0x48
	configFonctionnementADC[2][3] = 1;							//no du channel à activer
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2201      	movs	r2, #1
 80008bc:	64da      	str	r2, [r3, #76]	; 0x4c
	configFonctionnementADC[2][4] = 1;							//position dans la chaine de conversion
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2201      	movs	r2, #1
 80008c2:	651a      	str	r2, [r3, #80]	; 0x50
	configFonctionnementADC[2][5] = 8;							//nbs de bit de Résolution
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2208      	movs	r2, #8
 80008c8:	655a      	str	r2, [r3, #84]	; 0x54
	configFonctionnementADC[2][6] = CHANNEL_SAMPLING_TIME_84;	//Channel sampling time
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2204      	movs	r2, #4
 80008ce:	659a      	str	r2, [r3, #88]	; 0x58

	//Config potentiometre épaule
	configFonctionnementADC[3][0] = 'A';               			//GPIO à activer
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2241      	movs	r2, #65	; 0x41
 80008d4:	65da      	str	r2, [r3, #92]	; 0x5c
	configFonctionnementADC[3][1] = GPIO_MODER_MODER5; 			//no de la pin MODER à activer en mode analogique
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80008dc:	661a      	str	r2, [r3, #96]	; 0x60
	configFonctionnementADC[3][2] = 1;                 			//no de l'ADC à activer
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2201      	movs	r2, #1
 80008e2:	665a      	str	r2, [r3, #100]	; 0x64
	configFonctionnementADC[3][3] = 5;							//no du channel à activer
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2205      	movs	r2, #5
 80008e8:	669a      	str	r2, [r3, #104]	; 0x68
	configFonctionnementADC[3][4] = 1;							//position dans la chaine de conversion
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2201      	movs	r2, #1
 80008ee:	66da      	str	r2, [r3, #108]	; 0x6c
	configFonctionnementADC[3][5] = 8;							//nbs de bit de Résolution
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2208      	movs	r2, #8
 80008f4:	671a      	str	r2, [r3, #112]	; 0x70
	configFonctionnementADC[3][6] = CHANNEL_SAMPLING_TIME_84;	//Channel sampling time
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2204      	movs	r2, #4
 80008fa:	675a      	str	r2, [r3, #116]	; 0x74

	//Config potentiometre coude
	configFonctionnementADC[4][0] = 'A';               			//GPIO à activer
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2241      	movs	r2, #65	; 0x41
 8000900:	679a      	str	r2, [r3, #120]	; 0x78
	configFonctionnementADC[4][1] = GPIO_MODER_MODER4; 			//no de la pin MODER à activer en mode analogique
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000908:	67da      	str	r2, [r3, #124]	; 0x7c
	configFonctionnementADC[4][2] = 1;                 			//no de l'ADC à activer
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2201      	movs	r2, #1
 800090e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	configFonctionnementADC[4][3] = 4;							//no du channel à activer
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2204      	movs	r2, #4
 8000916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	configFonctionnementADC[4][4] = 1;							//position dans la chaine de conversion
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2201      	movs	r2, #1
 800091e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	configFonctionnementADC[4][5] = 8;							//nbs de bit de Résolution
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2208      	movs	r2, #8
 8000926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	configFonctionnementADC[4][6] = CHANNEL_SAMPLING_TIME_84;	//Channel sampling time
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2204      	movs	r2, #4
 800092e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90


	//Config potentiometre pince
	configFonctionnementADC[5][0] = 'A';               			//GPIO à activer
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2241      	movs	r2, #65	; 0x41
 8000936:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	configFonctionnementADC[5][1] = GPIO_MODER_MODER6; 			//no de la pin MODER à activer en mode analogique
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000940:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	configFonctionnementADC[5][2] = 1;                 			//no de l'ADC à activer
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2201      	movs	r2, #1
 8000948:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	configFonctionnementADC[5][3] = 6;							//no du channel à activer
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2206      	movs	r2, #6
 8000950:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	configFonctionnementADC[5][4] = 1;							//position dans la chaine de conversion
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2201      	movs	r2, #1
 8000958:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	configFonctionnementADC[5][5] = 8;							//nbs de bit de Résolution
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2208      	movs	r2, #8
 8000960:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	configFonctionnementADC[5][6] = CHANNEL_SAMPLING_TIME_84;	//Channel sampling time
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2204      	movs	r2, #4
 8000968:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	innitADC();
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 f819 	bl	80009a4 <_ZN15Adc1Stm32f446re8innitADCEv>
	enableADC();
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f000 fa58 	bl	8000e28 <_ZN15Adc1Stm32f446re9enableADCEv>
	ADC1->SR &= ~ADC_SR_EOC;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <_ZN15Adc1Stm32f446reC1Eh+0x16c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <_ZN15Adc1Stm32f446reC1Eh+0x16c>)
 800097e:	f023 0302 	bic.w	r3, r3, #2
 8000982:	6013      	str	r3, [r2, #0]
	ADC1->SR &= ~ADC_SR_OVR;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <_ZN15Adc1Stm32f446reC1Eh+0x16c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <_ZN15Adc1Stm32f446reC1Eh+0x16c>)
 800098a:	f023 0320 	bic.w	r3, r3, #32
 800098e:	6013      	str	r3, [r2, #0]

}
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	08003ef0 	.word	0x08003ef0
 80009a0:	40012000 	.word	0x40012000

080009a4 <_ZN15Adc1Stm32f446re8innitADCEv>:
 * @brief  -> Initialise tout les registre necessaire aux fonctionnement de l'ADC
 * @param  -> none
 * @return -> none
 */
void Adc1Stm32f446re::innitADC()
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;					//Act de la clock sur l'adc
 80009ac:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <_ZN15Adc1Stm32f446re8innitADCEv+0xd0>)
 80009ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b0:	4a30      	ldr	r2, [pc, #192]	; (8000a74 <_ZN15Adc1Stm32f446re8innitADCEv+0xd0>)
 80009b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b6:	6453      	str	r3, [r2, #68]	; 0x44
	setGPIO();											//seeting du GPIO demander
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f000 f861 	bl	8000a80 <_ZN15Adc1Stm32f446re7setGPIOEv>

	ADC->CCR |= ADC_CCR_ADCPRE_0;						//Set prescaler clock ADC
 80009be:	4b2e      	ldr	r3, [pc, #184]	; (8000a78 <_ZN15Adc1Stm32f446re8innitADCEv+0xd4>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	4a2d      	ldr	r2, [pc, #180]	; (8000a78 <_ZN15Adc1Stm32f446re8innitADCEv+0xd4>)
 80009c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009c8:	6053      	str	r3, [r2, #4]
	ADC1->CR1 |= ADC_CR1_SCAN;							//Scan mode
 80009ca:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <_ZN15Adc1Stm32f446re8innitADCEv+0xd8>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	4a2b      	ldr	r2, [pc, #172]	; (8000a7c <_ZN15Adc1Stm32f446re8innitADCEv+0xd8>)
 80009d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d4:	6053      	str	r3, [r2, #4]

	setResolution(configFonctionnementADC[noAxe][5]);	// Bit Résolution
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	791b      	ldrb	r3, [r3, #4]
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	4613      	mov	r3, r2
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	1a9b      	subs	r3, r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	440b      	add	r3, r1
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4619      	mov	r1, r3
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f000 f8ce 	bl	8000b90 <_ZN15Adc1Stm32f446re13setResolutionEh>

	//	ADC1->CR2 |= ADC_CR2_CONT;	 						//Mode conversion continue
	ADC1->CR2 &= ~(ADC_CR2_CONT);						//Mode single
 80009f4:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <_ZN15Adc1Stm32f446re8innitADCEv+0xd8>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	4a20      	ldr	r2, [pc, #128]	; (8000a7c <_ZN15Adc1Stm32f446re8innitADCEv+0xd8>)
 80009fa:	f023 0302 	bic.w	r3, r3, #2
 80009fe:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EOCS;							// Flag EOC après chaque conversion
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <_ZN15Adc1Stm32f446re8innitADCEv+0xd8>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	4a1d      	ldr	r2, [pc, #116]	; (8000a7c <_ZN15Adc1Stm32f446re8innitADCEv+0xd8>)
 8000a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0a:	6093      	str	r3, [r2, #8]

	ADC1->CR2 &= ~ADC_CR2_ALIGN; 						//Alignement registre à droite
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <_ZN15Adc1Stm32f446re8innitADCEv+0xd8>)
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	4a1a      	ldr	r2, [pc, #104]	; (8000a7c <_ZN15Adc1Stm32f446re8innitADCEv+0xd8>)
 8000a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a16:	6093      	str	r3, [r2, #8]

	setADCConversionNbsCycle(); //sampling time par cycle
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 f981 	bl	8000d20 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv>

	ADC1->SQR1 &= ~(0b1111 << 20); 	// remise à zéro  du nbs de conversion
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <_ZN15Adc1Stm32f446re8innitADCEv+0xd8>)
 8000a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a22:	4a16      	ldr	r2, [pc, #88]	; (8000a7c <_ZN15Adc1Stm32f446re8innitADCEv+0xd8>)
 8000a24:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000a28:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 |= 0 << 20;			//nbs total de conversion
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <_ZN15Adc1Stm32f446re8innitADCEv+0xd8>)
 8000a2c:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <_ZN15Adc1Stm32f446re8innitADCEv+0xd8>)
 8000a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a30:	62d3      	str	r3, [r2, #44]	; 0x2c
	setChannelPositioningQueue(configFonctionnementADC[noAxe][3],configFonctionnementADC[noAxe][4]);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	791b      	ldrb	r3, [r3, #4]
 8000a36:	4619      	mov	r1, r3
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	1a5b      	subs	r3, r3, r1
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4413      	add	r3, r2
 8000a44:	3314      	adds	r3, #20
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	b2d9      	uxtb	r1, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	791b      	ldrb	r3, [r3, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	4603      	mov	r3, r0
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	1a1b      	subs	r3, r3, r0
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	3318      	adds	r3, #24
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	461a      	mov	r2, r3
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 f8eb 	bl	8000c40 <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh>

}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40012300 	.word	0x40012300
 8000a7c:	40012000 	.word	0x40012000

08000a80 <_ZN15Adc1Stm32f446re7setGPIOEv>:
 * @brief  -> Initialise la clock sur le GPIO voulue et la met en analog la pin associer au channel de l'adc voulue
 * @param  -> none
 * @return -> none
 */
void Adc1Stm32f446re::setGPIO()
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	if (configFonctionnementADC[noAxe][0] == 'A' )
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	791b      	ldrb	r3, [r3, #4]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	4413      	add	r3, r2
 8000a9a:	3308      	adds	r3, #8
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b41      	cmp	r3, #65	; 0x41
 8000aa0:	d121      	bne.n	8000ae6 <_ZN15Adc1Stm32f446re7setGPIOEv+0x66>
	{
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN); //activation de la clock sur GPIOA
 8000aa2:	4b37      	ldr	r3, [pc, #220]	; (8000b80 <_ZN15Adc1Stm32f446re7setGPIOEv+0x100>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a36      	ldr	r2, [pc, #216]	; (8000b80 <_ZN15Adc1Stm32f446re7setGPIOEv+0x100>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER |= configFonctionnementADC[noAxe][1]; //mise en mode analog de la pin voulu
 8000aae:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <_ZN15Adc1Stm32f446re7setGPIOEv+0x104>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	791b      	ldrb	r3, [r3, #4]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	4603      	mov	r3, r0
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	1a1b      	subs	r3, r3, r0
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	330c      	adds	r3, #12
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	492e      	ldr	r1, [pc, #184]	; (8000b84 <_ZN15Adc1Stm32f446re7setGPIOEv+0x104>)
 8000aca:	4313      	orrs	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]
		GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR0 << (configFonctionnementADC[0][3] * 2);
 8000ace:	4b2d      	ldr	r3, [pc, #180]	; (8000b84 <_ZN15Adc1Stm32f446re7setGPIOEv+0x104>)
 8000ad0:	68da      	ldr	r2, [r3, #12]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	f06f 0103 	mvn.w	r1, #3
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	4928      	ldr	r1, [pc, #160]	; (8000b84 <_ZN15Adc1Stm32f446re7setGPIOEv+0x104>)
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	60cb      	str	r3, [r1, #12]
	}

	if (configFonctionnementADC[noAxe][0] == ('B' || 'b'))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	791b      	ldrb	r3, [r3, #4]
 8000aea:	4619      	mov	r1, r3
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	460b      	mov	r3, r1
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	1a5b      	subs	r3, r3, r1
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	3308      	adds	r3, #8
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d116      	bne.n	8000b2e <_ZN15Adc1Stm32f446re7setGPIOEv+0xae>
	{
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN); //activation de la clock sur GPIOB
 8000b00:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <_ZN15Adc1Stm32f446re7setGPIOEv+0x100>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a1e      	ldr	r2, [pc, #120]	; (8000b80 <_ZN15Adc1Stm32f446re7setGPIOEv+0x100>)
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOB->MODER |= configFonctionnementADC[noAxe][1];//mise en mode analog de la pin voulu
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <_ZN15Adc1Stm32f446re7setGPIOEv+0x108>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	791b      	ldrb	r3, [r3, #4]
 8000b14:	4618      	mov	r0, r3
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	4603      	mov	r3, r0
 8000b1a:	00db      	lsls	r3, r3, #3
 8000b1c:	1a1b      	subs	r3, r3, r0
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	440b      	add	r3, r1
 8000b22:	330c      	adds	r3, #12
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4918      	ldr	r1, [pc, #96]	; (8000b88 <_ZN15Adc1Stm32f446re7setGPIOEv+0x108>)
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	600b      	str	r3, [r1, #0]
	else if (configFonctionnementADC[noAxe][0] == ('C' || 'c'))
	{
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN); //activation de la clock sur GPIOC
		GPIOC->MODER |= configFonctionnementADC[noAxe][1];//mise en mode analog de la pin voulu
	}
}
 8000b2c:	e022      	b.n	8000b74 <_ZN15Adc1Stm32f446re7setGPIOEv+0xf4>
	else if (configFonctionnementADC[noAxe][0] == ('C' || 'c'))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	791b      	ldrb	r3, [r3, #4]
 8000b32:	4619      	mov	r1, r3
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	460b      	mov	r3, r1
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	1a5b      	subs	r3, r3, r1
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	3308      	adds	r3, #8
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d115      	bne.n	8000b74 <_ZN15Adc1Stm32f446re7setGPIOEv+0xf4>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN); //activation de la clock sur GPIOC
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <_ZN15Adc1Stm32f446re7setGPIOEv+0x100>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	4a0c      	ldr	r2, [pc, #48]	; (8000b80 <_ZN15Adc1Stm32f446re7setGPIOEv+0x100>)
 8000b4e:	f043 0304 	orr.w	r3, r3, #4
 8000b52:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOC->MODER |= configFonctionnementADC[noAxe][1];//mise en mode analog de la pin voulu
 8000b54:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <_ZN15Adc1Stm32f446re7setGPIOEv+0x10c>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	791b      	ldrb	r3, [r3, #4]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	4603      	mov	r3, r0
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	1a1b      	subs	r3, r3, r0
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	440b      	add	r3, r1
 8000b6a:	330c      	adds	r3, #12
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4907      	ldr	r1, [pc, #28]	; (8000b8c <_ZN15Adc1Stm32f446re7setGPIOEv+0x10c>)
 8000b70:	4313      	orrs	r3, r2
 8000b72:	600b      	str	r3, [r1, #0]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	40020800 	.word	0x40020800

08000b90 <_ZN15Adc1Stm32f446re13setResolutionEh>:
 * @brief  -> Initialise la résolution de la conversion de l'ADC choisie
 * @param  -> resolution
 * @return -> none
 */
void Adc1Stm32f446re::setResolution(uint8_t resolution)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	70fb      	strb	r3, [r7, #3]
	switch(resolution)
 8000b9c:	78fb      	ldrb	r3, [r7, #3]
 8000b9e:	3b06      	subs	r3, #6
 8000ba0:	2b06      	cmp	r3, #6
 8000ba2:	d845      	bhi.n	8000c30 <_ZN15Adc1Stm32f446re13setResolutionEh+0xa0>
 8000ba4:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <_ZN15Adc1Stm32f446re13setResolutionEh+0x1c>)
 8000ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000baa:	bf00      	nop
 8000bac:	08000bc9 	.word	0x08000bc9
 8000bb0:	08000c31 	.word	0x08000c31
 8000bb4:	08000be3 	.word	0x08000be3
 8000bb8:	08000c31 	.word	0x08000c31
 8000bbc:	08000bfd 	.word	0x08000bfd
 8000bc0:	08000c31 	.word	0x08000c31
 8000bc4:	08000c17 	.word	0x08000c17
	{
	case 6:
		ADC1->CR1 |= ADC_CR1_RES_1;
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000bce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bd2:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_0;
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	4a18      	ldr	r2, [pc, #96]	; (8000c3c <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bde:	6053      	str	r3, [r2, #4]
		break;
 8000be0:	e026      	b.n	8000c30 <_ZN15Adc1Stm32f446re13setResolutionEh+0xa0>

	case 8:
		ADC1->CR1 |= ADC_CR1_RES_1;
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bec:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bf8:	6053      	str	r3, [r2, #4]
		break;
 8000bfa:	e019      	b.n	8000c30 <_ZN15Adc1Stm32f446re13setResolutionEh+0xa0>

	case 10:
		ADC1->CR1 |= ADC_CR1_RES_1;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c06:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c12:	6053      	str	r3, [r2, #4]
		break;
 8000c14:	e00c      	b.n	8000c30 <_ZN15Adc1Stm32f446re13setResolutionEh+0xa0>

	case 12:
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000c1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c20:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ADC_CR1_RES_1;
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <_ZN15Adc1Stm32f446re13setResolutionEh+0xac>)
 8000c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c2c:	6053      	str	r3, [r2, #4]
		break;
 8000c2e:	bf00      	nop
	}
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	40012000 	.word	0x40012000

08000c40 <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh>:
 * @param  -> noChannel: Numéro du channel à positionner
 * 			  queuePosition: position dans la queue de conversion normal
 * @return -> none
 */
void Adc1Stm32f446re::setChannelPositioningQueue(uint8_t noChannel, uint8_t queuePosition)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	70bb      	strb	r3, [r7, #2]
	//	//Gestion de la position du channel dans la chaine de conversion
	if(queuePosition < 7)
 8000c50:	78bb      	ldrb	r3, [r7, #2]
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d81a      	bhi.n	8000c8c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh+0x4c>
	{
		ADC1->SQR3 &= ~(ADC_SQR3_SQ1 << ((queuePosition-1)*5));
 8000c56:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh+0xdc>)
 8000c58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c5a:	78bb      	ldrb	r3, [r7, #2]
 8000c5c:	1e5a      	subs	r2, r3, #1
 8000c5e:	4613      	mov	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4413      	add	r3, r2
 8000c64:	221f      	movs	r2, #31
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	4a2b      	ldr	r2, [pc, #172]	; (8000d1c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh+0xdc>)
 8000c6e:	400b      	ands	r3, r1
 8000c70:	6353      	str	r3, [r2, #52]	; 0x34
		ADC1->SQR3 |= (noChannel << ((queuePosition-1)*5));
 8000c72:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh+0xdc>)
 8000c74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c76:	78f8      	ldrb	r0, [r7, #3]
 8000c78:	78bb      	ldrb	r3, [r7, #2]
 8000c7a:	1e5a      	subs	r2, r3, #1
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	fa00 f303 	lsl.w	r3, r0, r3
 8000c86:	4a25      	ldr	r2, [pc, #148]	; (8000d1c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh+0xdc>)
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	6353      	str	r3, [r2, #52]	; 0x34
	}

	if(queuePosition > 6 && queuePosition < 13)
 8000c8c:	78bb      	ldrb	r3, [r7, #2]
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d91d      	bls.n	8000cce <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh+0x8e>
 8000c92:	78bb      	ldrb	r3, [r7, #2]
 8000c94:	2b0c      	cmp	r3, #12
 8000c96:	d81a      	bhi.n	8000cce <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh+0x8e>
	{
		ADC1->SQR2 &= ~(ADC_SQR2_SQ7 << ((queuePosition-1)*5));
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh+0xdc>)
 8000c9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c9c:	78bb      	ldrb	r3, [r7, #2]
 8000c9e:	1e5a      	subs	r2, r3, #1
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	221f      	movs	r2, #31
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh+0xdc>)
 8000cb0:	400b      	ands	r3, r1
 8000cb2:	6313      	str	r3, [r2, #48]	; 0x30
		ADC1->SQR2 |= (noChannel << ((queuePosition-1)*5));
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh+0xdc>)
 8000cb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cb8:	78f8      	ldrb	r0, [r7, #3]
 8000cba:	78bb      	ldrb	r3, [r7, #2]
 8000cbc:	1e5a      	subs	r2, r3, #1
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	fa00 f303 	lsl.w	r3, r0, r3
 8000cc8:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh+0xdc>)
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
	}

	if(queuePosition > 12 && queuePosition < 17)
 8000cce:	78bb      	ldrb	r3, [r7, #2]
 8000cd0:	2b0c      	cmp	r3, #12
 8000cd2:	d91d      	bls.n	8000d10 <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh+0xd0>
 8000cd4:	78bb      	ldrb	r3, [r7, #2]
 8000cd6:	2b10      	cmp	r3, #16
 8000cd8:	d81a      	bhi.n	8000d10 <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh+0xd0>
	{
		ADC1->SQR1 &= ~(ADC_SQR1_SQ13 << ((queuePosition - 1)*5));
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh+0xdc>)
 8000cdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cde:	78bb      	ldrb	r3, [r7, #2]
 8000ce0:	1e5a      	subs	r2, r3, #1
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4413      	add	r3, r2
 8000ce8:	221f      	movs	r2, #31
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh+0xdc>)
 8000cf2:	400b      	ands	r3, r1
 8000cf4:	62d3      	str	r3, [r2, #44]	; 0x2c
		ADC1->SQR1 |= (noChannel << ((queuePosition - 1)*5));
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh+0xdc>)
 8000cf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cfa:	78f8      	ldrb	r0, [r7, #3]
 8000cfc:	78bb      	ldrb	r3, [r7, #2]
 8000cfe:	1e5a      	subs	r2, r3, #1
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	fa00 f303 	lsl.w	r3, r0, r3
 8000d0a:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh+0xdc>)
 8000d0c:	430b      	orrs	r3, r1
 8000d0e:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	40012000 	.word	0x40012000

08000d20 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv>:
 * @brief  -> initialise le nombre de cycle par conversion
 * @param  -> none
 * @return -> none
 */
void Adc1Stm32f446re::setADCConversionNbsCycle()
{
 8000d20:	b490      	push	{r4, r7}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	if(configFonctionnementADC[noAxe][4] < 10)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	791b      	ldrb	r3, [r3, #4]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	1a5b      	subs	r3, r3, r1
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	3318      	adds	r3, #24
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b09      	cmp	r3, #9
 8000d40:	d81f      	bhi.n	8000d82 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv+0x62>
	{
		ADC1->SMPR2 |= configFonctionnementADC[noAxe][6] << (configFonctionnementADC[noAxe][3] * 3);  //Channel sampling time
 8000d42:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv+0xe4>)
 8000d44:	6919      	ldr	r1, [r3, #16]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	791b      	ldrb	r3, [r3, #4]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	4603      	mov	r3, r0
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	1a1b      	subs	r3, r3, r0
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	3320      	adds	r3, #32
 8000d5a:	6818      	ldr	r0, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	791b      	ldrb	r3, [r3, #4]
 8000d60:	461c      	mov	r4, r3
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	4623      	mov	r3, r4
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3314      	adds	r3, #20
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4613      	mov	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4413      	add	r3, r2
 8000d78:	fa00 f303 	lsl.w	r3, r0, r3
 8000d7c:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv+0xe4>)
 8000d7e:	430b      	orrs	r3, r1
 8000d80:	6113      	str	r3, [r2, #16]
	}

	if((configFonctionnementADC[noAxe][4] < 19) && (configFonctionnementADC[noAxe][4] > 9))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	791b      	ldrb	r3, [r3, #4]
 8000d86:	4619      	mov	r1, r3
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	1a5b      	subs	r3, r3, r1
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	3318      	adds	r3, #24
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b12      	cmp	r3, #18
 8000d9a:	d82d      	bhi.n	8000df8 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv+0xd8>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	791b      	ldrb	r3, [r3, #4]
 8000da0:	4619      	mov	r1, r3
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	3318      	adds	r3, #24
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b09      	cmp	r3, #9
 8000db4:	d920      	bls.n	8000df8 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv+0xd8>
	{
		ADC1->SMPR1 |= configFonctionnementADC[noAxe][6] << ((configFonctionnementADC[noAxe][3] - 9) * 3);  //Channel sampling time
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv+0xe4>)
 8000db8:	68d9      	ldr	r1, [r3, #12]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	791b      	ldrb	r3, [r3, #4]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	1a1b      	subs	r3, r3, r0
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	3320      	adds	r3, #32
 8000dce:	6818      	ldr	r0, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	791b      	ldrb	r3, [r3, #4]
 8000dd4:	461c      	mov	r4, r3
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	4623      	mov	r3, r4
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	3314      	adds	r3, #20
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	4613      	mov	r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	4413      	add	r3, r2
 8000dec:	3b1b      	subs	r3, #27
 8000dee:	fa00 f303 	lsl.w	r3, r0, r3
 8000df2:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <_ZN15Adc1Stm32f446re24setADCConversionNbsCycleEv+0xe4>)
 8000df4:	430b      	orrs	r3, r1
 8000df6:	60d3      	str	r3, [r2, #12]
	}
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc90      	pop	{r4, r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40012000 	.word	0x40012000

08000e08 <_ZN15Adc1Stm32f446re13getConversionEv>:
 * @brief  -> renvoie la valeur de la dernière conversion faite pas l'adc
 * @param  -> none
 * @return -> uint16: valeur de la dernière conversion faite pas l'adc
 */
uint16_t Adc1Stm32f446re::getConversion()
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return ADC1->DR;
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <_ZN15Adc1Stm32f446re13getConversionEv+0x1c>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e14:	b29b      	uxth	r3, r3
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40012000 	.word	0x40012000

08000e28 <_ZN15Adc1Stm32f446re9enableADCEv>:
 * @brief  -> Active l'adc
 * @param  -> none
 * @return -> none
 */
void Adc1Stm32f446re::enableADC()
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	ADC1->CR2 |= ADC_CR2_ADON;  //enable ADON
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <_ZN15Adc1Stm32f446re9enableADCEv+0x3c>)
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <_ZN15Adc1Stm32f446re9enableADCEv+0x3c>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6093      	str	r3, [r2, #8]

	uint32_t delay = 10000; //Wait for ADC to stabillize
 8000e3c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e40:	60fb      	str	r3, [r7, #12]
	while(delay--);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	1e5a      	subs	r2, r3, #1
 8000e46:	60fa      	str	r2, [r7, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	bf14      	ite	ne
 8000e4c:	2301      	movne	r3, #1
 8000e4e:	2300      	moveq	r3, #0
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d000      	beq.n	8000e58 <_ZN15Adc1Stm32f446re9enableADCEv+0x30>
 8000e56:	e7f4      	b.n	8000e42 <_ZN15Adc1Stm32f446re9enableADCEv+0x1a>
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40012000 	.word	0x40012000

08000e68 <_ZN15Adc1Stm32f446re18startAdcConversionEv>:
 * @brief  -> démarre la conversion de l'adc
 * @param  -> none
 * @return -> none
 */
void Adc1Stm32f446re::startAdcConversion()
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	setChannelPositioningQueue(configFonctionnementADC[this->noAxe][3],1);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	791b      	ldrb	r3, [r3, #4]
 8000e74:	4619      	mov	r1, r3
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	1a5b      	subs	r3, r3, r1
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	3314      	adds	r3, #20
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff fed7 	bl	8000c40 <_ZN15Adc1Stm32f446re26setChannelPositioningQueueEhh>
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <_ZN15Adc1Stm32f446re18startAdcConversionEv+0x40>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <_ZN15Adc1Stm32f446re18startAdcConversionEv+0x40>)
 8000e98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e9c:	6093      	str	r3, [r2, #8]
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40012000 	.word	0x40012000

08000eac <_ZN15Adc1Stm32f446re11waitEocFlagEv>:
 * @brief  -> Flag de fin de conversion de l'adc
 * @param  -> none
 * @return ->
 */
uint8_t Adc1Stm32f446re::waitEocFlag()
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	uint32_t delay = 10000; //Wait for ADC to stabillize
 8000eb4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000eb8:	60fb      	str	r3, [r7, #12]
	while(!(ADC1->SR & (1 << 1)) || !delay)
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <_ZN15Adc1Stm32f446re11waitEocFlagEv+0x4c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d002      	beq.n	8000ecc <_ZN15Adc1Stm32f446re11waitEocFlagEv+0x20>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d101      	bne.n	8000ed0 <_ZN15Adc1Stm32f446re11waitEocFlagEv+0x24>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e000      	b.n	8000ed2 <_ZN15Adc1Stm32f446re11waitEocFlagEv+0x26>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <_ZN15Adc1Stm32f446re11waitEocFlagEv+0x32>
	{
		delay--;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
	while(!(ADC1->SR & (1 << 1)) || !delay)
 8000edc:	e7ed      	b.n	8000eba <_ZN15Adc1Stm32f446re11waitEocFlagEv+0xe>
	}

	if(!delay)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d101      	bne.n	8000ee8 <_ZN15Adc1Stm32f446re11waitEocFlagEv+0x3c>
		return 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	e000      	b.n	8000eea <_ZN15Adc1Stm32f446re11waitEocFlagEv+0x3e>
	else
		return 1;
 8000ee8:	2301      	movs	r3, #1
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40012000 	.word	0x40012000

08000efc <_ZN15Adc1Stm32f446re12clearEocFlagEv>:
 * @brief  -> remise à zéro du flag de fin de conversion de l'adc
 * @param  -> none
 * @return -> none
 */
void Adc1Stm32f446re::clearEocFlag()
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	ADC1->SR &= ~ADC_SR_EOC;
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <_ZN15Adc1Stm32f446re12clearEocFlagEv+0x2c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <_ZN15Adc1Stm32f446re12clearEocFlagEv+0x2c>)
 8000f0a:	f023 0302 	bic.w	r3, r3, #2
 8000f0e:	6013      	str	r3, [r2, #0]
	ADC1->SR &= ~ADC_SR_OVR;
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <_ZN15Adc1Stm32f446re12clearEocFlagEv+0x2c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <_ZN15Adc1Stm32f446re12clearEocFlagEv+0x2c>)
 8000f16:	f023 0320 	bic.w	r3, r3, #32
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	40012000 	.word	0x40012000

08000f2c <_ZN15Adc1Stm32f446reD1Ev>:
 * @name   -> ~Adc1Stm32f446re
 * @brief  -> destructeur de la classe
 * @param  -> none
 * @return -> none
 */
Adc1Stm32f446re::~Adc1Stm32f446re() {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <_ZN15Adc1Stm32f446reD1Ev+0x1c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	08003ef0 	.word	0x08003ef0

08000f4c <_ZN15Adc1Stm32f446reD0Ev>:
Adc1Stm32f446re::~Adc1Stm32f446re() {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
}
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ffe9 	bl	8000f2c <_ZN15Adc1Stm32f446reD1Ev>
 8000f5a:	21b0      	movs	r1, #176	; 0xb0
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f002 fdb8 	bl	8003ad2 <_ZdlPvj>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <_ZN8CanalEMGC1Ehddd>:
 * @name   -> CanalEMG
 * @brief  -> Constructeur de la classe
 * @param  -> noAxe: uméro de l'axe à auxquel l'adc sera associer
 * @return -> None
 */
CanalEMG::CanalEMG(uint8_t noAxeEmg, double kp, double ki, double kd)
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	61f8      	str	r0, [r7, #28]
 8000f74:	460b      	mov	r3, r1
 8000f76:	ed87 0b04 	vstr	d0, [r7, #16]
 8000f7a:	ed87 1b02 	vstr	d1, [r7, #8]
 8000f7e:	ed87 2b00 	vstr	d2, [r7]
 8000f82:	76fb      	strb	r3, [r7, #27]
 8000f84:	4a19      	ldr	r2, [pc, #100]	; (8000fec <_ZN8CanalEMGC1Ehddd+0x80>)
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	601a      	str	r2, [r3, #0]
{
	adc = new Adc1Stm32f446re(noAxeEmg);
 8000f8a:	20b0      	movs	r0, #176	; 0xb0
 8000f8c:	f002 fda3 	bl	8003ad6 <_Znwj>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461c      	mov	r4, r3
 8000f94:	7efb      	ldrb	r3, [r7, #27]
 8000f96:	4619      	mov	r1, r3
 8000f98:	4620      	mov	r0, r4
 8000f9a:	f7ff fc4b 	bl	8000834 <_ZN15Adc1Stm32f446reC1Eh>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	605c      	str	r4, [r3, #4]
	filtreFenetreGlissante = new FiltreFenetreGlissante();
 8000fa2:	200c      	movs	r0, #12
 8000fa4:	f002 fd97 	bl	8003ad6 <_Znwj>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461c      	mov	r4, r3
 8000fac:	4620      	mov	r0, r4
 8000fae:	f000 f8db 	bl	8001168 <_ZN22FiltreFenetreGlissanteC1Ev>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	609c      	str	r4, [r3, #8]
	pid = new PID(kp, ki, kd);
 8000fb6:	2038      	movs	r0, #56	; 0x38
 8000fb8:	f002 fd8d 	bl	8003ad6 <_Znwj>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461c      	mov	r4, r3
 8000fc0:	ed97 2b00 	vldr	d2, [r7]
 8000fc4:	ed97 1b02 	vldr	d1, [r7, #8]
 8000fc8:	ed97 0b04 	vldr	d0, [r7, #16]
 8000fcc:	4620      	mov	r0, r4
 8000fce:	f000 fbb7 	bl	8001740 <_ZN3PIDC1Eddd>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	60dc      	str	r4, [r3, #12]

	positionEmgRaw = 0;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	741a      	strb	r2, [r3, #16]
	positionEmgPourcentage = 0;
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	745a      	strb	r2, [r3, #17]

}
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3724      	adds	r7, #36	; 0x24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd90      	pop	{r4, r7, pc}
 8000fec:	08003f00 	.word	0x08003f00

08000ff0 <_ZN8CanalEMG11getAdcValueEv>:
 * @brief  -> démarre la conversion de l'adc et renvoie la valeur convertie
 * @param  -> None
 * @return -> uint8_t: dernière conversion de l'adc
 */
uint8_t CanalEMG::getAdcValue()
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	uint8_t conversion;
	adc->startAdcConversion();
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff33 	bl	8000e68 <_ZN15Adc1Stm32f446re18startAdcConversionEv>
	if(adc->waitEocFlag())
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff50 	bl	8000eac <_ZN15Adc1Stm32f446re11waitEocFlagEv>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf14      	ite	ne
 8001012:	2301      	movne	r3, #1
 8001014:	2300      	moveq	r3, #0
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00d      	beq.n	8001038 <_ZN8CanalEMG11getAdcValueEv+0x48>
	{
		conversion = adc->getConversion();
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fef1 	bl	8000e08 <_ZN15Adc1Stm32f446re13getConversionEv>
 8001026:	4603      	mov	r3, r0
 8001028:	73fb      	strb	r3, [r7, #15]
		adc->clearEocFlag();
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff64 	bl	8000efc <_ZN15Adc1Stm32f446re12clearEocFlagEv>

		return conversion;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	e000      	b.n	800103a <_ZN8CanalEMG11getAdcValueEv+0x4a>
	}
	else return 0;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <_ZN8CanalEMG25acquisitionNewPositionEmgEv>:

void CanalEMG::acquisitionNewPositionEmg()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	positionEmgRaw = getAdcValue();
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ffcf 	bl	8000ff0 <_ZN8CanalEMG11getAdcValueEv>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	741a      	strb	r2, [r3, #16]

	if(positionEmgRaw < POSITION_MIN_EMG)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7c1b      	ldrb	r3, [r3, #16]
 800105e:	2b09      	cmp	r3, #9
 8001060:	d802      	bhi.n	8001068 <_ZN8CanalEMG25acquisitionNewPositionEmgEv+0x24>
	{
		positionEmgRaw = POSITION_MIN_EMG;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	220a      	movs	r2, #10
 8001066:	741a      	strb	r2, [r3, #16]
	}

	positionEmgPourcentage = (100 * (positionEmgRaw - POSITION_MIN_EMG)) / (POSITION_MAX_EMG - POSITION_MIN_EMG);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7c1b      	ldrb	r3, [r3, #16]
 800106c:	3b0a      	subs	r3, #10
 800106e:	2264      	movs	r2, #100	; 0x64
 8001070:	fb02 f303 	mul.w	r3, r2, r3
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <_ZN8CanalEMG25acquisitionNewPositionEmgEv+0x68>)
 8001076:	fb82 1203 	smull	r1, r2, r2, r3
 800107a:	1192      	asrs	r2, r2, #6
 800107c:	17db      	asrs	r3, r3, #31
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	b2da      	uxtb	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	745a      	strb	r2, [r3, #17]

	if(positionEmgPourcentage > 100)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7c5b      	ldrb	r3, [r3, #17]
 800108a:	2b64      	cmp	r3, #100	; 0x64
 800108c:	d902      	bls.n	8001094 <_ZN8CanalEMG25acquisitionNewPositionEmgEv+0x50>
	 {
		 positionEmgPourcentage = 100;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2264      	movs	r2, #100	; 0x64
 8001092:	745a      	strb	r2, [r3, #17]
	 }

	filtreFenetreGlissante->miseNiveauFiltre(positionEmgPourcentage);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7c5b      	ldrb	r3, [r3, #17]
 800109c:	4619      	mov	r1, r3
 800109e:	4610      	mov	r0, r2
 80010a0:	f000 f87e 	bl	80011a0 <_ZN22FiltreFenetreGlissante16miseNiveauFiltreEh>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	42df9bb1 	.word	0x42df9bb1

080010b0 <_ZN8CanalEMG14calculPidValueEh>:

void CanalEMG::calculPidValue(uint8_t positionActuelAxe)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
	pid->calculPID(positionActuelAxe,positionEmgPourcentage);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68d8      	ldr	r0, [r3, #12]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7c5a      	ldrb	r2, [r3, #17]
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	4619      	mov	r1, r3
 80010c8:	f000 fb78 	bl	80017bc <_ZN3PID9calculPIDEhh>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_ZN8CanalEMG11getValuePIDEv>:

uint32_t CanalEMG::getValuePID()
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	return pid->getValuePID();
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fc32 	bl	800194a <_ZN3PID11getValuePIDEv>
 80010e6:	4603      	mov	r3, r0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <_ZN8CanalEMG18getDirectionMoteurEv>:

bool CanalEMG::getDirectionMoteur()
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	return pid->getDirectionMoteur();
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fc17 	bl	8001930 <_ZN3PID18getDirectionMoteurEv>
 8001102:	4603      	mov	r3, r0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <_ZN8CanalEMG15getErreurPidRawEv>:
	return this->positionEmgPourcentage;
	//return filtreFenetreGlissante->resultatFiltre();
}

int16_t CanalEMG::getErreurPidRaw()
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 return pid->getErreurRaw();
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fc23 	bl	8001964 <_ZN3PID12getErreurRawEv>
 800111e:	4603      	mov	r3, r0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <_ZN8CanalEMGD1Ev>:

CanalEMG::~CanalEMG()
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <_ZN8CanalEMGD1Ev+0x1c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
{


}
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	08003f00 	.word	0x08003f00

08001148 <_ZN8CanalEMGD0Ev>:
CanalEMG::~CanalEMG()
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
}
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ffe9 	bl	8001128 <_ZN8CanalEMGD1Ev>
 8001156:	2114      	movs	r1, #20
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f002 fcba 	bl	8003ad2 <_ZdlPvj>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <_ZN22FiltreFenetreGlissanteC1Ev>:
 *      Author: Justin
 */

#include "FiltreFenetreGlissante.h"

FiltreFenetreGlissante::FiltreFenetreGlissante()
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	4a0a      	ldr	r2, [pc, #40]	; (800119c <_ZN22FiltreFenetreGlissanteC1Ev+0x34>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	601a      	str	r2, [r3, #0]
{
	compteur = 0;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	711a      	strb	r2, [r3, #4]
	filtrePositionAxe[0] = 0;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	715a      	strb	r2, [r3, #5]
	filtrePositionAxe[1] = 0;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	719a      	strb	r2, [r3, #6]
	filtrePositionAxe[2] = 0;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	71da      	strb	r2, [r3, #7]

}
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	08003f10 	.word	0x08003f10

080011a0 <_ZN22FiltreFenetreGlissante16miseNiveauFiltreEh>:

void FiltreFenetreGlissante::miseNiveauFiltre(uint8_t positionActuelAxe)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
	if(compteur >  2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	791b      	ldrb	r3, [r3, #4]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d902      	bls.n	80011ba <_ZN22FiltreFenetreGlissante16miseNiveauFiltreEh+0x1a>
	{
		compteur = 0;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	711a      	strb	r2, [r3, #4]
	}

	filtrePositionAxe[compteur] = positionActuelAxe;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	791b      	ldrb	r3, [r3, #4]
 80011be:	461a      	mov	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4413      	add	r3, r2
 80011c4:	78fa      	ldrb	r2, [r7, #3]
 80011c6:	715a      	strb	r2, [r3, #5]
	compteur += 1;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	791b      	ldrb	r3, [r3, #4]
 80011cc:	3301      	adds	r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	711a      	strb	r2, [r3, #4]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_ZN22FiltreFenetreGlissante14resultatFiltreEv>:

uint16_t FiltreFenetreGlissante::resultatFiltre()
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	resultatFenetre = 0;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	811a      	strh	r2, [r3, #8]
	for(uint8_t i = 0; i < 3; i++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	73fb      	strb	r3, [r7, #15]
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d80e      	bhi.n	8001216 <_ZN22FiltreFenetreGlissante14resultatFiltreEv+0x36>
	{
		resultatFenetre += filtrePositionAxe[i];
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	891a      	ldrh	r2, [r3, #8]
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	440b      	add	r3, r1
 8001202:	795b      	ldrb	r3, [r3, #5]
 8001204:	b29b      	uxth	r3, r3
 8001206:	4413      	add	r3, r2
 8001208:	b29a      	uxth	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	811a      	strh	r2, [r3, #8]
	for(uint8_t i = 0; i < 3; i++)
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	3301      	adds	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e7ed      	b.n	80011f2 <_ZN22FiltreFenetreGlissante14resultatFiltreEv+0x12>

	}
	resultatFenetre = resultatFenetre/3;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	891b      	ldrh	r3, [r3, #8]
 800121a:	4a07      	ldr	r2, [pc, #28]	; (8001238 <_ZN22FiltreFenetreGlissante14resultatFiltreEv+0x58>)
 800121c:	fba2 2303 	umull	r2, r3, r2, r3
 8001220:	085b      	lsrs	r3, r3, #1
 8001222:	b29a      	uxth	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	811a      	strh	r2, [r3, #8]

	return resultatFenetre;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	891b      	ldrh	r3, [r3, #8]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	aaaaaaab 	.word	0xaaaaaaab

0800123c <_ZN22FiltreFenetreGlissanteD1Ev>:

FiltreFenetreGlissante::~FiltreFenetreGlissante() {
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <_ZN22FiltreFenetreGlissanteD1Ev+0x1c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	08003f10 	.word	0x08003f10

0800125c <_ZN22FiltreFenetreGlissanteD0Ev>:
FiltreFenetreGlissante::~FiltreFenetreGlissante() {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
}
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ffe9 	bl	800123c <_ZN22FiltreFenetreGlissanteD1Ev>
 800126a:	210c      	movs	r1, #12
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f002 fc30 	bl	8003ad2 <_ZdlPvj>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <_ZN19GestionMouvementAxeC1Ehh>:

#include "GestionMouvementAxe.h"



GestionMouvementAxe::GestionMouvementAxe(uint8_t noMoteur, uint8_t noPot)
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	70fb      	strb	r3, [r7, #3]
 8001288:	4613      	mov	r3, r2
 800128a:	70bb      	strb	r3, [r7, #2]
 800128c:	4a56      	ldr	r2, [pc, #344]	; (80013e8 <_ZN19GestionMouvementAxeC1Ehh+0x16c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	601a      	str	r2, [r3, #0]
{
	potentiometre = new PositionAxePotentiometre(noPot);
 8001292:	2010      	movs	r0, #16
 8001294:	f002 fc1f 	bl	8003ad6 <_Znwj>
 8001298:	4603      	mov	r3, r0
 800129a:	461c      	mov	r4, r3
 800129c:	78bb      	ldrb	r3, [r7, #2]
 800129e:	4619      	mov	r1, r3
 80012a0:	4620      	mov	r0, r4
 80012a2:	f000 fb8d 	bl	80019c0 <_ZN24PositionAxePotentiometreC1Eh>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	609c      	str	r4, [r3, #8]

	this->noMoteur = noMoteur;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	78fa      	ldrb	r2, [r7, #3]
 80012ae:	751a      	strb	r2, [r3, #20]
	switch(noMoteur)
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	f200 808d 	bhi.w	80013d2 <_ZN19GestionMouvementAxeC1Ehh+0x156>
 80012b8:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <_ZN19GestionMouvementAxeC1Ehh+0x44>)
 80012ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012be:	bf00      	nop
 80012c0:	080012e5 	.word	0x080012e5
 80012c4:	0800132d 	.word	0x0800132d
 80012c8:	08001375 	.word	0x08001375
 80012cc:	080013d3 	.word	0x080013d3
 80012d0:	080013d3 	.word	0x080013d3
 80012d4:	080013d3 	.word	0x080013d3
 80012d8:	080013d3 	.word	0x080013d3
 80012dc:	080013d3 	.word	0x080013d3
 80012e0:	0800138b 	.word	0x0800138b
	{
	case 0:
		moteur = new controlL297(L297_2);
 80012e4:	2014      	movs	r0, #20
 80012e6:	f002 fbf6 	bl	8003ad6 <_Znwj>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461c      	mov	r4, r3
 80012ee:	2101      	movs	r1, #1
 80012f0:	4620      	mov	r0, r4
 80012f2:	f001 f92f 	bl	8002554 <_ZN11controlL297C1E13_L297_SELECT_>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60dc      	str	r4, [r3, #12]
		moteur->setSpeed(100);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2164      	movs	r1, #100	; 0x64
 8001300:	4618      	mov	r0, r3
 8001302:	f001 fa6b 	bl	80027dc <_ZN11controlL2978setSpeedEm>
		moteur->setLockState(LOCK);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f001 faeb 	bl	80028e8 <_ZN11controlL29712setLockStateE11_LOCK_STATE>
		moteur->setEnable(true);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	2101      	movs	r1, #1
 8001318:	4618      	mov	r0, r3
 800131a:	f001 fb45 	bl	80029a8 <_ZN11controlL2979setEnableEb>
		moteur->setDirection(CCW);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	2101      	movs	r1, #1
 8001324:	4618      	mov	r0, r3
 8001326:	f001 fa77 	bl	8002818 <_ZN11controlL29712setDirectionE11_DIRECTION_>
		break;
 800132a:	e052      	b.n	80013d2 <_ZN19GestionMouvementAxeC1Ehh+0x156>

	case 1:
		moteur = new controlL297(L297_1);
 800132c:	2014      	movs	r0, #20
 800132e:	f002 fbd2 	bl	8003ad6 <_Znwj>
 8001332:	4603      	mov	r3, r0
 8001334:	461c      	mov	r4, r3
 8001336:	2100      	movs	r1, #0
 8001338:	4620      	mov	r0, r4
 800133a:	f001 f90b 	bl	8002554 <_ZN11controlL297C1E13_L297_SELECT_>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60dc      	str	r4, [r3, #12]
		moteur->setSpeed(100);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	2164      	movs	r1, #100	; 0x64
 8001348:	4618      	mov	r0, r3
 800134a:	f001 fa47 	bl	80027dc <_ZN11controlL2978setSpeedEm>
		moteur->setLockState(LOCK);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f001 fac7 	bl	80028e8 <_ZN11controlL29712setLockStateE11_LOCK_STATE>
		moteur->setEnable(true);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2101      	movs	r1, #1
 8001360:	4618      	mov	r0, r3
 8001362:	f001 fb21 	bl	80029a8 <_ZN11controlL2979setEnableEb>
		moteur->setDirection(CCW);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2101      	movs	r1, #1
 800136c:	4618      	mov	r0, r3
 800136e:	f001 fa53 	bl	8002818 <_ZN11controlL29712setDirectionE11_DIRECTION_>
		break;
 8001372:	e02e      	b.n	80013d2 <_ZN19GestionMouvementAxeC1Ehh+0x156>

	case 2:
		pince = new L298x();
 8001374:	200c      	movs	r0, #12
 8001376:	f002 fbae 	bl	8003ad6 <_Znwj>
 800137a:	4603      	mov	r3, r0
 800137c:	461c      	mov	r4, r3
 800137e:	4620      	mov	r0, r4
 8001380:	f000 f93c 	bl	80015fc <_ZN5L298xC1Ev>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	611c      	str	r4, [r3, #16]
		//		moteur = new controlL297(L297_3_4);
		//		moteur->setLockState(LOCK);
		break;
 8001388:	e023      	b.n	80013d2 <_ZN19GestionMouvementAxeC1Ehh+0x156>

	case 8:
		moteur = new controlL297(L297_3_4);
 800138a:	2014      	movs	r0, #20
 800138c:	f002 fba3 	bl	8003ad6 <_Znwj>
 8001390:	4603      	mov	r3, r0
 8001392:	461c      	mov	r4, r3
 8001394:	2102      	movs	r1, #2
 8001396:	4620      	mov	r0, r4
 8001398:	f001 f8dc 	bl	8002554 <_ZN11controlL297C1E13_L297_SELECT_>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	60dc      	str	r4, [r3, #12]
		moteur->setSpeed(100);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2164      	movs	r1, #100	; 0x64
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 fa18 	bl	80027dc <_ZN11controlL2978setSpeedEm>
		moteur->setLockState(LOCK);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f001 fa98 	bl	80028e8 <_ZN11controlL29712setLockStateE11_LOCK_STATE>
		moteur->setEnable(true);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2101      	movs	r1, #1
 80013be:	4618      	mov	r0, r3
 80013c0:	f001 faf2 	bl	80029a8 <_ZN11controlL2979setEnableEb>
		moteur->setDirection(CCW);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	2101      	movs	r1, #1
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 fa24 	bl	8002818 <_ZN11controlL29712setDirectionE11_DIRECTION_>
		break;
 80013d0:	bf00      	nop

	}



	positionEncoPourcentage = 0;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	711a      	strb	r2, [r3, #4]
	positionPotPourcentage = 0;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	715a      	strb	r2, [r3, #5]

}
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd90      	pop	{r4, r7, pc}
 80013e8:	08003f20 	.word	0x08003f20

080013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>:
{
	return this->positionEncoPourcentage;
}

uint8_t GestionMouvementAxe::getPositionPotPourcentage()
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	return this->positionPotPourcentage;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	795b      	ldrb	r3, [r3, #5]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <_ZN19GestionMouvementAxe18getMoteurLockStateEv>:
{
	return moteur->getDirection();
}

bool GestionMouvementAxe::getMoteurLockState()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	return moteur->getLockState();
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	4618      	mov	r0, r3
 8001412:	f001 faeb 	bl	80029ec <_ZN11controlL29712getLockStateEv>
 8001416:	4603      	mov	r3, r0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>:

//gestionMoteur
void GestionMouvementAxe::setMoteurLockState(bool state)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
	switch(state)
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d006      	beq.n	8001440 <_ZN19GestionMouvementAxe18setMoteurLockStateEb+0x20>
	{
	case 0:
		moteur->setLockState(LOCK);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f001 fa55 	bl	80028e8 <_ZN11controlL29712setLockStateE11_LOCK_STATE>
		break;
 800143e:	e006      	b.n	800144e <_ZN19GestionMouvementAxe18setMoteurLockStateEb+0x2e>

	case 1:
		moteur->setLockState(UNLOCK);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2101      	movs	r1, #1
 8001446:	4618      	mov	r0, r3
 8001448:	f001 fa4e 	bl	80028e8 <_ZN11controlL29712setLockStateE11_LOCK_STATE>
		break;
 800144c:	bf00      	nop
	}
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb>:
{
	moteur->setEnable(state);
}

void GestionMouvementAxe::setMoteurDirEtSpeed(uint32_t speed, bool direction)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	4613      	mov	r3, r2
 8001462:	71fb      	strb	r3, [r7, #7]
	if(checkMovementLimit(direction))
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	4619      	mov	r1, r3
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f000 f832 	bl	80014d2 <_ZN19GestionMouvementAxe18checkMovementLimitEb>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d024      	beq.n	80014be <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb+0x68>
	{
		if(speed > 1000)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800147a:	d902      	bls.n	8001482 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb+0x2c>
		{
			speed = 1000;
 800147c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001480:	60bb      	str	r3, [r7, #8]
		}

		moteur->setSpeed(speed);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	68b9      	ldr	r1, [r7, #8]
 8001488:	4618      	mov	r0, r3
 800148a:	f001 f9a7 	bl	80027dc <_ZN11controlL2978setSpeedEm>

		switch(direction)
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d006      	beq.n	80014a2 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb+0x4c>
		{
		case 0:
			moteur->setDirection(CW);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f001 f9bc 	bl	8002818 <_ZN11controlL29712setDirectionE11_DIRECTION_>
			break;
 80014a0:	e006      	b.n	80014b0 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb+0x5a>

		case 1:
			moteur->setDirection(CCW);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2101      	movs	r1, #1
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 f9b5 	bl	8002818 <_ZN11controlL29712setDirectionE11_DIRECTION_>
			break;
 80014ae:	bf00      	nop
		}
		moteur->setLockState(UNLOCK);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2101      	movs	r1, #1
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 fa16 	bl	80028e8 <_ZN11controlL29712setLockStateE11_LOCK_STATE>

	else
	{
		moteur->setLockState(LOCK);
	}
}
 80014bc:	e005      	b.n	80014ca <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb+0x74>
		moteur->setLockState(LOCK);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f001 fa0f 	bl	80028e8 <_ZN11controlL29712setLockStateE11_LOCK_STATE>
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_ZN19GestionMouvementAxe18checkMovementLimitEb>:

bool GestionMouvementAxe::checkMovementLimit(bool directionVoulue)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	460b      	mov	r3, r1
 80014dc:	70fb      	strb	r3, [r7, #3]
	 if(noMoteur == 8)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7d1b      	ldrb	r3, [r3, #20]
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d101      	bne.n	80014ea <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x18>
	{
		return 1;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e024      	b.n	8001534 <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x62>
	}

	 else if(directionVoulue == 0 && (potentiometre->getPositionPourcentage() < 1))
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d109      	bne.n	8001504 <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x32>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 faa4 	bl	8001a42 <_ZN24PositionAxePotentiometre22getPositionPourcentageEv>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x32>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x34>
 8001504:	2300      	movs	r3, #0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x3c>
	{
		return 0;
 800150a:	2300      	movs	r3, #0
 800150c:	e012      	b.n	8001534 <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x62>
	}

	else if(directionVoulue == 1 && (potentiometre->getPositionPourcentage() > 99))
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d109      	bne.n	8001528 <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x56>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	4618      	mov	r0, r3
 800151a:	f000 fa92 	bl	8001a42 <_ZN24PositionAxePotentiometre22getPositionPourcentageEv>
 800151e:	4603      	mov	r3, r0
 8001520:	2b63      	cmp	r3, #99	; 0x63
 8001522:	d901      	bls.n	8001528 <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x56>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x58>
 8001528:	2300      	movs	r3, #0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x60>
	{
		return 0;
 800152e:	2300      	movs	r3, #0
 8001530:	e000      	b.n	8001534 <_ZN19GestionMouvementAxe18checkMovementLimitEb+0x62>
	}

	else
	{
		return 1;
 8001532:	2301      	movs	r3, #1
	}

}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <_ZN19GestionMouvementAxe17updatePositionPotEv>:

void GestionMouvementAxe::updatePositionPot()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	potentiometre->acquisitionNewPositionAxe();
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	4618      	mov	r0, r3
 800154a:	f000 fa89 	bl	8001a60 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv>
	this->positionPotPourcentage = potentiometre->getPositionPourcentage();
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fa75 	bl	8001a42 <_ZN24PositionAxePotentiometre22getPositionPourcentageEv>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	715a      	strb	r2, [r3, #5]
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <_ZN19GestionMouvementAxe17setDirectionPinceEh>:

//gestion pince
void GestionMouvementAxe::setDirectionPince(uint8_t direction)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	70fb      	strb	r3, [r7, #3]
	switch(direction)
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d014      	beq.n	80015a4 <_ZN19GestionMouvementAxe17setDirectionPinceEh+0x3c>
 800157a:	2b02      	cmp	r3, #2
 800157c:	dc19      	bgt.n	80015b2 <_ZN19GestionMouvementAxe17setDirectionPinceEh+0x4a>
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <_ZN19GestionMouvementAxe17setDirectionPinceEh+0x20>
 8001582:	2b01      	cmp	r3, #1
 8001584:	d007      	beq.n	8001596 <_ZN19GestionMouvementAxe17setDirectionPinceEh+0x2e>
		break;
	case 2:
		pince->setDirection(IDLE_P);
		break;
	}
}
 8001586:	e014      	b.n	80015b2 <_ZN19GestionMouvementAxe17setDirectionPinceEh+0x4a>
		pince->setDirection(CW_P);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f88c 	bl	80016ac <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_>
		break;
 8001594:	e00d      	b.n	80015b2 <_ZN19GestionMouvementAxe17setDirectionPinceEh+0x4a>
		pince->setDirection(CCW_P);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	2101      	movs	r1, #1
 800159c:	4618      	mov	r0, r3
 800159e:	f000 f885 	bl	80016ac <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_>
		break;
 80015a2:	e006      	b.n	80015b2 <_ZN19GestionMouvementAxe17setDirectionPinceEh+0x4a>
		pince->setDirection(IDLE_P);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	2103      	movs	r1, #3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f87e 	bl	80016ac <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_>
		break;
 80015b0:	bf00      	nop
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <_ZN19GestionMouvementAxeD1Ev>:

GestionMouvementAxe::~GestionMouvementAxe()
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <_ZN19GestionMouvementAxeD1Ev+0x1c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	08003f20 	.word	0x08003f20

080015dc <_ZN19GestionMouvementAxeD0Ev>:
GestionMouvementAxe::~GestionMouvementAxe()
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
}
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ffe9 	bl	80015bc <_ZN19GestionMouvementAxeD1Ev>
 80015ea:	2118      	movs	r1, #24
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f002 fa70 	bl	8003ad2 <_ZdlPvj>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_ZN5L298xC1Ev>:
 * @brief     -> Classe qui permet de contrôler un L298 configuré en pont en H
 */

#include "L298x.h"

L298x::L298x() {
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b085      	sub	sp, #20
 8001600:	af02      	add	r7, sp, #8
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	4a11      	ldr	r2, [pc, #68]	; (800164c <_ZN5L298xC1Ev+0x50>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
	//pince pas de clock ou de chanal
	//ouverture = cw
	//fermeture = ccw
	config = new hardwareConfig();
 800160a:	2004      	movs	r0, #4
 800160c:	f002 fa63 	bl	8003ad6 <_Znwj>
 8001610:	4603      	mov	r3, r0
 8001612:	461c      	mov	r4, r3
 8001614:	4620      	mov	r0, r4
 8001616:	f001 f9fb 	bl	8002a10 <_ZN14hardwareConfigC1Ev>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	605c      	str	r4, [r3, #4]
	config->GPIO_Config(GPIOA, 8, OUTPUT,2);// controle de la pince A
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6858      	ldr	r0, [r3, #4]
 8001622:	2302      	movs	r3, #2
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2301      	movs	r3, #1
 8001628:	2208      	movs	r2, #8
 800162a:	4909      	ldr	r1, [pc, #36]	; (8001650 <_ZN5L298xC1Ev+0x54>)
 800162c:	f001 fa8e 	bl	8002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
	config->GPIO_Config(GPIOA, 9, OUTPUT,2);// controle de la pince B
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6858      	ldr	r0, [r3, #4]
 8001634:	2302      	movs	r3, #2
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2301      	movs	r3, #1
 800163a:	2209      	movs	r2, #9
 800163c:	4904      	ldr	r1, [pc, #16]	; (8001650 <_ZN5L298xC1Ev+0x54>)
 800163e:	f001 fa85 	bl	8002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>

}
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	08003f30 	.word	0x08003f30
 8001650:	40020000 	.word	0x40020000

08001654 <_ZN5L298xD1Ev>:

L298x::~L298x() {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <_ZN5L298xD1Ev+0x34>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	601a      	str	r2, [r3, #0]
	if(config)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d008      	beq.n	800167c <_ZN5L298xD1Ev+0x28>
		delete config;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d004      	beq.n	800167c <_ZN5L298xD1Ev+0x28>
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	3204      	adds	r2, #4
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	4790      	blx	r2
}
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	08003f30 	.word	0x08003f30

0800168c <_ZN5L298xD0Ev>:
L298x::~L298x() {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
}
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ffdd 	bl	8001654 <_ZN5L298xD1Ev>
 800169a:	210c      	movs	r1, #12
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f002 fa18 	bl	8003ad2 <_ZdlPvj>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_>:
void L298x::setDirection(_DIRECTION_PINCE_ dir)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
	if(dir==CW_P)
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d111      	bne.n	80016e2 <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x36>
	{
		direction=0;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	721a      	strb	r2, [r3, #8]
		config->GPIO_Pin_Enable(GPIOA, 8);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2208      	movs	r2, #8
 80016ca:	491c      	ldr	r1, [pc, #112]	; (800173c <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x90>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 fa9d 	bl	8002c0c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		config->GPIO_Pin_Disable(GPIOA, 9);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2209      	movs	r2, #9
 80016d8:	4918      	ldr	r1, [pc, #96]	; (800173c <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x90>)
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 fad4 	bl	8002c88 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
	{
		direction=2;
		config->GPIO_Pin_Disable(GPIOA, 9);
		config->GPIO_Pin_Disable(GPIOA, 8);
	}
}
 80016e0:	e028      	b.n	8001734 <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x88>
	else if(dir==CCW_P)
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d111      	bne.n	800170c <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x60>
		direction=1;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	721a      	strb	r2, [r3, #8]
		config->GPIO_Pin_Enable(GPIOA, 9);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2209      	movs	r2, #9
 80016f4:	4911      	ldr	r1, [pc, #68]	; (800173c <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x90>)
 80016f6:	4618      	mov	r0, r3
 80016f8:	f001 fa88 	bl	8002c0c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		config->GPIO_Pin_Disable(GPIOA, 8);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2208      	movs	r2, #8
 8001702:	490e      	ldr	r1, [pc, #56]	; (800173c <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x90>)
 8001704:	4618      	mov	r0, r3
 8001706:	f001 fabf 	bl	8002c88 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
}
 800170a:	e013      	b.n	8001734 <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x88>
	else if (dir==IDLE_P)
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	2b03      	cmp	r3, #3
 8001710:	d110      	bne.n	8001734 <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x88>
		direction=2;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2202      	movs	r2, #2
 8001716:	721a      	strb	r2, [r3, #8]
		config->GPIO_Pin_Disable(GPIOA, 9);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2209      	movs	r2, #9
 800171e:	4907      	ldr	r1, [pc, #28]	; (800173c <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x90>)
 8001720:	4618      	mov	r0, r3
 8001722:	f001 fab1 	bl	8002c88 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
		config->GPIO_Pin_Disable(GPIOA, 8);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2208      	movs	r2, #8
 800172c:	4903      	ldr	r1, [pc, #12]	; (800173c <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x90>)
 800172e:	4618      	mov	r0, r3
 8001730:	f001 faaa 	bl	8002c88 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020000 	.word	0x40020000

08001740 <_ZN3PIDC1Eddd>:
 *      Author: Justin
 */

#include "PID.h"

PID::PID(double kp, double ki, double kd)
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	61f8      	str	r0, [r7, #28]
 8001748:	ed87 0b04 	vstr	d0, [r7, #16]
 800174c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001750:	ed87 2b00 	vstr	d2, [r7]
 8001754:	4a18      	ldr	r2, [pc, #96]	; (80017b8 <_ZN3PIDC1Eddd+0x78>)
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	601a      	str	r2, [r3, #0]
{
	constanteKp = kp;
 800175a:	69f9      	ldr	r1, [r7, #28]
 800175c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001760:	e9c1 2302 	strd	r2, r3, [r1, #8]
	constanteKi = ki;
 8001764:	69f9      	ldr	r1, [r7, #28]
 8001766:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800176a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	constanteKd = kd;
 800176e:	69f9      	ldr	r1, [r7, #28]
 8001770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001774:	e9c1 2306 	strd	r2, r3, [r1, #24]

	valeurSortiePID = 0;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	2200      	movs	r2, #0
 800177c:	841a      	strh	r2, [r3, #32]
	valMesureePrecedente = 0;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	erreur = 0;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	2200      	movs	r2, #0
 800178a:	849a      	strh	r2, [r3, #36]	; 0x24
	erreurCumulee = 0;
 800178c:	69f9      	ldr	r1, [r7, #28]
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	erreurRaw = 0;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	2200      	movs	r2, #0
 800179e:	861a      	strh	r2, [r3, #48]	; 0x30

	directionMoteur = 0;
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

}
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	4618      	mov	r0, r3
 80017ac:	3724      	adds	r7, #36	; 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	08003f40 	.word	0x08003f40

080017bc <_ZN3PID9calculPIDEhh>:

void PID::calculPID(uint8_t positionAxeActuel, uint8_t positionAxeVoulue)
{
 80017bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	70fb      	strb	r3, [r7, #3]
 80017ca:	4613      	mov	r3, r2
 80017cc:	70bb      	strb	r3, [r7, #2]
	erreur = positionAxeVoulue - positionAxeActuel;
 80017ce:	78bb      	ldrb	r3, [r7, #2]
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	b29b      	uxth	r3, r3
 80017da:	b21a      	sxth	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	849a      	strh	r2, [r3, #36]	; 0x24

	erreurRaw = abs(erreur);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bfb8      	it	lt
 80017ea:	425b      	neglt	r3, r3
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	861a      	strh	r2, [r3, #48]	; 0x30
	if(erreur < 0)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	da04      	bge.n	8001808 <_ZN3PID9calculPIDEhh+0x4c>
	{
		directionMoteur = MOTEUR_HORAIRE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8001806:	e008      	b.n	800181a <_ZN3PID9calculPIDEhh+0x5e>
	}

	else if(erreur > 0)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800180e:	2b00      	cmp	r3, #0
 8001810:	dd03      	ble.n	800181a <_ZN3PID9calculPIDEhh+0x5e>
	{
		directionMoteur = MOTEUR_ANTIHORAIRE;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}


	erreurCumulee += erreur;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe ff72 	bl	8000710 <__aeabi_i2d>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4620      	mov	r0, r4
 8001832:	4629      	mov	r1, r5
 8001834:	f7fe fe20 	bl	8000478 <__adddf3>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	erreur = abs(erreur);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001848:	2b00      	cmp	r3, #0
 800184a:	bfb8      	it	lt
 800184c:	425b      	neglt	r3, r3
 800184e:	b29b      	uxth	r3, r3
 8001850:	b21a      	sxth	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	849a      	strh	r2, [r3, #36]	; 0x24


	valeurSortiePID = (constanteKp * erreur) + (constanteKi * erreurCumulee) + (constanteKd *(positionAxeActuel - valMesureePrecedente));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe ff54 	bl	8000710 <__aeabi_i2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4620      	mov	r0, r4
 800186e:	4629      	mov	r1, r5
 8001870:	f7fe fcd2 	bl	8000218 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4614      	mov	r4, r2
 800187a:	461d      	mov	r5, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001888:	f7fe fcc6 	bl	8000218 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4620      	mov	r0, r4
 8001892:	4629      	mov	r1, r5
 8001894:	f7fe fdf0 	bl	8000478 <__adddf3>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4690      	mov	r8, r2
 800189e:	4699      	mov	r9, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe ff2d 	bl	8000710 <__aeabi_i2d>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4620      	mov	r0, r4
 80018bc:	4629      	mov	r1, r5
 80018be:	f7fe fcab 	bl	8000218 <__aeabi_dmul>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4640      	mov	r0, r8
 80018c8:	4649      	mov	r1, r9
 80018ca:	f7fe fdd5 	bl	8000478 <__adddf3>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f7fe ff85 	bl	80007e4 <__aeabi_d2iz>
 80018da:	4603      	mov	r3, r0
 80018dc:	b21a      	sxth	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	841a      	strh	r2, [r3, #32]
	valMesureePrecedente = positionAxeActuel;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	valeurSortiePID = abs(valeurSortiePID);  //renvoie la valeur absolue de erreur
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bfb8      	it	lt
 80018f4:	425b      	neglt	r3, r3
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	841a      	strh	r2, [r3, #32]



	if(valeurSortiePID > VITESSE_MAX_MOTEUR)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001908:	dd04      	ble.n	8001914 <_ZN3PID9calculPIDEhh+0x158>
	{
		valeurSortiePID = VITESSE_MAX_MOTEUR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001910:	841a      	strh	r2, [r3, #32]

	else if(valeurSortiePID < VITESSE_MIN_MOTEUR)
	{
		valeurSortiePID = VITESSE_MAX_MOTEUR;
	}
}
 8001912:	e008      	b.n	8001926 <_ZN3PID9calculPIDEhh+0x16a>
	else if(valeurSortiePID < VITESSE_MIN_MOTEUR)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800191a:	2b00      	cmp	r3, #0
 800191c:	dc03      	bgt.n	8001926 <_ZN3PID9calculPIDEhh+0x16a>
		valeurSortiePID = VITESSE_MAX_MOTEUR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001924:	841a      	strh	r2, [r3, #32]
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001930 <_ZN3PID18getDirectionMoteurEv>:

bool PID::getDirectionMoteur()
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	return directionMoteur;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <_ZN3PID11getValuePIDEv>:

uint32_t PID::getValuePID()
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
	return valeurSortiePID;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_ZN3PID12getErreurRawEv>:

int16_t PID::getErreurRaw()
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	return this->erreurRaw;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <_ZN3PIDD1Ev>:

PID::~PID() {
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <_ZN3PIDD1Ev+0x1c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	08003f40 	.word	0x08003f40

080019a0 <_ZN3PIDD0Ev>:
PID::~PID() {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
}
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ffe9 	bl	8001980 <_ZN3PIDD1Ev>
 80019ae:	2138      	movs	r1, #56	; 0x38
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f002 f88e 	bl	8003ad2 <_ZdlPvj>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_ZN24PositionAxePotentiometreC1Eh>:
 *      Author: Justin
 */

#include "PositionAxePotentiometre.h"

PositionAxePotentiometre::PositionAxePotentiometre(uint8_t noAxeRobot)
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	70fb      	strb	r3, [r7, #3]
 80019cc:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <_ZN24PositionAxePotentiometreC1Eh+0x60>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	601a      	str	r2, [r3, #0]
{
	adc =  new Adc1Stm32f446re(noAxeRobot);
 80019d2:	20b0      	movs	r0, #176	; 0xb0
 80019d4:	f002 f87f 	bl	8003ad6 <_Znwj>
 80019d8:	4603      	mov	r3, r0
 80019da:	461c      	mov	r4, r3
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	4619      	mov	r1, r3
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7fe ff27 	bl	8000834 <_ZN15Adc1Stm32f446reC1Eh>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	605c      	str	r4, [r3, #4]
	filtreFenetreGlissante = new FiltreFenetreGlissante();
 80019ea:	200c      	movs	r0, #12
 80019ec:	f002 f873 	bl	8003ad6 <_Znwj>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461c      	mov	r4, r3
 80019f4:	4620      	mov	r0, r4
 80019f6:	f7ff fbb7 	bl	8001168 <_ZN22FiltreFenetreGlissanteC1Ev>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	609c      	str	r4, [r3, #8]
	positionAxePourcentage = 0;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	731a      	strb	r2, [r3, #12]
	rawPosition = 0;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	739a      	strb	r2, [r3, #14]
	this->noAxeRobot = noAxeRobot;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	735a      	strb	r2, [r3, #13]
	rawPosition = 1;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	739a      	strb	r2, [r3, #14]
}
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd90      	pop	{r4, r7, pc}
 8001a20:	08003f50 	.word	0x08003f50

08001a24 <_ZN24PositionAxePotentiometre22setPositionPourcentageEh>:

void PositionAxePotentiometre::setPositionPourcentage(uint8_t positionPourcentage)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70fb      	strb	r3, [r7, #3]
	this->positionAxePourcentage = positionPourcentage;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	731a      	strb	r2, [r3, #12]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_ZN24PositionAxePotentiometre22getPositionPourcentageEv>:

uint8_t PositionAxePotentiometre::getPositionPourcentage()
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
//	return this->positionAxePourcentage;
	return filtreFenetreGlissante->resultatFiltre();
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fbc6 	bl	80011e0 <_ZN22FiltreFenetreGlissante14resultatFiltreEv>
 8001a54:	4603      	mov	r3, r0
 8001a56:	b2db      	uxtb	r3, r3
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv>:

void PositionAxePotentiometre::acquisitionNewPositionAxe()
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	adc->startAdcConversion();
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff f9fb 	bl	8000e68 <_ZN15Adc1Stm32f446re18startAdcConversionEv>
	if(adc->waitEocFlag())
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fa18 	bl	8000eac <_ZN15Adc1Stm32f446re11waitEocFlagEv>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	bf14      	ite	ne
 8001a82:	2301      	movne	r3, #1
 8001a84:	2300      	moveq	r3, #0
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d06d      	beq.n	8001b68 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0x108>
	{
		rawPosition = adc->getConversion();
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff f9b9 	bl	8000e08 <_ZN15Adc1Stm32f446re13getConversionEv>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	739a      	strb	r2, [r3, #14]
		switch(noAxeRobot)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7b5b      	ldrb	r3, [r3, #13]
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d02f      	beq.n	8001b06 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0xa6>
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	dc44      	bgt.n	8001b34 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0xd4>
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d019      	beq.n	8001ae2 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0x82>
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d140      	bne.n	8001b34 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0xd4>
		{
		case 4:
			if(rawPosition < POSITION_MIN_COUDE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7b9b      	ldrb	r3, [r3, #14]
 8001ab6:	2b81      	cmp	r3, #129	; 0x81
 8001ab8:	d802      	bhi.n	8001ac0 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0x60>
			{
				rawPosition = POSITION_MIN_COUDE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2282      	movs	r2, #130	; 0x82
 8001abe:	739a      	strb	r2, [r3, #14]
			}
			positionAxePourcentage = (100 * (rawPosition - POSITION_MIN_COUDE))/ (POSITION_MAX_COUDE - POSITION_MIN_COUDE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7b9b      	ldrb	r3, [r3, #14]
 8001ac4:	3b82      	subs	r3, #130	; 0x82
 8001ac6:	2264      	movs	r2, #100	; 0x64
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	4a28      	ldr	r2, [pc, #160]	; (8001b70 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0x110>)
 8001ace:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad2:	441a      	add	r2, r3
 8001ad4:	1152      	asrs	r2, r2, #5
 8001ad6:	17db      	asrs	r3, r3, #31
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	731a      	strb	r2, [r3, #12]
			break;
 8001ae0:	e028      	b.n	8001b34 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0xd4>

		case 3:
			if(rawPosition < POSITION_MIN_EPAULE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	7b9b      	ldrb	r3, [r3, #14]
 8001ae6:	2b81      	cmp	r3, #129	; 0x81
 8001ae8:	d802      	bhi.n	8001af0 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0x90>
			{
				rawPosition = POSITION_MIN_EPAULE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2282      	movs	r2, #130	; 0x82
 8001aee:	739a      	strb	r2, [r3, #14]
			}
			positionAxePourcentage = (100 * (rawPosition - POSITION_MIN_EPAULE))/ (POSITION_MAX_EPAULE - POSITION_MIN_EPAULE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7b9b      	ldrb	r3, [r3, #14]
 8001af4:	461a      	mov	r2, r3
 8001af6:	0092      	lsls	r2, r2, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	3376      	adds	r3, #118	; 0x76
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	731a      	strb	r2, [r3, #12]
			break;
 8001b04:	e016      	b.n	8001b34 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0xd4>

		case 5:
			if(rawPosition < POSITION_MIN_PINCE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7b9b      	ldrb	r3, [r3, #14]
 8001b0a:	2bb9      	cmp	r3, #185	; 0xb9
 8001b0c:	d802      	bhi.n	8001b14 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0xb4>
			{
				rawPosition = POSITION_MIN_PINCE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	22ba      	movs	r2, #186	; 0xba
 8001b12:	739a      	strb	r2, [r3, #14]
			}

			positionAxePourcentage = (100 * (rawPosition - POSITION_MIN_PINCE))/ (POSITION_MAX_PINCE - POSITION_MIN_PINCE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7b9b      	ldrb	r3, [r3, #14]
 8001b18:	3bba      	subs	r3, #186	; 0xba
 8001b1a:	2264      	movs	r2, #100	; 0x64
 8001b1c:	fb02 f303 	mul.w	r3, r2, r3
 8001b20:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0x114>)
 8001b22:	fb82 1203 	smull	r1, r2, r2, r3
 8001b26:	1152      	asrs	r2, r2, #5
 8001b28:	17db      	asrs	r3, r3, #31
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	731a      	strb	r2, [r3, #12]
			break;
 8001b32:	bf00      	nop
		}

		if(positionAxePourcentage > 100)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7b1b      	ldrb	r3, [r3, #12]
 8001b38:	2b64      	cmp	r3, #100	; 0x64
 8001b3a:	d902      	bls.n	8001b42 <_ZN24PositionAxePotentiometre25acquisitionNewPositionAxeEv+0xe2>
		{
			positionAxePourcentage = 100;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2264      	movs	r2, #100	; 0x64
 8001b40:	731a      	strb	r2, [r3, #12]
		}
		setPositionPourcentage(positionAxePourcentage);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7b1b      	ldrb	r3, [r3, #12]
 8001b46:	4619      	mov	r1, r3
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff6b 	bl	8001a24 <_ZN24PositionAxePotentiometre22setPositionPourcentageEh>
		filtreFenetreGlissante->miseNiveauFiltre(positionAxePourcentage);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7b1b      	ldrb	r3, [r3, #12]
 8001b56:	4619      	mov	r1, r3
 8001b58:	4610      	mov	r0, r2
 8001b5a:	f7ff fb21 	bl	80011a0 <_ZN22FiltreFenetreGlissante16miseNiveauFiltreEh>
		adc->clearEocFlag();
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff f9ca 	bl	8000efc <_ZN15Adc1Stm32f446re12clearEocFlagEv>
	}

}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	88888889 	.word	0x88888889
 8001b74:	76b981db 	.word	0x76b981db

08001b78 <_ZN24PositionAxePotentiometreD1Ev>:
uint8_t PositionAxePotentiometre::getValueFiltreFenetreGlissante()
{

}

PositionAxePotentiometre::~PositionAxePotentiometre()
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <_ZN24PositionAxePotentiometreD1Ev+0x1c>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	08003f50 	.word	0x08003f50

08001b98 <_ZN24PositionAxePotentiometreD0Ev>:
PositionAxePotentiometre::~PositionAxePotentiometre()
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
}
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ffe9 	bl	8001b78 <_ZN24PositionAxePotentiometreD1Ev>
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f001 ff92 	bl	8003ad2 <_ZdlPvj>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	f003 021f 	and.w	r2, r3, #31
 8001bca:	4907      	ldr	r1, [pc, #28]	; (8001be8 <NVIC_EnableIRQ+0x30>)
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	095b      	lsrs	r3, r3, #5
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000e100 	.word	0xe000e100

08001bec <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	da0c      	bge.n	8001c1a <NVIC_SetPriority+0x2e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	490d      	ldr	r1, [pc, #52]	; (8001c3c <NVIC_SetPriority+0x50>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	3b04      	subs	r3, #4
 8001c10:	0112      	lsls	r2, r2, #4
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	440b      	add	r3, r1
 8001c16:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e009      	b.n	8001c2e <NVIC_SetPriority+0x42>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	; (8001c40 <NVIC_SetPriority+0x54>)
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	0112      	lsls	r2, r2, #4
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	440b      	add	r3, r1
 8001c2a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00
 8001c40:	e000e100 	.word	0xe000e100

08001c44 <_ZN15STM32F446Usart3C1Ev>:
#include "STM32F446Usart.h"

STM32F446Usart3* STM32F446Usart3::instance =0;


STM32F446Usart3::STM32F446Usart3()
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	4a38      	ldr	r2, [pc, #224]	; (8001d30 <_ZN15STM32F446Usart3C1Ev+0xec>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3308      	adds	r3, #8
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f9b4 	bl	8001fc4 <_ZN8BuffFifoImLt64EEC1Ev>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f9ae 	bl	8001fc4 <_ZN8BuffFifoImLt64EEC1Ev>
{
	config = new hardwareConfig();
 8001c68:	2004      	movs	r0, #4
 8001c6a:	f001 ff34 	bl	8003ad6 <_Znwj>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461c      	mov	r4, r3
 8001c72:	4620      	mov	r0, r4
 8001c74:	f000 fecc 	bl	8002a10 <_ZN14hardwareConfigC1Ev>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218
	//active la clk du gpio B et du usart 3
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;//(1<<18)
 8001c7e:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <_ZN15STM32F446Usart3C1Ev+0xf0>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a2c      	ldr	r2, [pc, #176]	; (8001d34 <_ZN15STM32F446Usart3C1Ev+0xf0>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <_ZN15STM32F446Usart3C1Ev+0xf0>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a29      	ldr	r2, [pc, #164]	; (8001d34 <_ZN15STM32F446Usart3C1Ev+0xf0>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40


	//mode alternatif pour pb10 et 11
	config->GPIO_Config(GPIOC, 10, ALTERNATE, 7);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
 8001c9c:	2307      	movs	r3, #7
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	220a      	movs	r2, #10
 8001ca4:	4924      	ldr	r1, [pc, #144]	; (8001d38 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8001ca6:	f000 ff51 	bl	8002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
	config->GPIO_Config(GPIOC, 5 , ALTERNATE, 7);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
 8001cb0:	2307      	movs	r3, #7
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	2205      	movs	r2, #5
 8001cb8:	491f      	ldr	r1, [pc, #124]	; (8001d38 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8001cba:	f000 ff47 	bl	8002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
	GPIOC->AFR[0] |= (7<<8); // registre af7 fction alternative USART3
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8001cc4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cc8:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[1] |= (7<<12);
 8001cca:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	4a1a      	ldr	r2, [pc, #104]	; (8001d38 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8001cd0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001cd4:	6253      	str	r3, [r2, #36]	; 0x24

	//sélection du baud 8N1 @9600
	USART3->CR1 &= ~USART_CR1_UE;// usart disable
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <_ZN15STM32F446Usart3C1Ev+0xf8>)
 8001cd8:	899b      	ldrh	r3, [r3, #12]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <_ZN15STM32F446Usart3C1Ev+0xf8>)
 8001cde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	8193      	strh	r3, [r2, #12]
	NVIC_EnableIRQ(USART3_IRQn);
 8001ce6:	2027      	movs	r0, #39	; 0x27
 8001ce8:	f7ff ff66 	bl	8001bb8 <NVIC_EnableIRQ>
	NVIC_SetPriority(USART3_IRQn,4);
 8001cec:	2104      	movs	r1, #4
 8001cee:	2027      	movs	r0, #39	; 0x27
 8001cf0:	f7ff ff7c 	bl	8001bec <NVIC_SetPriority>
	//active le tx et rx + les interruptions dee chaqu'un
	USART3->CR1 |=  USART_CR1_TE | USART_CR1_RE |  USART_CR1_RXNEIE | USART_CR1_TXEIE;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <_ZN15STM32F446Usart3C1Ev+0xf8>)
 8001cf6:	899b      	ldrh	r3, [r3, #12]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <_ZN15STM32F446Usart3C1Ev+0xf8>)
 8001cfc:	f043 03ac 	orr.w	r3, r3, #172	; 0xac
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	8193      	strh	r3, [r2, #12]
	setBaudRate(9600);
 8001d04:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f8bf 	bl	8001e8c <_ZN15STM32F446Usart311setBaudRateEm>
	USART3->CR1 |= USART_CR1_UE; //usart enable
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <_ZN15STM32F446Usart3C1Ev+0xf8>)
 8001d10:	899b      	ldrh	r3, [r3, #12]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <_ZN15STM32F446Usart3C1Ev+0xf8>)
 8001d16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	8193      	strh	r3, [r2, #12]


	isTransmitting = false;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	711a      	strb	r2, [r3, #4]
}
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd90      	pop	{r4, r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	08003f60 	.word	0x08003f60
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	40004800 	.word	0x40004800

08001d40 <_ZN15STM32F446Usart3D1Ev>:

STM32F446Usart3::~STM32F446Usart3()
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	4a11      	ldr	r2, [pc, #68]	; (8001d90 <_ZN15STM32F446Usart3D1Ev+0x50>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	601a      	str	r2, [r3, #0]
{
	if (instance)
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <_ZN15STM32F446Usart3D1Ev+0x54>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d008      	beq.n	8001d68 <_ZN15STM32F446Usart3D1Ev+0x28>
		delete instance;
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <_ZN15STM32F446Usart3D1Ev+0x54>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d004      	beq.n	8001d68 <_ZN15STM32F446Usart3D1Ev+0x28>
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	3204      	adds	r2, #4
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	4790      	blx	r2
	if(config)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d009      	beq.n	8001d86 <_ZN15STM32F446Usart3D1Ev+0x46>
		delete config;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <_ZN15STM32F446Usart3D1Ev+0x46>
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	3204      	adds	r2, #4
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	4790      	blx	r2
}
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	08003f60 	.word	0x08003f60
 8001d94:	200000b0 	.word	0x200000b0

08001d98 <_ZN15STM32F446Usart3D0Ev>:
STM32F446Usart3::~STM32F446Usart3()
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
}
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ffcd 	bl	8001d40 <_ZN15STM32F446Usart3D1Ev>
 8001da6:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f001 fe91 	bl	8003ad2 <_ZdlPvj>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <_ZN15STM32F446Usart311getInstanceEv>:
STM32F446Usart3 * STM32F446Usart3::getInstance()
{
 8001dbc:	b598      	push	{r3, r4, r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
	if(instance==0)
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <_ZN15STM32F446Usart311getInstanceEv+0x2c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10a      	bne.n	8001dde <_ZN15STM32F446Usart311getInstanceEv+0x22>
		instance=new STM32F446Usart3();
 8001dc8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8001dcc:	f001 fe83 	bl	8003ad6 <_Znwj>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461c      	mov	r4, r3
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f7ff ff35 	bl	8001c44 <_ZN15STM32F446Usart3C1Ev>
 8001dda:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <_ZN15STM32F446Usart311getInstanceEv+0x2c>)
 8001ddc:	601c      	str	r4, [r3, #0]
	return instance;
 8001dde:	4b02      	ldr	r3, [pc, #8]	; (8001de8 <_ZN15STM32F446Usart311getInstanceEv+0x2c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	bd98      	pop	{r3, r4, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200000b0 	.word	0x200000b0

08001dec <_ZN15STM32F446Usart35writeEh>:
void STM32F446Usart3::write(uint8_t data)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	70fb      	strb	r3, [r7, #3]
	buffTx.add(data);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001dfe:	78fa      	ldrb	r2, [r7, #3]
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f8ea 	bl	8001fdc <_ZN8BuffFifoImLt64EE3addEm>
	if(!isTransmitting)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	791b      	ldrb	r3, [r3, #4]
 8001e0c:	f083 0301 	eor.w	r3, r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00a      	beq.n	8001e2c <_ZN15STM32F446Usart35writeEh+0x40>
	{
		isTransmitting =true;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	711a      	strb	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_TXEIE;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <_ZN15STM32F446Usart35writeEh+0x48>)
 8001e1e:	899b      	ldrh	r3, [r3, #12]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <_ZN15STM32F446Usart35writeEh+0x48>)
 8001e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	8193      	strh	r3, [r2, #12]
	}
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40004800 	.word	0x40004800

08001e38 <_ZN15STM32F446Usart34readEv>:
		{
			write(*string++);
		}
}
uint8_t STM32F446Usart3:: read(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	if(buffRx.isEmpty())
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3308      	adds	r3, #8
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 f8ea 	bl	800201e <_ZNK8BuffFifoImLt64EE7isEmptyEv>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <_ZN15STM32F446Usart34readEv+0x1c>
		return 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	e006      	b.n	8001e62 <_ZN15STM32F446Usart34readEv+0x2a>
	return buffRx.rem();
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3308      	adds	r3, #8
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 f8f3 	bl	8002044 <_ZN8BuffFifoImLt64EE3remEv>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	b2db      	uxtb	r3, r3
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_ZNK15STM32F446Usart313dataAvailableEv>:
bool STM32F446Usart3::dataAvailable() const
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
	return !buffRx.isEmpty();
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3308      	adds	r3, #8
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f8d1 	bl	800201e <_ZNK8BuffFifoImLt64EE7isEmptyEv>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f083 0301 	eor.w	r3, r3, #1
 8001e82:	b2db      	uxtb	r3, r3
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_ZN15STM32F446Usart311setBaudRateEm>:
void STM32F446Usart3::setBaudRate(uint32_t baudrate)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
	if(baudrate > 2810000)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	4a14      	ldr	r2, [pc, #80]	; (8001eec <_ZN15STM32F446Usart311setBaudRateEm+0x60>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d90a      	bls.n	8001eb4 <_ZN15STM32F446Usart311setBaudRateEm+0x28>
		USART3->CR1 |= USART_CR1_OVER8;
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 8001ea0:	899b      	ldrh	r3, [r3, #12]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 8001ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	8193      	strh	r3, [r2, #12]
 8001eb2:	e007      	b.n	8001ec4 <_ZN15STM32F446Usart311setBaudRateEm+0x38>
	else
		USART3->CR1 &= ~USART_CR1_OVER8;
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 8001eb6:	899b      	ldrh	r3, [r3, #12]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	4a0d      	ldr	r2, [pc, #52]	; (8001ef0 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 8001ebc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	8193      	strh	r3, [r2, #12]

	USART3->BRR |= (SystemCoreClock>>2) / baudrate;
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 8001ec6:	891b      	ldrh	r3, [r3, #8]
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <_ZN15STM32F446Usart311setBaudRateEm+0x68>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	0899      	lsrs	r1, r3, #2
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	4905      	ldr	r1, [pc, #20]	; (8001ef0 <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	810b      	strh	r3, [r1, #8]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	002ae090 	.word	0x002ae090
 8001ef0:	40004800 	.word	0x40004800
 8001ef4:	2000001c 	.word	0x2000001c

08001ef8 <USART3_IRQHandler>:

extern "C"
{
void USART3_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
	volatile unsigned int usartStatus;
	char tmp;
	//recupere le statu de l'usart
	usartStatus = USART3->SR;
 8001efe:	4b2f      	ldr	r3, [pc, #188]	; (8001fbc <USART3_IRQHandler+0xc4>)
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	603b      	str	r3, [r7, #0]

	if(usartStatus & USART_SR_RXNE)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f003 0320 	and.w	r3, r3, #32
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf14      	ite	ne
 8001f10:	2301      	movne	r3, #1
 8001f12:	2300      	moveq	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d013      	beq.n	8001f42 <USART3_IRQHandler+0x4a>
	{
		USART3->SR &= ~USART_SR_RXNE;
 8001f1a:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <USART3_IRQHandler+0xc4>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4a26      	ldr	r2, [pc, #152]	; (8001fbc <USART3_IRQHandler+0xc4>)
 8001f22:	f023 0320 	bic.w	r3, r3, #32
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	8013      	strh	r3, [r2, #0]
		tmp =USART3->DR;
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <USART3_IRQHandler+0xc4>)
 8001f2c:	889b      	ldrh	r3, [r3, #4]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	71fb      	strb	r3, [r7, #7]
		STM32F446Usart3::instance->buffRx.add(tmp);
 8001f32:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <USART3_IRQHandler+0xc8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3308      	adds	r3, #8
 8001f38:	79fa      	ldrb	r2, [r7, #7]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 f84d 	bl	8001fdc <_ZN8BuffFifoImLt64EE3addEm>
	}
	if(usartStatus & USART_SR_TXE)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf14      	ite	ne
 8001f4c:	2301      	movne	r3, #1
 8001f4e:	2300      	moveq	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d02d      	beq.n	8001fb2 <USART3_IRQHandler+0xba>
	{
		USART3->SR &= ~USART_CR1_TXEIE;
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <USART3_IRQHandler+0xc4>)
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <USART3_IRQHandler+0xc4>)
 8001f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	8013      	strh	r3, [r2, #0]
		if(STM32F446Usart3::instance->buffTx.isEmpty())
 8001f66:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <USART3_IRQHandler+0xc8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f855 	bl	800201e <_ZNK8BuffFifoImLt64EE7isEmptyEv>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00c      	beq.n	8001f94 <USART3_IRQHandler+0x9c>
		{
			STM32F446Usart3::instance->isTransmitting =false;
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <USART3_IRQHandler+0xc8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	711a      	strb	r2, [r3, #4]
			USART3->CR1 &= (~USART_CR1_TXEIE);
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <USART3_IRQHandler+0xc4>)
 8001f84:	899b      	ldrh	r3, [r3, #12]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <USART3_IRQHandler+0xc4>)
 8001f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	8193      	strh	r3, [r2, #12]

			USART3->DR = STM32F446Usart3::instance->buffTx.rem();
			STM32F446Usart3::instance->isTransmitting= true;
		}
	}
}
 8001f92:	e00e      	b.n	8001fb2 <USART3_IRQHandler+0xba>
			USART3->DR = STM32F446Usart3::instance->buffTx.rem();
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <USART3_IRQHandler+0xc8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 f851 	bl	8002044 <_ZN8BuffFifoImLt64EE3remEv>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <USART3_IRQHandler+0xc4>)
 8001fa6:	b292      	uxth	r2, r2
 8001fa8:	809a      	strh	r2, [r3, #4]
			STM32F446Usart3::instance->isTransmitting= true;
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <USART3_IRQHandler+0xc8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	711a      	strb	r2, [r3, #4]
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40004800 	.word	0x40004800
 8001fc0:	200000b0 	.word	0x200000b0

08001fc4 <_ZN8BuffFifoImLt64EEC1Ev>:
	T data [nSize];
public:
	/**
	 * Constructeur
	 */
	BuffFifo()
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
{
		reset();
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f858 	bl	8002082 <_ZN8BuffFifoImLt64EE5resetEv>
}
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <_ZN8BuffFifoImLt64EE3addEm>:
	/**
	 * Ajoute un élément dans le buffer
	 * @param e élément à ajouter
	 * @return 1 si l'ajout c'est bien passé.
	 */
	bool add(T e)
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
	{
		if( (in + 1) != out )
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d00d      	beq.n	8002010 <_ZN8BuffFifoImLt64EE3addEm+0x34>
		{
			data[in++ & (nSize-1)] = e;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	1c59      	adds	r1, r3, #1
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6011      	str	r1, [r2, #0]
 8001ffe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3202      	adds	r2, #2
 8002006:	6839      	ldr	r1, [r7, #0]
 8002008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			return 1;
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <_ZN8BuffFifoImLt64EE3addEm+0x36>
		}
		return 0;
 8002010:	2300      	movs	r3, #0
	}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <_ZNK8BuffFifoImLt64EE7isEmptyEv>:
	}
	/**
	 * Valide si le buffer est vide
	 * @return 1 si le buffer est vide
	 */
	bool isEmpty() const{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
		return (out == in);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	bf0c      	ite	eq
 8002032:	2301      	moveq	r3, #1
 8002034:	2300      	movne	r3, #0
 8002036:	b2db      	uxtb	r3, r3
	}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <_ZN8BuffFifoImLt64EE3remEv>:
	T rem(){
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
		if (!isEmpty())
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ffe6 	bl	800201e <_ZNK8BuffFifoImLt64EE7isEmptyEv>
 8002052:	4603      	mov	r3, r0
 8002054:	f083 0301 	eor.w	r3, r3, #1
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <_ZN8BuffFifoImLt64EE3remEv+0x32>
			return data[out++ & (nSize-1)] ;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	1c59      	adds	r1, r3, #1
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6051      	str	r1, [r2, #4]
 8002068:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3202      	adds	r2, #2
 8002070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002074:	e001      	b.n	800207a <_ZN8BuffFifoImLt64EE3remEv+0x36>
		return data[0];
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
	}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_ZN8BuffFifoImLt64EE5resetEv>:
	void reset()
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
		in = 0;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
		out = 0;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	605a      	str	r2, [r3, #4]
	}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <NVIC_EnableIRQ>:
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	f003 021f 	and.w	r2, r3, #31
 80020b6:	4907      	ldr	r1, [pc, #28]	; (80020d4 <NVIC_EnableIRQ+0x30>)
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	095b      	lsrs	r3, r3, #5
 80020be:	2001      	movs	r0, #1
 80020c0:	fa00 f202 	lsl.w	r2, r0, r2
 80020c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000e100 	.word	0xe000e100

080020d8 <NVIC_SetPriority>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	da0c      	bge.n	8002106 <NVIC_SetPriority+0x2e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	490d      	ldr	r1, [pc, #52]	; (8002128 <NVIC_SetPriority+0x50>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	e009      	b.n	800211a <NVIC_SetPriority+0x42>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4908      	ldr	r1, [pc, #32]	; (800212c <NVIC_SetPriority+0x54>)
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	0112      	lsls	r2, r2, #4
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	440b      	add	r3, r1
 8002116:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00
 800212c:	e000e100 	.word	0xe000e100

08002130 <_ZN5TimerD1Ev>:
	 */
	Timer(TIM_TypeDef * tmr, uint32_t us,bool interruptEnable);
	/*
	 * Destructeur
	 */
	virtual ~Timer(){};
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	4a04      	ldr	r2, [pc, #16]	; (800214c <_ZN5TimerD1Ev+0x1c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	08003fac 	.word	0x08003fac

08002150 <_ZN5TimerD0Ev>:
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ffe9 	bl	8002130 <_ZN5TimerD1Ev>
 800215e:	2108      	movs	r1, #8
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f001 fcb6 	bl	8003ad2 <_ZdlPvj>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <_ZN5TimerC1EP11TIM_TypeDefmb>:
 *      Author: Tristan Franc
 */

#include "Timer_PWM.h"

Timer::Timer(TIM_TypeDef * tmr, uint32_t us,bool interruptEnable)
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	70fb      	strb	r3, [r7, #3]
 800217e:	4a4c      	ldr	r2, [pc, #304]	; (80022b0 <_ZN5TimerC1EP11TIM_TypeDefmb+0x140>)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	601a      	str	r2, [r3, #0]
{
	timer = tmr;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	605a      	str	r2, [r3, #4]
	if(tmr== TIM1)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4a49      	ldr	r2, [pc, #292]	; (80022b4 <_ZN5TimerC1EP11TIM_TypeDefmb+0x144>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d10f      	bne.n	80021b2 <_ZN5TimerC1EP11TIM_TypeDefmb+0x42>
	{
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8002192:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4a48      	ldr	r2, [pc, #288]	; (80022b8 <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6453      	str	r3, [r2, #68]	; 0x44
		if(interruptEnable)
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d006      	beq.n	80021b2 <_ZN5TimerC1EP11TIM_TypeDefmb+0x42>
		{
			NVIC_EnableIRQ(TIM1_CC_IRQn);
 80021a4:	201b      	movs	r0, #27
 80021a6:	f7ff ff7d 	bl	80020a4 <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM1_CC_IRQn, 2);
 80021aa:	2102      	movs	r1, #2
 80021ac:	201b      	movs	r0, #27
 80021ae:	f7ff ff93 	bl	80020d8 <NVIC_SetPriority>
		}
	}
	if ( tmr == TIM2)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b8:	d10f      	bne.n	80021da <_ZN5TimerC1EP11TIM_TypeDefmb+0x6a>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80021ba:	4b3f      	ldr	r3, [pc, #252]	; (80022b8 <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a3e      	ldr	r2, [pc, #248]	; (80022b8 <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
		if(interruptEnable)
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <_ZN5TimerC1EP11TIM_TypeDefmb+0x6a>
		{
			NVIC_EnableIRQ(TIM2_IRQn);
 80021cc:	201c      	movs	r0, #28
 80021ce:	f7ff ff69 	bl	80020a4 <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM2_IRQn,1);
 80021d2:	2101      	movs	r1, #1
 80021d4:	201c      	movs	r0, #28
 80021d6:	f7ff ff7f 	bl	80020d8 <NVIC_SetPriority>
		}
	}
	if ( tmr == TIM3)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4a37      	ldr	r2, [pc, #220]	; (80022bc <_ZN5TimerC1EP11TIM_TypeDefmb+0x14c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10f      	bne.n	8002202 <_ZN5TimerC1EP11TIM_TypeDefmb+0x92>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80021e2:	4b35      	ldr	r3, [pc, #212]	; (80022b8 <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a34      	ldr	r2, [pc, #208]	; (80022b8 <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
		if(interruptEnable)
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <_ZN5TimerC1EP11TIM_TypeDefmb+0x92>
		{
			NVIC_EnableIRQ(TIM3_IRQn);
 80021f4:	201d      	movs	r0, #29
 80021f6:	f7ff ff55 	bl	80020a4 <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM3_IRQn,1);
 80021fa:	2101      	movs	r1, #1
 80021fc:	201d      	movs	r0, #29
 80021fe:	f7ff ff6b 	bl	80020d8 <NVIC_SetPriority>
		}
	}
	if ( tmr == TIM4)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	4a2e      	ldr	r2, [pc, #184]	; (80022c0 <_ZN5TimerC1EP11TIM_TypeDefmb+0x150>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d10f      	bne.n	800222a <_ZN5TimerC1EP11TIM_TypeDefmb+0xba>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800220a:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a2a      	ldr	r2, [pc, #168]	; (80022b8 <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
		if(interruptEnable)
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d006      	beq.n	800222a <_ZN5TimerC1EP11TIM_TypeDefmb+0xba>
		{
			NVIC_EnableIRQ(TIM4_IRQn);
 800221c:	201e      	movs	r0, #30
 800221e:	f7ff ff41 	bl	80020a4 <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM4_IRQn,0);
 8002222:	2100      	movs	r1, #0
 8002224:	201e      	movs	r0, #30
 8002226:	f7ff ff57 	bl	80020d8 <NVIC_SetPriority>
		}

	}
	if ( tmr == TIM5)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	4a25      	ldr	r2, [pc, #148]	; (80022c4 <_ZN5TimerC1EP11TIM_TypeDefmb+0x154>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d10f      	bne.n	8002252 <_ZN5TimerC1EP11TIM_TypeDefmb+0xe2>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002232:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a20      	ldr	r2, [pc, #128]	; (80022b8 <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
		if(interruptEnable)
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d006      	beq.n	8002252 <_ZN5TimerC1EP11TIM_TypeDefmb+0xe2>
		{
			NVIC_EnableIRQ(TIM5_IRQn);
 8002244:	2032      	movs	r0, #50	; 0x32
 8002246:	f7ff ff2d 	bl	80020a4 <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM5_IRQn,2);
 800224a:	2102      	movs	r1, #2
 800224c:	2032      	movs	r0, #50	; 0x32
 800224e:	f7ff ff43 	bl	80020d8 <NVIC_SetPriority>
		}
	}
	if (tmr == TIM7)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <_ZN5TimerC1EP11TIM_TypeDefmb+0x158>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d10f      	bne.n	800227a <_ZN5TimerC1EP11TIM_TypeDefmb+0x10a>
	    {
	        RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a16      	ldr	r2, [pc, #88]	; (80022b8 <_ZN5TimerC1EP11TIM_TypeDefmb+0x148>)
 8002260:	f043 0320 	orr.w	r3, r3, #32
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
	        if(interruptEnable)
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d006      	beq.n	800227a <_ZN5TimerC1EP11TIM_TypeDefmb+0x10a>
	        {
	            NVIC_EnableIRQ(TIM7_IRQn);
 800226c:	2037      	movs	r0, #55	; 0x37
 800226e:	f7ff ff19 	bl	80020a4 <NVIC_EnableIRQ>
	            NVIC_SetPriority(TIM7_IRQn,2);
 8002272:	2102      	movs	r1, #2
 8002274:	2037      	movs	r0, #55	; 0x37
 8002276:	f7ff ff2f 	bl	80020d8 <NVIC_SetPriority>
	        }
	    }
	setPeriod(us);
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f825 	bl	80022cc <_ZN5Timer9setPeriodEm>
	if(interruptEnable)
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>
		timer->DIER = TIM_DIER_UIE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	819a      	strh	r2, [r3, #12]
	timer->CR1 |= TIM_CR1_ARPE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022a0:	b292      	uxth	r2, r2
 80022a2:	801a      	strh	r2, [r3, #0]
}
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	08003fac 	.word	0x08003fac
 80022b4:	40010000 	.word	0x40010000
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40000400 	.word	0x40000400
 80022c0:	40000800 	.word	0x40000800
 80022c4:	40000c00 	.word	0x40000c00
 80022c8:	40001400 	.word	0x40001400

080022cc <_ZN5Timer9setPeriodEm>:

void Timer::setPeriod(uint32_t us)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
	uint32_t divFactor = 2000000;
 80022d6:	4b17      	ldr	r3, [pc, #92]	; (8002334 <_ZN5Timer9setPeriodEm+0x68>)
 80022d8:	60fb      	str	r3, [r7, #12]
	uint32_t reload = us - 1;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	3b01      	subs	r3, #1
 80022de:	60bb      	str	r3, [r7, #8]

	if ( us > 10000)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d909      	bls.n	80022fe <_ZN5Timer9setPeriodEm+0x32>
	{
		reload = us / 100 - 1;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	4a12      	ldr	r2, [pc, #72]	; (8002338 <_ZN5Timer9setPeriodEm+0x6c>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	3b01      	subs	r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
		divFactor = 20000;
 80022f8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80022fc:	60fb      	str	r3, [r7, #12]
	}

	if(reload < 1)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <_ZN5Timer9setPeriodEm+0x3c>
		reload = 1;
 8002304:	2301      	movs	r3, #1
 8002306:	60bb      	str	r3, [r7, #8]

	stop();
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f90f 	bl	800252c <_ZN5Timer4stopEv>
	timer->PSC = SystemCoreClock / divFactor - 1;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <_ZN5Timer9setPeriodEm+0x70>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	b29a      	uxth	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	3a01      	subs	r2, #1
 8002320:	b292      	uxth	r2, r2
 8002322:	851a      	strh	r2, [r3, #40]	; 0x28
	timer->ARR = reload;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c

}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	001e8480 	.word	0x001e8480
 8002338:	51eb851f 	.word	0x51eb851f
 800233c:	2000001c 	.word	0x2000001c

08002340 <_ZN5Timer9enablePWMEhmt>:
void Timer::enablePWM(uint8_t ch, uint32_t freq, uint16_t range)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	461a      	mov	r2, r3
 800234c:	460b      	mov	r3, r1
 800234e:	72fb      	strb	r3, [r7, #11]
 8002350:	4613      	mov	r3, r2
 8002352:	813b      	strh	r3, [r7, #8]
	timer->CR1 |= TIM_CR1_DIR;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f042 0210 	orr.w	r2, r2, #16
 8002364:	b292      	uxth	r2, r2
 8002366:	801a      	strh	r2, [r3, #0]
	if((range+1) * freq * 2 > SystemCoreClock)
 8002368:	893b      	ldrh	r3, [r7, #8]
 800236a:	3301      	adds	r3, #1
 800236c:	461a      	mov	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	fb03 f302 	mul.w	r3, r3, r2
 8002374:	005a      	lsls	r2, r3, #1
 8002376:	4b62      	ldr	r3, [pc, #392]	; (8002500 <_ZN5Timer9enablePWMEhmt+0x1c0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d907      	bls.n	800238e <_ZN5Timer9enablePWMEhmt+0x4e>
	{
		freq = SystemCoreClock / ( 2 * (range+1) );
 800237e:	4b60      	ldr	r3, [pc, #384]	; (8002500 <_ZN5Timer9enablePWMEhmt+0x1c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	893a      	ldrh	r2, [r7, #8]
 8002384:	3201      	adds	r2, #1
 8002386:	0052      	lsls	r2, r2, #1
 8002388:	fbb3 f3f2 	udiv	r3, r3, r2
 800238c:	607b      	str	r3, [r7, #4]
	}
	timer->ARR = range;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	893a      	ldrh	r2, [r7, #8]
 8002394:	62da      	str	r2, [r3, #44]	; 0x2c
	timer->PSC = SystemCoreClock / (freq*2*range) - 1;
 8002396:	4b5a      	ldr	r3, [pc, #360]	; (8002500 <_ZN5Timer9enablePWMEhmt+0x1c0>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	893b      	ldrh	r3, [r7, #8]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	3a01      	subs	r2, #1
 80023b0:	b292      	uxth	r2, r2
 80023b2:	851a      	strh	r2, [r3, #40]	; 0x28

	switch(ch)
 80023b4:	7afb      	ldrb	r3, [r7, #11]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	f200 809b 	bhi.w	80024f4 <_ZN5Timer9enablePWMEhmt+0x1b4>
 80023be:	a201      	add	r2, pc, #4	; (adr r2, 80023c4 <_ZN5Timer9enablePWMEhmt+0x84>)
 80023c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c4:	080023d5 	.word	0x080023d5
 80023c8:	0800241d 	.word	0x0800241d
 80023cc:	08002465 	.word	0x08002465
 80023d0:	080024ad 	.word	0x080024ad
	{
	case 1  :
		timer->CCMR1 &= ~TIM_CCMR1_OC1M;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	8b1b      	ldrh	r3, [r3, #24]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023e4:	b292      	uxth	r2, r2
 80023e6:	831a      	strh	r2, [r3, #24]
		timer->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	8b1b      	ldrh	r3, [r3, #24]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80023f8:	b292      	uxth	r2, r2
 80023fa:	831a      	strh	r2, [r3, #24]
		timer->CCR1 = range>>1;
 80023fc:	893b      	ldrh	r3, [r7, #8]
 80023fe:	105a      	asrs	r2, r3, #1
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	635a      	str	r2, [r3, #52]	; 0x34
		timer->CCER |= TIM_CCER_CC1E;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	8c1b      	ldrh	r3, [r3, #32]
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	b292      	uxth	r2, r2
 8002418:	841a      	strh	r2, [r3, #32]
		break;
 800241a:	e06b      	b.n	80024f4 <_ZN5Timer9enablePWMEhmt+0x1b4>
	case 2  :
		timer->CCMR1 &= ~TIM_CCMR1_OC2M;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	8b1b      	ldrh	r3, [r3, #24]
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800242c:	b292      	uxth	r2, r2
 800242e:	831a      	strh	r2, [r3, #24]
		timer->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	8b1b      	ldrh	r3, [r3, #24]
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8002440:	b292      	uxth	r2, r2
 8002442:	831a      	strh	r2, [r3, #24]
		timer->CCR2 = range>>1;
 8002444:	893b      	ldrh	r3, [r7, #8]
 8002446:	105a      	asrs	r2, r3, #1
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
		timer->CCER |= TIM_CCER_CC2E;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	8c1b      	ldrh	r3, [r3, #32]
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f042 0210 	orr.w	r2, r2, #16
 800245e:	b292      	uxth	r2, r2
 8002460:	841a      	strh	r2, [r3, #32]
		break;
 8002462:	e047      	b.n	80024f4 <_ZN5Timer9enablePWMEhmt+0x1b4>
	case 3  :
		timer->CCMR2 &= ~TIM_CCMR2_OC3M;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	8b9b      	ldrh	r3, [r3, #28]
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002474:	b292      	uxth	r2, r2
 8002476:	839a      	strh	r2, [r3, #28]
		timer->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	8b9b      	ldrh	r3, [r3, #28]
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002488:	b292      	uxth	r2, r2
 800248a:	839a      	strh	r2, [r3, #28]
		timer->CCR3 = range>>1;
 800248c:	893b      	ldrh	r3, [r7, #8]
 800248e:	105a      	asrs	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	63da      	str	r2, [r3, #60]	; 0x3c
		timer->CCER |= TIM_CCER_CC3E;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	8c1b      	ldrh	r3, [r3, #32]
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024a6:	b292      	uxth	r2, r2
 80024a8:	841a      	strh	r2, [r3, #32]
		break;
 80024aa:	e023      	b.n	80024f4 <_ZN5Timer9enablePWMEhmt+0x1b4>
	case 4  :
		timer->CCMR2 &= ~TIM_CCMR2_OC4M;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	8b9b      	ldrh	r3, [r3, #28]
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80024bc:	b292      	uxth	r2, r2
 80024be:	839a      	strh	r2, [r3, #28]
		timer->CCMR2 |= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	8b9b      	ldrh	r3, [r3, #28]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80024d0:	b292      	uxth	r2, r2
 80024d2:	839a      	strh	r2, [r3, #28]
		timer->CCR4 = range>>1;
 80024d4:	893b      	ldrh	r3, [r7, #8]
 80024d6:	105a      	asrs	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
		timer->CCER |= TIM_CCER_CC4E;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	8c1b      	ldrh	r3, [r3, #32]
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024ee:	b292      	uxth	r2, r2
 80024f0:	841a      	strh	r2, [r3, #32]
		break;
 80024f2:	bf00      	nop
	}
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	2000001c 	.word	0x2000001c

08002504 <_ZN5Timer5startEv>:
		break;
	}
}

void Timer::start()
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	timer->CR1 |= TIM_CR1_CEN;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	b29a      	uxth	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f042 0201 	orr.w	r2, r2, #1
 800251c:	b292      	uxth	r2, r2
 800251e:	801a      	strh	r2, [r3, #0]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <_ZN5Timer4stopEv>:

void Timer::stop()
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	timer->CR1 &= ~TIM_CR1_CEN;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	b29a      	uxth	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f022 0201 	bic.w	r2, r2, #1
 8002544:	b292      	uxth	r2, r2
 8002546:	801a      	strh	r2, [r3, #0]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_ZN11controlL297C1E13_L297_SELECT_>:
 * @brief     -> Classe qui permet de contrôller les modules L297 de manière individuelle
 */

#include "controlL297.h"

controlL297::controlL297(_L297_SELECT_ selection)
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b085      	sub	sp, #20
 8002558:	af02      	add	r7, sp, #8
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
 8002560:	4a7c      	ldr	r2, [pc, #496]	; (8002754 <_ZN11controlL297C1E13_L297_SELECT_+0x200>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	601a      	str	r2, [r3, #0]
{
	config = new hardwareConfig();
 8002566:	2004      	movs	r0, #4
 8002568:	f001 fab5 	bl	8003ad6 <_Znwj>
 800256c:	4603      	mov	r3, r0
 800256e:	461c      	mov	r4, r3
 8002570:	4620      	mov	r0, r4
 8002572:	f000 fa4d 	bl	8002a10 <_ZN14hardwareConfigC1Ev>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	605c      	str	r4, [r3, #4]
	config->GPIO_Config(GPIOB, 0, OUTPUT);//enable de tout les moteurs
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6858      	ldr	r0, [r3, #4]
 800257e:	2300      	movs	r3, #0
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	2301      	movs	r3, #1
 8002584:	2200      	movs	r2, #0
 8002586:	4974      	ldr	r1, [pc, #464]	; (8002758 <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 8002588:	f000 fae0 	bl	8002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
	config->GPIO_Config(GPIOB, 1, OUTPUT);//half full
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6858      	ldr	r0, [r3, #4]
 8002590:	2300      	movs	r3, #0
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2301      	movs	r3, #1
 8002596:	2201      	movs	r2, #1
 8002598:	496f      	ldr	r1, [pc, #444]	; (8002758 <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 800259a:	f000 fad7 	bl	8002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>

	config->GPIO_Pin_Enable(GPIOB, 1);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	496c      	ldr	r1, [pc, #432]	; (8002758 <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fb30 	bl	8002c0c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
	//config->GPIO_Pin_Disable(GPIOB,1);
	speed = 1;// vitesse en HZ
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	60da      	str	r2, [r3, #12]
	lock = true;// actif bas
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	749a      	strb	r2, [r3, #18]
	chanel=0;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	741a      	strb	r2, [r3, #16]

	_selection= selection;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	745a      	strb	r2, [r3, #17]

	enabled = false;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	74da      	strb	r2, [r3, #19]


	switch (selection) {
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d074      	beq.n	80026ba <_ZN11controlL297C1E13_L297_SELECT_+0x166>
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	f300 80ba 	bgt.w	800274a <_ZN11controlL297C1E13_L297_SELECT_+0x1f6>
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <_ZN11controlL297C1E13_L297_SELECT_+0x8c>
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d037      	beq.n	800264e <_ZN11controlL297C1E13_L297_SELECT_+0xfa>
 80025de:	e0b4      	b.n	800274a <_ZN11controlL297C1E13_L297_SELECT_+0x1f6>
	case L297_1://master
		//init pinout
		chanel = 2;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	741a      	strb	r2, [r3, #16]
		config->GPIO_Config(GPIOB, 3, ALTERNATE,1);//voir datasheet à table 11 pour les details de AFR
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6858      	ldr	r0, [r3, #4]
 80025ea:	2301      	movs	r3, #1
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2302      	movs	r3, #2
 80025f0:	2203      	movs	r2, #3
 80025f2:	4959      	ldr	r1, [pc, #356]	; (8002758 <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 80025f4:	f000 faaa 	bl	8002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOA, 10, OUTPUT);// direction
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6858      	ldr	r0, [r3, #4]
 80025fc:	2300      	movs	r3, #0
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	220a      	movs	r2, #10
 8002604:	4955      	ldr	r1, [pc, #340]	; (800275c <_ZN11controlL297C1E13_L297_SELECT_+0x208>)
 8002606:	f000 faa1 	bl	8002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOC, 9, OUTPUT);// lock
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6858      	ldr	r0, [r3, #4]
 800260e:	2300      	movs	r3, #0
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2301      	movs	r3, #1
 8002614:	2209      	movs	r2, #9
 8002616:	4952      	ldr	r1, [pc, #328]	; (8002760 <_ZN11controlL297C1E13_L297_SELECT_+0x20c>)
 8002618:	f000 fa98 	bl	8002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>

		timer = new Timer(TIM2,50000,false);
 800261c:	2008      	movs	r0, #8
 800261e:	f001 fa5a 	bl	8003ad6 <_Znwj>
 8002622:	4603      	mov	r3, r0
 8002624:	461c      	mov	r4, r3
 8002626:	2300      	movs	r3, #0
 8002628:	f24c 3250 	movw	r2, #50000	; 0xc350
 800262c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002630:	4620      	mov	r0, r4
 8002632:	f7ff fd9d 	bl	8002170 <_ZN5TimerC1EP11TIM_TypeDefmb>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	609c      	str	r4, [r3, #8]
		timer->enablePWM(chanel,speed);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6898      	ldr	r0, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7c19      	ldrb	r1, [r3, #16]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	23ff      	movs	r3, #255	; 0xff
 8002648:	f7ff fe7a 	bl	8002340 <_ZN5Timer9enablePWMEhmt>


		break;
 800264c:	e07d      	b.n	800274a <_ZN11controlL297C1E13_L297_SELECT_+0x1f6>
	case L297_2://master
		//init pinout
		chanel = 1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	741a      	strb	r2, [r3, #16]
		config->GPIO_Config(GPIOB, 6, ALTERNATE, 2);//voir datasheet à table 11 pour les details de AFR
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6858      	ldr	r0, [r3, #4]
 8002658:	2302      	movs	r3, #2
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	2302      	movs	r3, #2
 800265e:	2206      	movs	r2, #6
 8002660:	493d      	ldr	r1, [pc, #244]	; (8002758 <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 8002662:	f000 fa73 	bl	8002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOA, 11, OUTPUT);// direction
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6858      	ldr	r0, [r3, #4]
 800266a:	2300      	movs	r3, #0
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	2301      	movs	r3, #1
 8002670:	220b      	movs	r2, #11
 8002672:	493a      	ldr	r1, [pc, #232]	; (800275c <_ZN11controlL297C1E13_L297_SELECT_+0x208>)
 8002674:	f000 fa6a 	bl	8002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOC, 8, OUTPUT);// lock
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6858      	ldr	r0, [r3, #4]
 800267c:	2300      	movs	r3, #0
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2301      	movs	r3, #1
 8002682:	2208      	movs	r2, #8
 8002684:	4936      	ldr	r1, [pc, #216]	; (8002760 <_ZN11controlL297C1E13_L297_SELECT_+0x20c>)
 8002686:	f000 fa61 	bl	8002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>

		timer = new Timer(TIM4,50000,false);
 800268a:	2008      	movs	r0, #8
 800268c:	f001 fa23 	bl	8003ad6 <_Znwj>
 8002690:	4603      	mov	r3, r0
 8002692:	461c      	mov	r4, r3
 8002694:	2300      	movs	r3, #0
 8002696:	f24c 3250 	movw	r2, #50000	; 0xc350
 800269a:	4932      	ldr	r1, [pc, #200]	; (8002764 <_ZN11controlL297C1E13_L297_SELECT_+0x210>)
 800269c:	4620      	mov	r0, r4
 800269e:	f7ff fd67 	bl	8002170 <_ZN5TimerC1EP11TIM_TypeDefmb>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	609c      	str	r4, [r3, #8]
		timer->enablePWM(chanel, speed);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6898      	ldr	r0, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7c19      	ldrb	r1, [r3, #16]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	23ff      	movs	r3, #255	; 0xff
 80026b4:	f7ff fe44 	bl	8002340 <_ZN5Timer9enablePWMEhmt>

		break;
 80026b8:	e047      	b.n	800274a <_ZN11controlL297C1E13_L297_SELECT_+0x1f6>
	case L297_3_4: // master
		//init pinout
		chanel = 2;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2202      	movs	r2, #2
 80026be:	741a      	strb	r2, [r3, #16]
		config->GPIO_Config(GPIOB, 5, ALTERNATE, 2);//voir datasheet à table 11 pour les details de AFR
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6858      	ldr	r0, [r3, #4]
 80026c4:	2302      	movs	r3, #2
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	2302      	movs	r3, #2
 80026ca:	2205      	movs	r2, #5
 80026cc:	4922      	ldr	r1, [pc, #136]	; (8002758 <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 80026ce:	f000 fa3d 	bl	8002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOA, 12, OUTPUT);// direction
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6858      	ldr	r0, [r3, #4]
 80026d6:	2300      	movs	r3, #0
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	2301      	movs	r3, #1
 80026dc:	220c      	movs	r2, #12
 80026de:	491f      	ldr	r1, [pc, #124]	; (800275c <_ZN11controlL297C1E13_L297_SELECT_+0x208>)
 80026e0:	f000 fa34 	bl	8002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOC, 7, OUTPUT);// lock
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6858      	ldr	r0, [r3, #4]
 80026e8:	2300      	movs	r3, #0
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2301      	movs	r3, #1
 80026ee:	2207      	movs	r2, #7
 80026f0:	491b      	ldr	r1, [pc, #108]	; (8002760 <_ZN11controlL297C1E13_L297_SELECT_+0x20c>)
 80026f2:	f000 fa2b 	bl	8002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>

		timer= new Timer(TIM3, 50000, false);
 80026f6:	2008      	movs	r0, #8
 80026f8:	f001 f9ed 	bl	8003ad6 <_Znwj>
 80026fc:	4603      	mov	r3, r0
 80026fe:	461c      	mov	r4, r3
 8002700:	2300      	movs	r3, #0
 8002702:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002706:	4918      	ldr	r1, [pc, #96]	; (8002768 <_ZN11controlL297C1E13_L297_SELECT_+0x214>)
 8002708:	4620      	mov	r0, r4
 800270a:	f7ff fd31 	bl	8002170 <_ZN5TimerC1EP11TIM_TypeDefmb>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	609c      	str	r4, [r3, #8]
		timer->enablePWM(chanel, speed);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6898      	ldr	r0, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7c19      	ldrb	r1, [r3, #16]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	23ff      	movs	r3, #255	; 0xff
 8002720:	f7ff fe0e 	bl	8002340 <_ZN5Timer9enablePWMEhmt>

		// L297_4: slave de L297_3
		// pas besoin de sa propre clk, mais suivre les mouvements de L297_3;
		//init pinout
		config->GPIO_Config(GPIOB, 12, OUTPUT);// lock
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6858      	ldr	r0, [r3, #4]
 8002728:	2300      	movs	r3, #0
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	2301      	movs	r3, #1
 800272e:	220c      	movs	r2, #12
 8002730:	4909      	ldr	r1, [pc, #36]	; (8002758 <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 8002732:	f000 fa0b 	bl	8002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOC, 12, OUTPUT);// direction
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6858      	ldr	r0, [r3, #4]
 800273a:	2300      	movs	r3, #0
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	2301      	movs	r3, #1
 8002740:	220c      	movs	r2, #12
 8002742:	4907      	ldr	r1, [pc, #28]	; (8002760 <_ZN11controlL297C1E13_L297_SELECT_+0x20c>)
 8002744:	f000 fa02 	bl	8002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		break;
 8002748:	bf00      	nop

	}


}
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bd90      	pop	{r4, r7, pc}
 8002754:	08003f70 	.word	0x08003f70
 8002758:	40020400 	.word	0x40020400
 800275c:	40020000 	.word	0x40020000
 8002760:	40020800 	.word	0x40020800
 8002764:	40000800 	.word	0x40000800
 8002768:	40000400 	.word	0x40000400

0800276c <_ZN11controlL297D1Ev>:

controlL297::~controlL297()
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	4a10      	ldr	r2, [pc, #64]	; (80027b8 <_ZN11controlL297D1Ev+0x4c>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	601a      	str	r2, [r3, #0]
{
	if(config)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <_ZN11controlL297D1Ev+0x28>
		delete config;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d004      	beq.n	8002794 <_ZN11controlL297D1Ev+0x28>
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	3204      	adds	r2, #4
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	4790      	blx	r2
	if(timer)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <_ZN11controlL297D1Ev+0x42>
		delete timer;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d004      	beq.n	80027ae <_ZN11controlL297D1Ev+0x42>
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	3204      	adds	r2, #4
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	4790      	blx	r2
}
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	08003f70 	.word	0x08003f70

080027bc <_ZN11controlL297D0Ev>:
controlL297::~controlL297()
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
}
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff ffd1 	bl	800276c <_ZN11controlL297D1Ev>
 80027ca:	2114      	movs	r1, #20
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f001 f980 	bl	8003ad2 <_ZdlPvj>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <_ZN11controlL2978setSpeedEm>:
void controlL297::setSpeed(uint32_t speed)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]

	this->speed = speed;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	60da      	str	r2, [r3, #12]
	timer->stop();
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fe9b 	bl	800252c <_ZN5Timer4stopEv>
	timer->enablePWM(chanel, speed);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6898      	ldr	r0, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	7c19      	ldrb	r1, [r3, #16]
 80027fe:	23ff      	movs	r3, #255	; 0xff
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	f7ff fd9d 	bl	8002340 <_ZN5Timer9enablePWMEhmt>
	timer->start();
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fe7a 	bl	8002504 <_ZN5Timer5startEv>
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_ZN11controlL29712setDirectionE11_DIRECTION_>:
void controlL297::setDirection(_DIRECTION_ dir)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d02a      	beq.n	8002880 <_ZN11controlL29712setDirectionE11_DIRECTION_+0x68>
 800282a:	2b01      	cmp	r3, #1
 800282c:	d154      	bne.n	80028d8 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc0>
	case CCW:

		if(_selection==0)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	7c5b      	ldrb	r3, [r3, #17]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <_ZN11controlL29712setDirectionE11_DIRECTION_+0x2c>
			config->GPIO_Pin_Disable(GPIOA, 10);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	220a      	movs	r2, #10
 800283c:	4928      	ldr	r1, [pc, #160]	; (80028e0 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fa22 	bl	8002c88 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
		if(_selection==1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7c5b      	ldrb	r3, [r3, #17]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d106      	bne.n	800285a <_ZN11controlL29712setDirectionE11_DIRECTION_+0x42>
			config->GPIO_Pin_Enable(GPIOA, 11);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	220b      	movs	r2, #11
 8002852:	4923      	ldr	r1, [pc, #140]	; (80028e0 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 8002854:	4618      	mov	r0, r3
 8002856:	f000 f9d9 	bl	8002c0c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		if(_selection==2)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	7c5b      	ldrb	r3, [r3, #17]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d137      	bne.n	80028d2 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xba>
		{
			//les directions sont inverses, car les moteurs sont vis à vis
			config->GPIO_Pin_Enable(GPIOA, 12);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	220c      	movs	r2, #12
 8002868:	491d      	ldr	r1, [pc, #116]	; (80028e0 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f9ce 	bl	8002c0c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
			config->GPIO_Pin_Disable(GPIOC, 12);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	220c      	movs	r2, #12
 8002876:	491b      	ldr	r1, [pc, #108]	; (80028e4 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xcc>)
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fa05 	bl	8002c88 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>

		}

		break;
 800287e:	e028      	b.n	80028d2 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xba>

	case CW:
		if(_selection==0)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7c5b      	ldrb	r3, [r3, #17]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d106      	bne.n	8002896 <_ZN11controlL29712setDirectionE11_DIRECTION_+0x7e>
			config->GPIO_Pin_Enable(GPIOA, 10);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	220a      	movs	r2, #10
 800288e:	4914      	ldr	r1, [pc, #80]	; (80028e0 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 8002890:	4618      	mov	r0, r3
 8002892:	f000 f9bb 	bl	8002c0c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		if(_selection==1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	7c5b      	ldrb	r3, [r3, #17]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d106      	bne.n	80028ac <_ZN11controlL29712setDirectionE11_DIRECTION_+0x94>
			config->GPIO_Pin_Disable(GPIOA, 11);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	220b      	movs	r2, #11
 80028a4:	490e      	ldr	r1, [pc, #56]	; (80028e0 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f9ee 	bl	8002c88 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
		if(_selection==2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7c5b      	ldrb	r3, [r3, #17]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d110      	bne.n	80028d6 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xbe>
		{
			//les directions sont inverses, car les moteurs sont vis à vis
			config->GPIO_Pin_Disable(GPIOA, 12);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	220c      	movs	r2, #12
 80028ba:	4909      	ldr	r1, [pc, #36]	; (80028e0 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 f9e3 	bl	8002c88 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
			config->GPIO_Pin_Enable(GPIOC, 12);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	220c      	movs	r2, #12
 80028c8:	4906      	ldr	r1, [pc, #24]	; (80028e4 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xcc>)
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f99e 	bl	8002c0c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		}
		break;
 80028d0:	e001      	b.n	80028d6 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xbe>
		break;
 80028d2:	bf00      	nop
 80028d4:	e000      	b.n	80028d8 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc0>
		break;
 80028d6:	bf00      	nop
	}
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40020000 	.word	0x40020000
 80028e4:	40020800 	.word	0x40020800

080028e8 <_ZN11controlL29712setLockStateE11_LOCK_STATE>:
void controlL297::setLockState(_STATE_ state)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	70fb      	strb	r3, [r7, #3]
	this->lock= state;
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bf14      	ite	ne
 80028fa:	2301      	movne	r3, #1
 80028fc:	2300      	moveq	r3, #0
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	749a      	strb	r2, [r3, #18]
	switch (state) {
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d023      	beq.n	8002952 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0x6a>
 800290a:	2b01      	cmp	r3, #1
 800290c:	d146      	bne.n	800299c <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xb4>
	case UNLOCK :
		if(_selection==0)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7c5b      	ldrb	r3, [r3, #17]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0x3c>
			config->GPIO_Pin_Enable(GPIOC, 9);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2209      	movs	r2, #9
 800291c:	4921      	ldr	r1, [pc, #132]	; (80029a4 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f974 	bl	8002c0c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		if(_selection==1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7c5b      	ldrb	r3, [r3, #17]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d106      	bne.n	800293a <_ZN11controlL29712setLockStateE11_LOCK_STATE+0x52>
			config->GPIO_Pin_Enable(GPIOC, 8);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2208      	movs	r2, #8
 8002932:	491c      	ldr	r1, [pc, #112]	; (80029a4 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 8002934:	4618      	mov	r0, r3
 8002936:	f000 f969 	bl	8002c0c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		if(_selection==2)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7c5b      	ldrb	r3, [r3, #17]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d129      	bne.n	8002996 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xae>
		{
			config->GPIO_Pin_Enable(GPIOC, 7);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2207      	movs	r2, #7
 8002948:	4916      	ldr	r1, [pc, #88]	; (80029a4 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f95e 	bl	8002c0c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
			//config->GPIO_Pin_Enable(GPIOB, 12);
		}
		break;
 8002950:	e021      	b.n	8002996 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xae>
	case LOCK:
		if(_selection==0)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7c5b      	ldrb	r3, [r3, #17]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0x80>
			config->GPIO_Pin_Disable(GPIOC, 9);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2209      	movs	r2, #9
 8002960:	4910      	ldr	r1, [pc, #64]	; (80029a4 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f990 	bl	8002c88 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
		if(_selection==1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	7c5b      	ldrb	r3, [r3, #17]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d106      	bne.n	800297e <_ZN11controlL29712setLockStateE11_LOCK_STATE+0x96>
			config->GPIO_Pin_Disable(GPIOC, 8);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2208      	movs	r2, #8
 8002976:	490b      	ldr	r1, [pc, #44]	; (80029a4 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 8002978:	4618      	mov	r0, r3
 800297a:	f000 f985 	bl	8002c88 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
		if(_selection==2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7c5b      	ldrb	r3, [r3, #17]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d109      	bne.n	800299a <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xb2>
		{
			config->GPIO_Pin_Disable(GPIOC, 7);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2207      	movs	r2, #7
 800298c:	4905      	ldr	r1, [pc, #20]	; (80029a4 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f97a 	bl	8002c88 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
			//config->GPIO_Pin_Disable(GPIOB, 12);// la trace dois être arranger avant de pouvoir parré ce moteur
			//à revoir
		}
		break;
 8002994:	e001      	b.n	800299a <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xb2>
		break;
 8002996:	bf00      	nop
 8002998:	e000      	b.n	800299c <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xb4>
		break;
 800299a:	bf00      	nop
	}

}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40020800 	.word	0x40020800

080029a8 <_ZN11controlL2979setEnableEb>:
void controlL297::setEnable(bool state)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	70fb      	strb	r3, [r7, #3]
	this->enabled= state;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	74da      	strb	r2, [r3, #19]
	switch (state) {
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d107      	bne.n	80029d0 <_ZN11controlL2979setEnableEb+0x28>
	case true:
		config->GPIO_Pin_Enable(GPIOB, 0);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	4908      	ldr	r1, [pc, #32]	; (80029e8 <_ZN11controlL2979setEnableEb+0x40>)
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 f91f 	bl	8002c0c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		break;
 80029ce:	e007      	b.n	80029e0 <_ZN11controlL2979setEnableEb+0x38>
	default:
		config->GPIO_Pin_Disable(GPIOB, 0);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	4904      	ldr	r1, [pc, #16]	; (80029e8 <_ZN11controlL2979setEnableEb+0x40>)
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 f955 	bl	8002c88 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
		break;
 80029de:	bf00      	nop
	}

}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40020400 	.word	0x40020400

080029ec <_ZN11controlL29712getLockStateEv>:
bool controlL297::getDirection()
{
	return 0;
}
bool controlL297::getLockState()
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	if (lock==LOCK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7c9b      	ldrb	r3, [r3, #18]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <_ZN11controlL29712getLockStateEv+0x14>
	{
		return 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	e000      	b.n	8002a02 <_ZN11controlL29712getLockStateEv+0x16>
	}

	return 1;
 8002a00:	2301      	movs	r3, #1
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <_ZN14hardwareConfigC1Ev>:
 *      Author: 201723940
 */

#include "hardwareConfig.h"

hardwareConfig::hardwareConfig() {
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <_ZN14hardwareConfigC1Ev+0x1c>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	601a      	str	r2, [r3, #0]

}
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	08003f80 	.word	0x08003f80

08002a30 <_ZN14hardwareConfigD1Ev>:

hardwareConfig::~hardwareConfig() {
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <_ZN14hardwareConfigD1Ev+0x1c>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	601a      	str	r2, [r3, #0]

}
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	08003f80 	.word	0x08003f80

08002a50 <_ZN14hardwareConfigD0Ev>:
hardwareConfig::~hardwareConfig() {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
}
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ffe9 	bl	8002a30 <_ZN14hardwareConfigD1Ev>
 8002a5e:	2104      	movs	r1, #4
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f001 f836 	bl	8003ad2 <_ZdlPvj>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_ZN14hardwareConfig14SysClockConfigEv>:
// gère l'initialisation de base pour assurer le fonctionnement de base du nucleo
//****dois être la première chose appeler dans le main.
void hardwareConfig::SysClockConfig(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	// active le hse
	RCC->CR = RCC_CR_HSEON;
 8002a78:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8002a7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a7e:	601a      	str	r2, [r3, #0]
	//attendre que le cristal soit activer
	while(!(RCC->CR & RCC_CR_HSERDY));
 8002a80:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d000      	beq.n	8002a98 <_ZN14hardwareConfig14SysClockConfigEv+0x28>
 8002a96:	e7f3      	b.n	8002a80 <_ZN14hardwareConfig14SysClockConfigEv+0x10>

	//set le power enable et le regulateur de tension
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002a98:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	4a27      	ldr	r2, [pc, #156]	; (8002b3c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8002a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= PWR_CR_VOS; // corresponds à la valeure reset "11"
 8002aa4:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <_ZN14hardwareConfig14SysClockConfigEv+0xd0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a25      	ldr	r2, [pc, #148]	; (8002b40 <_ZN14hardwareConfig14SysClockConfigEv+0xd0>)
 8002aaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aae:	6013      	str	r3, [r2, #0]

	// configuration du flash
	FLASH->ACR |= FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN |FLASH_ACR_LATENCY_5WS;
 8002ab0:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <_ZN14hardwareConfig14SysClockConfigEv+0xd4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a23      	ldr	r2, [pc, #140]	; (8002b44 <_ZN14hardwareConfig14SysClockConfigEv+0xd4>)
 8002ab6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aba:	f043 0305 	orr.w	r3, r3, #5
 8002abe:	6013      	str	r3, [r2, #0]

	// configuration des prescalers
	//AHB PR
	RCC->CFGR|= RCC_CFGR_HPRE_DIV1;
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8002ac2:	4a1e      	ldr	r2, [pc, #120]	; (8002b3c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	6093      	str	r3, [r2, #8]

	//APB1
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; //division par 4
 8002ac8:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4a1b      	ldr	r2, [pc, #108]	; (8002b3c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8002ace:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002ad2:	6093      	str	r3, [r2, #8]

	//APB1
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2; //division par 4
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8002ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ade:	6093      	str	r3, [r2, #8]

	//configuration du pll
	RCC->PLLCFGR =(PLL_M << 0) |(PLL_N << 6) | (PLL_P << 16) | (RCC_PLLCFGR_PLLSRC_HSE);
 8002ae0:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8002ae2:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <_ZN14hardwareConfig14SysClockConfigEv+0xd8>)
 8002ae4:	605a      	str	r2, [r3, #4]

	// activerle pll et attendre qu'il soit pret
	RCC->CR |= RCC_CR_PLLON;
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8002aec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af0:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	bf0c      	ite	eq
 8002afe:	2301      	moveq	r3, #1
 8002b00:	2300      	movne	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d000      	beq.n	8002b0a <_ZN14hardwareConfig14SysClockConfigEv+0x9a>
 8002b08:	e7f3      	b.n	8002af2 <_ZN14hardwareConfig14SysClockConfigEv+0x82>

	//Sélectionner la source de la clock (pll dans ce cas ci)
	RCC-> CFGR |= RCC_CFGR_SW_PLL;
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8002b10:	f043 0302 	orr.w	r3, r3, #2
 8002b14:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	bf14      	ite	ne
 8002b22:	2301      	movne	r3, #1
 8002b24:	2300      	moveq	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d000      	beq.n	8002b2e <_ZN14hardwareConfig14SysClockConfigEv+0xbe>
 8002b2c:	e7f3      	b.n	8002b16 <_ZN14hardwareConfig14SysClockConfigEv+0xa6>
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40007000 	.word	0x40007000
 8002b44:	40023c00 	.word	0x40023c00
 8002b48:	00402d04 	.word	0x00402d04

08002b4c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>:

//Permet de configurer facilement les modes de chaques io
void hardwareConfig::GPIO_Config(GPIO_TypeDef* gpio, uint8_t pin, _IO_MODES_t mode,
		uint8_t alterFunction)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	4611      	mov	r1, r2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	71fb      	strb	r3, [r7, #7]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	71bb      	strb	r3, [r7, #6]
	if (gpio == GPIOA)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4a25      	ldr	r2, [pc, #148]	; (8002bfc <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d105      	bne.n	8002b76 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x2a>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8002b6a:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a24      	ldr	r2, [pc, #144]	; (8002c00 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
	if (gpio == GPIOB)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	4a22      	ldr	r2, [pc, #136]	; (8002c04 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d105      	bne.n	8002b8a <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x3e>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a1f      	ldr	r2, [pc, #124]	; (8002c00 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8002b84:	f043 0302 	orr.w	r3, r3, #2
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
	if (gpio == GPIOC)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	4a1e      	ldr	r2, [pc, #120]	; (8002c08 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xbc>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d105      	bne.n	8002b9e <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x52>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8002b92:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a1a      	ldr	r2, [pc, #104]	; (8002c00 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8002b98:	f043 0304 	orr.w	r3, r3, #4
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30

	if (pin < 16)
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	2b0f      	cmp	r3, #15
 8002ba2:	d809      	bhi.n	8002bb8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x6c>
	gpio->MODER |= mode << (2 * pin);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	79b9      	ldrb	r1, [r7, #6]
 8002baa:	79fa      	ldrb	r2, [r7, #7]
 8002bac:	0052      	lsls	r2, r2, #1
 8002bae:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	601a      	str	r2, [r3, #0]

	if (mode == ALTERNATE) {
 8002bb8:	79bb      	ldrb	r3, [r7, #6]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d118      	bne.n	8002bf0 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xa4>
		if (pin < 8)
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	2b07      	cmp	r3, #7
 8002bc2:	d80a      	bhi.n	8002bda <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x8e>
			gpio->AFR[0] |= (alterFunction << (4 * pin));
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	7e39      	ldrb	r1, [r7, #24]
 8002bca:	79fa      	ldrb	r2, [r7, #7]
 8002bcc:	0092      	lsls	r2, r2, #2
 8002bce:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	621a      	str	r2, [r3, #32]
		else
			gpio->AFR[1] |= (alterFunction << (4 * (pin - 8)));
	}

}
 8002bd8:	e00a      	b.n	8002bf0 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xa4>
			gpio->AFR[1] |= (alterFunction << (4 * (pin - 8)));
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	7e39      	ldrb	r1, [r7, #24]
 8002be0:	79fa      	ldrb	r2, [r7, #7]
 8002be2:	3a08      	subs	r2, #8
 8002be4:	0092      	lsls	r2, r2, #2
 8002be6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bea:	431a      	orrs	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40020000 	.word	0x40020000
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40020400 	.word	0x40020400
 8002c08:	40020800 	.word	0x40020800

08002c0c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>:
void hardwareConfig::GPIO_Pin_Enable(GPIO_TypeDef* gpio, uint8_t pin)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	4613      	mov	r3, r2
 8002c18:	71fb      	strb	r3, [r7, #7]
	if (gpio == GPIOA)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4a17      	ldr	r2, [pc, #92]	; (8002c7c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x70>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d109      	bne.n	8002c36 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x2a>
		GPIOA->ODR |= 1<<pin;
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x70>)
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	79fa      	ldrb	r2, [r7, #7]
 8002c28:	2101      	movs	r1, #1
 8002c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x70>)
 8002c32:	430b      	orrs	r3, r1
 8002c34:	6153      	str	r3, [r2, #20]
	if (gpio == GPIOB)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x74>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d109      	bne.n	8002c52 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x46>
		GPIOB->ODR |= 1<<pin;
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x74>)
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	79fa      	ldrb	r2, [r7, #7]
 8002c44:	2101      	movs	r1, #1
 8002c46:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4a0c      	ldr	r2, [pc, #48]	; (8002c80 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x74>)
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	6153      	str	r3, [r2, #20]
	if (gpio == GPIOC)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	4a0b      	ldr	r2, [pc, #44]	; (8002c84 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x78>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d109      	bne.n	8002c6e <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x62>
		GPIOC->ODR |= 1<<pin;
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x78>)
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	79fa      	ldrb	r2, [r7, #7]
 8002c60:	2101      	movs	r1, #1
 8002c62:	fa01 f202 	lsl.w	r2, r1, r2
 8002c66:	4611      	mov	r1, r2
 8002c68:	4a06      	ldr	r2, [pc, #24]	; (8002c84 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x78>)
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	6153      	str	r3, [r2, #20]
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40020000 	.word	0x40020000
 8002c80:	40020400 	.word	0x40020400
 8002c84:	40020800 	.word	0x40020800

08002c88 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>:
void hardwareConfig::GPIO_Pin_Disable(GPIO_TypeDef* gpio, uint8_t pin)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	4613      	mov	r3, r2
 8002c94:	71fb      	strb	r3, [r7, #7]
	if (gpio == GPIOA)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x74>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d10a      	bne.n	8002cb4 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x2c>
		GPIOA -> ODR &= ~(1<<pin);
 8002c9e:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x74>)
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	79fa      	ldrb	r2, [r7, #7]
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8002caa:	43d2      	mvns	r2, r2
 8002cac:	4611      	mov	r1, r2
 8002cae:	4a13      	ldr	r2, [pc, #76]	; (8002cfc <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x74>)
 8002cb0:	400b      	ands	r3, r1
 8002cb2:	6153      	str	r3, [r2, #20]
	if (gpio == GPIOB)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x78>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d10a      	bne.n	8002cd2 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x4a>
		GPIOB -> ODR &= ~(1<<pin);
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x78>)
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	79fa      	ldrb	r2, [r7, #7]
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc8:	43d2      	mvns	r2, r2
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x78>)
 8002cce:	400b      	ands	r3, r1
 8002cd0:	6153      	str	r3, [r2, #20]
	if (gpio == GPIOC)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4a0b      	ldr	r2, [pc, #44]	; (8002d04 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x7c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d10a      	bne.n	8002cf0 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x68>
		GPIOC -> ODR &= ~(1<<pin);
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x7c>)
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	79fa      	ldrb	r2, [r7, #7]
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce6:	43d2      	mvns	r2, r2
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4a06      	ldr	r2, [pc, #24]	; (8002d04 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x7c>)
 8002cec:	400b      	ands	r3, r1
 8002cee:	6153      	str	r3, [r2, #20]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40020000 	.word	0x40020000
 8002d00:	40020400 	.word	0x40020400
 8002d04:	40020800 	.word	0x40020800

08002d08 <main>:
uint8_t valTargetPincePrecedante=0;

uint8_t flag = 0;


int main(void) {
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0

	initSysteme();
 8002d0e:	f000 f987 	bl	8003020 <_Z11initSystemev>
	initGestionMouvementAxe();
 8002d12:	f000 fa23 	bl	800315c <_Z23initGestionMouvementAxev>
	innitCanalEMG();
 8002d16:	f000 f9cb 	bl	80030b0 <_Z13innitCanalEMGv>
	initcommUsart3();
 8002d1a:	f000 f997 	bl	800304c <_Z14initcommUsart3v>
	timerConversionEMG->start();
 8002d1e:	4bac      	ldr	r3, [pc, #688]	; (8002fd0 <main+0x2c8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fbee 	bl	8002504 <_ZN5Timer5startEv>
	//testL298= new L298x();

	while(1)
	{

		while(commAffichage->dataAvailable())
 8002d28:	4baa      	ldr	r3, [pc, #680]	; (8002fd4 <main+0x2cc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff f89c 	bl	8001e6a <_ZNK15STM32F446Usart313dataAvailableEv>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80f3 	beq.w	8002f20 <main+0x218>
		{
			rxData= commAffichage->read();
 8002d3a:	4ba6      	ldr	r3, [pc, #664]	; (8002fd4 <main+0x2cc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff f87a 	bl	8001e38 <_ZN15STM32F446Usart34readEv>
 8002d44:	4603      	mov	r3, r0
 8002d46:	461a      	mov	r2, r3
 8002d48:	4ba3      	ldr	r3, [pc, #652]	; (8002fd8 <main+0x2d0>)
 8002d4a:	701a      	strb	r2, [r3, #0]
			switch (commState) {
 8002d4c:	4ba3      	ldr	r3, [pc, #652]	; (8002fdc <main+0x2d4>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d8e9      	bhi.n	8002d28 <main+0x20>
 8002d54:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <main+0x54>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	08002d7f 	.word	0x08002d7f
 8002d64:	08002e13 	.word	0x08002e13
 8002d68:	08002e49 	.word	0x08002e49
			case WAIT:
				if(rxData=='<')
 8002d6c:	4b9a      	ldr	r3, [pc, #616]	; (8002fd8 <main+0x2d0>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b3c      	cmp	r3, #60	; 0x3c
 8002d72:	f040 80cf 	bne.w	8002f14 <main+0x20c>
					commState=RXCMD;
 8002d76:	4b99      	ldr	r3, [pc, #612]	; (8002fdc <main+0x2d4>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
				break;
 8002d7c:	e0ca      	b.n	8002f14 <main+0x20c>
			case RXCMD:
				commState=RXPAYLOAD;
 8002d7e:	4b97      	ldr	r3, [pc, #604]	; (8002fdc <main+0x2d4>)
 8002d80:	2202      	movs	r2, #2
 8002d82:	701a      	strb	r2, [r3, #0]
				rxCnt=0;
 8002d84:	4b96      	ldr	r3, [pc, #600]	; (8002fe0 <main+0x2d8>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	801a      	strh	r2, [r3, #0]
				//rxCmd=rxData;//commande à executer
				rxPayload[rxCnt++]=rxData;
 8002d8a:	4b93      	ldr	r3, [pc, #588]	; (8002fd8 <main+0x2d0>)
 8002d8c:	7819      	ldrb	r1, [r3, #0]
 8002d8e:	4b94      	ldr	r3, [pc, #592]	; (8002fe0 <main+0x2d8>)
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	b290      	uxth	r0, r2
 8002d96:	4a92      	ldr	r2, [pc, #584]	; (8002fe0 <main+0x2d8>)
 8002d98:	8010      	strh	r0, [r2, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	b289      	uxth	r1, r1
 8002d9e:	4b91      	ldr	r3, [pc, #580]	; (8002fe4 <main+0x2dc>)
 8002da0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				switch (rxData) {
 8002da4:	4b8c      	ldr	r3, [pc, #560]	; (8002fd8 <main+0x2d0>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	3b43      	subs	r3, #67	; 0x43
 8002daa:	2b0d      	cmp	r3, #13
 8002dac:	f200 80b4 	bhi.w	8002f18 <main+0x210>
 8002db0:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <main+0xb0>)
 8002db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db6:	bf00      	nop
 8002db8:	08002e01 	.word	0x08002e01
 8002dbc:	08002f19 	.word	0x08002f19
 8002dc0:	08002e09 	.word	0x08002e09
 8002dc4:	08002f19 	.word	0x08002f19
 8002dc8:	08002f19 	.word	0x08002f19
 8002dcc:	08002f19 	.word	0x08002f19
 8002dd0:	08002f19 	.word	0x08002f19
 8002dd4:	08002f19 	.word	0x08002f19
 8002dd8:	08002f19 	.word	0x08002f19
 8002ddc:	08002f19 	.word	0x08002f19
 8002de0:	08002df1 	.word	0x08002df1
 8002de4:	08002f19 	.word	0x08002f19
 8002de8:	08002f19 	.word	0x08002f19
 8002dec:	08002df9 	.word	0x08002df9
				case 'M':
					//mode
					rxCmd=0;
 8002df0:	4b7d      	ldr	r3, [pc, #500]	; (8002fe8 <main+0x2e0>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
					break;
 8002df6:	e00b      	b.n	8002e10 <main+0x108>
				case 'P':
					//position
					rxCmd=1;
 8002df8:	4b7b      	ldr	r3, [pc, #492]	; (8002fe8 <main+0x2e0>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]

					break;
 8002dfe:	e007      	b.n	8002e10 <main+0x108>
				case 'C':
					//calibration
					rxCmd=2;
 8002e00:	4b79      	ldr	r3, [pc, #484]	; (8002fe8 <main+0x2e0>)
 8002e02:	2202      	movs	r2, #2
 8002e04:	701a      	strb	r2, [r3, #0]
					break;
 8002e06:	e003      	b.n	8002e10 <main+0x108>
				case 'E':
					//erreure
					rxCmd=3;
 8002e08:	4b77      	ldr	r3, [pc, #476]	; (8002fe8 <main+0x2e0>)
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	701a      	strb	r2, [r3, #0]
					break;
 8002e0e:	bf00      	nop
				}
				break;
 8002e10:	e082      	b.n	8002f18 <main+0x210>
				case RXPAYLOAD:
					rxPayload[rxCnt++]=rxData;
 8002e12:	4b71      	ldr	r3, [pc, #452]	; (8002fd8 <main+0x2d0>)
 8002e14:	7819      	ldrb	r1, [r3, #0]
 8002e16:	4b72      	ldr	r3, [pc, #456]	; (8002fe0 <main+0x2d8>)
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	b290      	uxth	r0, r2
 8002e1e:	4a70      	ldr	r2, [pc, #448]	; (8002fe0 <main+0x2d8>)
 8002e20:	8010      	strh	r0, [r2, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	b289      	uxth	r1, r1
 8002e26:	4b6f      	ldr	r3, [pc, #444]	; (8002fe4 <main+0x2dc>)
 8002e28:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if(rxCnt>PAYLOAD_SIZE[rxCmd])
 8002e2c:	4b6e      	ldr	r3, [pc, #440]	; (8002fe8 <main+0x2e0>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	4b6e      	ldr	r3, [pc, #440]	; (8002fec <main+0x2e4>)
 8002e34:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002e38:	4b69      	ldr	r3, [pc, #420]	; (8002fe0 <main+0x2d8>)
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d26d      	bcs.n	8002f1c <main+0x214>
					{

						commState =VALIDATE;
 8002e40:	4b66      	ldr	r3, [pc, #408]	; (8002fdc <main+0x2d4>)
 8002e42:	2203      	movs	r2, #3
 8002e44:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002e46:	e069      	b.n	8002f1c <main+0x214>
				case VALIDATE:
					if(rxData=='>')
 8002e48:	4b63      	ldr	r3, [pc, #396]	; (8002fd8 <main+0x2d0>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8002e4e:	d15d      	bne.n	8002f0c <main+0x204>
					{


						switch (rxCmd) {
 8002e50:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <main+0x2e0>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d859      	bhi.n	8002f0c <main+0x204>
 8002e58:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <main+0x158>)
 8002e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5e:	bf00      	nop
 8002e60:	08002e71 	.word	0x08002e71
 8002e64:	08002eab 	.word	0x08002eab
 8002e68:	08002f0d 	.word	0x08002f0d
 8002e6c:	08002f0d 	.word	0x08002f0d
						case 0:
							//mode
							if(rxPayload[1]==0)
 8002e70:	4b5c      	ldr	r3, [pc, #368]	; (8002fe4 <main+0x2dc>)
 8002e72:	885b      	ldrh	r3, [r3, #2]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <main+0x176>
								modeSocrate=IDLE;
 8002e78:	4b5d      	ldr	r3, [pc, #372]	; (8002ff0 <main+0x2e8>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
							if(rxPayload[1]==1)
 8002e7e:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <main+0x2dc>)
 8002e80:	885b      	ldrh	r3, [r3, #2]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d102      	bne.n	8002e8c <main+0x184>
								modeSocrate=CAPTEURS;
 8002e86:	4b5a      	ldr	r3, [pc, #360]	; (8002ff0 <main+0x2e8>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
							if(rxPayload[1]==2)
 8002e8c:	4b55      	ldr	r3, [pc, #340]	; (8002fe4 <main+0x2dc>)
 8002e8e:	885b      	ldrh	r3, [r3, #2]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d102      	bne.n	8002e9a <main+0x192>
								modeSocrate=MANUEL;
 8002e94:	4b56      	ldr	r3, [pc, #344]	; (8002ff0 <main+0x2e8>)
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
							if(rxPayload[1]==3)
 8002e9a:	4b52      	ldr	r3, [pc, #328]	; (8002fe4 <main+0x2dc>)
 8002e9c:	885b      	ldrh	r3, [r3, #2]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d131      	bne.n	8002f06 <main+0x1fe>
								modeSocrate=CALIBRATION;
 8002ea2:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <main+0x2e8>)
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	701a      	strb	r2, [r3, #0]

							break;
 8002ea8:	e02d      	b.n	8002f06 <main+0x1fe>

						case 1:
							//position
							if(modeSocrate==MANUEL)
 8002eaa:	4b51      	ldr	r3, [pc, #324]	; (8002ff0 <main+0x2e8>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d12b      	bne.n	8002f0a <main+0x202>
							{

								switch (rxPayload[1]) {
 8002eb2:	4b4c      	ldr	r3, [pc, #304]	; (8002fe4 <main+0x2dc>)
 8002eb4:	885b      	ldrh	r3, [r3, #2]
 8002eb6:	2b66      	cmp	r3, #102	; 0x66
 8002eb8:	d01a      	beq.n	8002ef0 <main+0x1e8>
 8002eba:	2b66      	cmp	r3, #102	; 0x66
 8002ebc:	dc25      	bgt.n	8002f0a <main+0x202>
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d002      	beq.n	8002ec8 <main+0x1c0>
 8002ec2:	2b65      	cmp	r3, #101	; 0x65
 8002ec4:	d00a      	beq.n	8002edc <main+0x1d4>
									valTargetPince = rxPayload[2];
									break;
								}
							}

							break;
 8002ec6:	e020      	b.n	8002f0a <main+0x202>
									valTargetEpaulePrecedante=valTargetEpaule;//conserve val précédante
 8002ec8:	4b4a      	ldr	r3, [pc, #296]	; (8002ff4 <main+0x2ec>)
 8002eca:	781a      	ldrb	r2, [r3, #0]
 8002ecc:	4b4a      	ldr	r3, [pc, #296]	; (8002ff8 <main+0x2f0>)
 8002ece:	701a      	strb	r2, [r3, #0]
									valTargetEpaule= rxPayload[2];
 8002ed0:	4b44      	ldr	r3, [pc, #272]	; (8002fe4 <main+0x2dc>)
 8002ed2:	889b      	ldrh	r3, [r3, #4]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <main+0x2ec>)
 8002ed8:	701a      	strb	r2, [r3, #0]
									break;
 8002eda:	e013      	b.n	8002f04 <main+0x1fc>
									valTargetCoudePrecedante=valTargetCoude;
 8002edc:	4b47      	ldr	r3, [pc, #284]	; (8002ffc <main+0x2f4>)
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	4b47      	ldr	r3, [pc, #284]	; (8003000 <main+0x2f8>)
 8002ee2:	701a      	strb	r2, [r3, #0]
									valTargetCoude= rxPayload[2];
 8002ee4:	4b3f      	ldr	r3, [pc, #252]	; (8002fe4 <main+0x2dc>)
 8002ee6:	889b      	ldrh	r3, [r3, #4]
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	4b44      	ldr	r3, [pc, #272]	; (8002ffc <main+0x2f4>)
 8002eec:	701a      	strb	r2, [r3, #0]
									break;
 8002eee:	e009      	b.n	8002f04 <main+0x1fc>
									valTargetPincePrecedante=valTargetPince;
 8002ef0:	4b44      	ldr	r3, [pc, #272]	; (8003004 <main+0x2fc>)
 8002ef2:	781a      	ldrb	r2, [r3, #0]
 8002ef4:	4b44      	ldr	r3, [pc, #272]	; (8003008 <main+0x300>)
 8002ef6:	701a      	strb	r2, [r3, #0]
									valTargetPince = rxPayload[2];
 8002ef8:	4b3a      	ldr	r3, [pc, #232]	; (8002fe4 <main+0x2dc>)
 8002efa:	889b      	ldrh	r3, [r3, #4]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4b41      	ldr	r3, [pc, #260]	; (8003004 <main+0x2fc>)
 8002f00:	701a      	strb	r2, [r3, #0]
									break;
 8002f02:	bf00      	nop
							break;
 8002f04:	e001      	b.n	8002f0a <main+0x202>
							break;
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <main+0x204>
							break;
 8002f0a:	bf00      	nop
							break;
						}

					}

					commState =WAIT;
 8002f0c:	4b33      	ldr	r3, [pc, #204]	; (8002fdc <main+0x2d4>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
					break;
 8002f12:	e004      	b.n	8002f1e <main+0x216>
				break;
 8002f14:	bf00      	nop
 8002f16:	e707      	b.n	8002d28 <main+0x20>
				break;
 8002f18:	bf00      	nop
 8002f1a:	e705      	b.n	8002d28 <main+0x20>
					break;
 8002f1c:	bf00      	nop
		while(commAffichage->dataAvailable())
 8002f1e:	e703      	b.n	8002d28 <main+0x20>
			}
		}
		/********************Gestion du Menu*****************************/
		switch (modeSocrate)
 8002f20:	4b33      	ldr	r3, [pc, #204]	; (8002ff0 <main+0x2e8>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d827      	bhi.n	8002f78 <main+0x270>
 8002f28:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <main+0x228>)
 8002f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2e:	bf00      	nop
 8002f30:	08002f41 	.word	0x08002f41
 8002f34:	08002f67 	.word	0x08002f67
 8002f38:	08002f6d 	.word	0x08002f6d
 8002f3c:	08002f73 	.word	0x08002f73
		{
		case IDLE:
			coude->setMoteurLockState(0);//lock
 8002f40:	4b32      	ldr	r3, [pc, #200]	; (800300c <main+0x304>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe fa6a 	bl	8001420 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>
			epaule->setMoteurLockState(0);//lock
 8002f4c:	4b30      	ldr	r3, [pc, #192]	; (8003010 <main+0x308>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe fa64 	bl	8001420 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>
			pince->setDirectionPince(2);// idle
 8002f58:	4b2e      	ldr	r3, [pc, #184]	; (8003014 <main+0x30c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fb02 	bl	8001568 <_ZN19GestionMouvementAxe17setDirectionPinceEh>
			break;
 8002f64:	e008      	b.n	8002f78 <main+0x270>
		case CAPTEURS:
			gestionPid();
 8002f66:	f000 faf9 	bl	800355c <_Z10gestionPidv>
			break;
 8002f6a:	e005      	b.n	8002f78 <main+0x270>
		case MANUEL:
			// mis à jour dees messages de position
			gestionModeManuel();
 8002f6c:	f000 f950 	bl	8003210 <_Z17gestionModeManuelv>

			break;
 8002f70:	e002      	b.n	8002f78 <main+0x270>
		case CALIBRATION:
			gestionCalibration();
 8002f72:	f000 f945 	bl	8003200 <_Z18gestionCalibrationv>
			break;
 8002f76:	bf00      	nop
		}

		/*************************** envoie des messages****************/
		if (serialPcPauseCompleted)
 8002f78:	4b27      	ldr	r3, [pc, #156]	; (8003018 <main+0x310>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f43f aed2 	beq.w	8002d28 <main+0x20>
		{
			//position des axes
			for(uint8_t a=0;a<3;a++)
 8002f84:	2300      	movs	r3, #0
 8002f86:	71fb      	strb	r3, [r7, #7]
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d81b      	bhi.n	8002fc6 <main+0x2be>
			{
				for(uint8_t b=0;b<6;b++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	71bb      	strb	r3, [r7, #6]
 8002f92:	79bb      	ldrb	r3, [r7, #6]
 8002f94:	2b05      	cmp	r3, #5
 8002f96:	d812      	bhi.n	8002fbe <main+0x2b6>
				{
					commAffichage->write(messagePosition[a][b]);
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <main+0x2cc>)
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	79fa      	ldrb	r2, [r7, #7]
 8002f9e:	79b9      	ldrb	r1, [r7, #6]
 8002fa0:	4c1e      	ldr	r4, [pc, #120]	; (800301c <main+0x314>)
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4423      	add	r3, r4
 8002fac:	440b      	add	r3, r1
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f7fe ff1b 	bl	8001dec <_ZN15STM32F446Usart35writeEh>
				for(uint8_t b=0;b<6;b++)
 8002fb6:	79bb      	ldrb	r3, [r7, #6]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	71bb      	strb	r3, [r7, #6]
 8002fbc:	e7e9      	b.n	8002f92 <main+0x28a>
			for(uint8_t a=0;a<3;a++)
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	71fb      	strb	r3, [r7, #7]
 8002fc4:	e7e0      	b.n	8002f88 <main+0x280>
				}
			}
			//commAffichage->write(epaule->getPotRawPosition());
			serialPcPauseCompleted = false;
 8002fc6:	4b14      	ldr	r3, [pc, #80]	; (8003018 <main+0x310>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
		}

	}
 8002fcc:	e6ac      	b.n	8002d28 <main+0x20>
 8002fce:	bf00      	nop
 8002fd0:	200000bc 	.word	0x200000bc
 8002fd4:	200000c0 	.word	0x200000c0
 8002fd8:	20000126 	.word	0x20000126
 8002fdc:	20000124 	.word	0x20000124
 8002fe0:	20000128 	.word	0x20000128
 8002fe4:	2000012c 	.word	0x2000012c
 8002fe8:	2000012a 	.word	0x2000012a
 8002fec:	08003f8c 	.word	0x08003f8c
 8002ff0:	20000125 	.word	0x20000125
 8002ff4:	2000014a 	.word	0x2000014a
 8002ff8:	2000014b 	.word	0x2000014b
 8002ffc:	2000014c 	.word	0x2000014c
 8003000:	2000014d 	.word	0x2000014d
 8003004:	2000014e 	.word	0x2000014e
 8003008:	2000014f 	.word	0x2000014f
 800300c:	200000d0 	.word	0x200000d0
 8003010:	200000d4 	.word	0x200000d4
 8003014:	200000d8 	.word	0x200000d8
 8003018:	200000f0 	.word	0x200000f0
 800301c:	20000000 	.word	0x20000000

08003020 <_Z11initSystemev>:
}
void initSysteme(void)
{
 8003020:	b598      	push	{r3, r4, r7, lr}
 8003022:	af00      	add	r7, sp, #0
	stm32F446 = new hardwareConfig();
 8003024:	2004      	movs	r0, #4
 8003026:	f000 fd56 	bl	8003ad6 <_Znwj>
 800302a:	4603      	mov	r3, r0
 800302c:	461c      	mov	r4, r3
 800302e:	4620      	mov	r0, r4
 8003030:	f7ff fcee 	bl	8002a10 <_ZN14hardwareConfigC1Ev>
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <_Z11initSystemev+0x28>)
 8003036:	601c      	str	r4, [r3, #0]
	stm32F446->SysClockConfig();
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <_Z11initSystemev+0x28>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fd17 	bl	8002a70 <_ZN14hardwareConfig14SysClockConfigEv>
}
 8003042:	bf00      	nop
 8003044:	bd98      	pop	{r3, r4, r7, pc}
 8003046:	bf00      	nop
 8003048:	200000b4 	.word	0x200000b4

0800304c <_Z14initcommUsart3v>:
void initcommUsart3(void)
{
 800304c:	b598      	push	{r3, r4, r7, lr}
 800304e:	af00      	add	r7, sp, #0
	commAffichage = STM32F446Usart3::getInstance();
 8003050:	f7fe feb4 	bl	8001dbc <_ZN15STM32F446Usart311getInstanceEv>
 8003054:	4603      	mov	r3, r0
 8003056:	4a12      	ldr	r2, [pc, #72]	; (80030a0 <_Z14initcommUsart3v+0x54>)
 8003058:	6013      	str	r3, [r2, #0]
	commAffichage->setBaudRate(9600);
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <_Z14initcommUsart3v+0x54>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe ff12 	bl	8001e8c <_ZN15STM32F446Usart311setBaudRateEm>
	cadanceComm = new Timer(TIM5,10000,true);
 8003068:	2008      	movs	r0, #8
 800306a:	f000 fd34 	bl	8003ad6 <_Znwj>
 800306e:	4603      	mov	r3, r0
 8003070:	461c      	mov	r4, r3
 8003072:	2301      	movs	r3, #1
 8003074:	f242 7210 	movw	r2, #10000	; 0x2710
 8003078:	490a      	ldr	r1, [pc, #40]	; (80030a4 <_Z14initcommUsart3v+0x58>)
 800307a:	4620      	mov	r0, r4
 800307c:	f7ff f878 	bl	8002170 <_ZN5TimerC1EP11TIM_TypeDefmb>
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <_Z14initcommUsart3v+0x5c>)
 8003082:	601c      	str	r4, [r3, #0]
	cadanceComm->enablePWM(2,100);
 8003084:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <_Z14initcommUsart3v+0x5c>)
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	23ff      	movs	r3, #255	; 0xff
 800308a:	2264      	movs	r2, #100	; 0x64
 800308c:	2102      	movs	r1, #2
 800308e:	f7ff f957 	bl	8002340 <_ZN5Timer9enablePWMEhmt>
	cadanceComm->start();
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <_Z14initcommUsart3v+0x5c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fa34 	bl	8002504 <_ZN5Timer5startEv>
}
 800309c:	bf00      	nop
 800309e:	bd98      	pop	{r3, r4, r7, pc}
 80030a0:	200000c0 	.word	0x200000c0
 80030a4:	40000c00 	.word	0x40000c00
 80030a8:	200000b8 	.word	0x200000b8
 80030ac:	00000000 	.word	0x00000000

080030b0 <_Z13innitCanalEMGv>:
void innitCanalEMG(void)
{
 80030b0:	b598      	push	{r3, r4, r7, lr}
 80030b2:	af00      	add	r7, sp, #0
	timerConversionEMG = new Timer(TIM7,10000,true);
 80030b4:	2008      	movs	r0, #8
 80030b6:	f000 fd0e 	bl	8003ad6 <_Znwj>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461c      	mov	r4, r3
 80030be:	2301      	movs	r3, #1
 80030c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80030c4:	4920      	ldr	r1, [pc, #128]	; (8003148 <_Z13innitCanalEMGv+0x98>)
 80030c6:	4620      	mov	r0, r4
 80030c8:	f7ff f852 	bl	8002170 <_ZN5TimerC1EP11TIM_TypeDefmb>
 80030cc:	4b1f      	ldr	r3, [pc, #124]	; (800314c <_Z13innitCanalEMGv+0x9c>)
 80030ce:	601c      	str	r4, [r3, #0]

	coudeEmg = new CanalEMG(AXE_COUDE, 0.1,0.1,0.1);
 80030d0:	2014      	movs	r0, #20
 80030d2:	f000 fd00 	bl	8003ad6 <_Znwj>
 80030d6:	4603      	mov	r3, r0
 80030d8:	461c      	mov	r4, r3
 80030da:	ed9f 2b19 	vldr	d2, [pc, #100]	; 8003140 <_Z13innitCanalEMGv+0x90>
 80030de:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8003140 <_Z13innitCanalEMGv+0x90>
 80030e2:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8003140 <_Z13innitCanalEMGv+0x90>
 80030e6:	2101      	movs	r1, #1
 80030e8:	4620      	mov	r0, r4
 80030ea:	f7fd ff3f 	bl	8000f6c <_ZN8CanalEMGC1Ehddd>
 80030ee:	4b18      	ldr	r3, [pc, #96]	; (8003150 <_Z13innitCanalEMGv+0xa0>)
 80030f0:	601c      	str	r4, [r3, #0]
	pinceEmg = new CanalEMG(AXE_PINCE, 0.1,0.1,0.1);
 80030f2:	2014      	movs	r0, #20
 80030f4:	f000 fcef 	bl	8003ad6 <_Znwj>
 80030f8:	4603      	mov	r3, r0
 80030fa:	461c      	mov	r4, r3
 80030fc:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8003140 <_Z13innitCanalEMGv+0x90>
 8003100:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8003140 <_Z13innitCanalEMGv+0x90>
 8003104:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003140 <_Z13innitCanalEMGv+0x90>
 8003108:	2102      	movs	r1, #2
 800310a:	4620      	mov	r0, r4
 800310c:	f7fd ff2e 	bl	8000f6c <_ZN8CanalEMGC1Ehddd>
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <_Z13innitCanalEMGv+0xa4>)
 8003112:	601c      	str	r4, [r3, #0]
	epauleEmg = new CanalEMG(AXE_EPAULE, 0.1,0.1,0.1);
 8003114:	2014      	movs	r0, #20
 8003116:	f000 fcde 	bl	8003ad6 <_Znwj>
 800311a:	4603      	mov	r3, r0
 800311c:	461c      	mov	r4, r3
 800311e:	ed9f 2b08 	vldr	d2, [pc, #32]	; 8003140 <_Z13innitCanalEMGv+0x90>
 8003122:	ed9f 1b07 	vldr	d1, [pc, #28]	; 8003140 <_Z13innitCanalEMGv+0x90>
 8003126:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8003140 <_Z13innitCanalEMGv+0x90>
 800312a:	2100      	movs	r1, #0
 800312c:	4620      	mov	r0, r4
 800312e:	f7fd ff1d 	bl	8000f6c <_ZN8CanalEMGC1Ehddd>
 8003132:	4b09      	ldr	r3, [pc, #36]	; (8003158 <_Z13innitCanalEMGv+0xa8>)
 8003134:	601c      	str	r4, [r3, #0]

}
 8003136:	bf00      	nop
 8003138:	bd98      	pop	{r3, r4, r7, pc}
 800313a:	bf00      	nop
 800313c:	f3af 8000 	nop.w
 8003140:	9999999a 	.word	0x9999999a
 8003144:	3fb99999 	.word	0x3fb99999
 8003148:	40001400 	.word	0x40001400
 800314c:	200000bc 	.word	0x200000bc
 8003150:	200000c4 	.word	0x200000c4
 8003154:	200000c8 	.word	0x200000c8
 8003158:	200000cc 	.word	0x200000cc

0800315c <_Z23initGestionMouvementAxev>:

void initGestionMouvementAxe(void)
{
 800315c:	b598      	push	{r3, r4, r7, lr}
 800315e:	af00      	add	r7, sp, #0

	coude = new GestionMouvementAxe(AXE_COUDE, POT_COUDE);
 8003160:	2018      	movs	r0, #24
 8003162:	f000 fcb8 	bl	8003ad6 <_Znwj>
 8003166:	4603      	mov	r3, r0
 8003168:	461c      	mov	r4, r3
 800316a:	2204      	movs	r2, #4
 800316c:	2101      	movs	r1, #1
 800316e:	4620      	mov	r0, r4
 8003170:	f7fe f884 	bl	800127c <_ZN19GestionMouvementAxeC1Ehh>
 8003174:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <_Z23initGestionMouvementAxev+0x8c>)
 8003176:	601c      	str	r4, [r3, #0]
	epaule = new GestionMouvementAxe(AXE_EPAULE, POT_EPAULE);
 8003178:	2018      	movs	r0, #24
 800317a:	f000 fcac 	bl	8003ad6 <_Znwj>
 800317e:	4603      	mov	r3, r0
 8003180:	461c      	mov	r4, r3
 8003182:	2203      	movs	r2, #3
 8003184:	2100      	movs	r1, #0
 8003186:	4620      	mov	r0, r4
 8003188:	f7fe f878 	bl	800127c <_ZN19GestionMouvementAxeC1Ehh>
 800318c:	4b17      	ldr	r3, [pc, #92]	; (80031ec <_Z23initGestionMouvementAxev+0x90>)
 800318e:	601c      	str	r4, [r3, #0]
	pince = new GestionMouvementAxe(AXE_PINCE, POT_PINCE);
 8003190:	2018      	movs	r0, #24
 8003192:	f000 fca0 	bl	8003ad6 <_Znwj>
 8003196:	4603      	mov	r3, r0
 8003198:	461c      	mov	r4, r3
 800319a:	2205      	movs	r2, #5
 800319c:	2102      	movs	r1, #2
 800319e:	4620      	mov	r0, r4
 80031a0:	f7fe f86c 	bl	800127c <_ZN19GestionMouvementAxeC1Ehh>
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <_Z23initGestionMouvementAxev+0x94>)
 80031a6:	601c      	str	r4, [r3, #0]

	filtreCoude = new FiltreFenetreGlissante();
 80031a8:	200c      	movs	r0, #12
 80031aa:	f000 fc94 	bl	8003ad6 <_Znwj>
 80031ae:	4603      	mov	r3, r0
 80031b0:	461c      	mov	r4, r3
 80031b2:	4620      	mov	r0, r4
 80031b4:	f7fd ffd8 	bl	8001168 <_ZN22FiltreFenetreGlissanteC1Ev>
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <_Z23initGestionMouvementAxev+0x98>)
 80031ba:	601c      	str	r4, [r3, #0]
	filtreEpaule = new FiltreFenetreGlissante();
 80031bc:	200c      	movs	r0, #12
 80031be:	f000 fc8a 	bl	8003ad6 <_Znwj>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461c      	mov	r4, r3
 80031c6:	4620      	mov	r0, r4
 80031c8:	f7fd ffce 	bl	8001168 <_ZN22FiltreFenetreGlissanteC1Ev>
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <_Z23initGestionMouvementAxev+0x9c>)
 80031ce:	601c      	str	r4, [r3, #0]
	filtrePince = new FiltreFenetreGlissante();
 80031d0:	200c      	movs	r0, #12
 80031d2:	f000 fc80 	bl	8003ad6 <_Znwj>
 80031d6:	4603      	mov	r3, r0
 80031d8:	461c      	mov	r4, r3
 80031da:	4620      	mov	r0, r4
 80031dc:	f7fd ffc4 	bl	8001168 <_ZN22FiltreFenetreGlissanteC1Ev>
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <_Z23initGestionMouvementAxev+0xa0>)
 80031e2:	601c      	str	r4, [r3, #0]

	//encodeurCoude = new PositionAxeEncodeur(GPIOB, NO_PIN_ENCO_COUDE, ENCO_RISING_TRIGGER); // peut être rajouter si on utilise les encodeurs éventuellement
	//encodeurEpaule = new PositionAxeEncodeur(GPIOB, NO_PIN_ENCO_EPAULE, ENCO_RISING_TRIGGER);

}
 80031e4:	bf00      	nop
 80031e6:	bd98      	pop	{r3, r4, r7, pc}
 80031e8:	200000d0 	.word	0x200000d0
 80031ec:	200000d4 	.word	0x200000d4
 80031f0:	200000d8 	.word	0x200000d8
 80031f4:	200000dc 	.word	0x200000dc
 80031f8:	200000e0 	.word	0x200000e0
 80031fc:	200000e4 	.word	0x200000e4

08003200 <_Z18gestionCalibrationv>:
void gestionCalibration(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0

}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <_Z17gestionModeManuelv>:
void gestionModeManuel(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
	/*****************************Epaule**************************/
	if(valTargetEpaule != valTargetEpaulePrecedante)
 8003214:	4b99      	ldr	r3, [pc, #612]	; (800347c <_Z17gestionModeManuelv+0x26c>)
 8003216:	781a      	ldrb	r2, [r3, #0]
 8003218:	4b99      	ldr	r3, [pc, #612]	; (8003480 <_Z17gestionModeManuelv+0x270>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d052      	beq.n	80032c6 <_Z17gestionModeManuelv+0xb6>
	{

		if(valTargetEpaule < epaule->getPositionPotPourcentage())
 8003220:	4b98      	ldr	r3, [pc, #608]	; (8003484 <_Z17gestionModeManuelv+0x274>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7fe f8e1 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 800322a:	4603      	mov	r3, r0
 800322c:	461a      	mov	r2, r3
 800322e:	4b93      	ldr	r3, [pc, #588]	; (800347c <_Z17gestionModeManuelv+0x26c>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	bf8c      	ite	hi
 8003236:	2301      	movhi	r3, #1
 8003238:	2300      	movls	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d017      	beq.n	8003270 <_Z17gestionModeManuelv+0x60>
		{
			epaule->setMoteurLockState(1);//unlock
 8003240:	4b90      	ldr	r3, [pc, #576]	; (8003484 <_Z17gestionModeManuelv+0x274>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2101      	movs	r1, #1
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe f8ea 	bl	8001420 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>
			epaule->setMoteurDirEtSpeed(VITESSE_MANUEL_MOTEURS, 0);
 800324c:	4b8d      	ldr	r3, [pc, #564]	; (8003484 <_Z17gestionModeManuelv+0x274>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2200      	movs	r2, #0
 8003252:	2146      	movs	r1, #70	; 0x46
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe f8fe 	bl	8001456 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb>
			messagePosition[0][3]=(100+epaule->getPositionPotPourcentage());
 800325a:	4b8a      	ldr	r3, [pc, #552]	; (8003484 <_Z17gestionModeManuelv+0x274>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe f8c4 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 8003264:	4603      	mov	r3, r0
 8003266:	3364      	adds	r3, #100	; 0x64
 8003268:	b2da      	uxtb	r2, r3
 800326a:	4b87      	ldr	r3, [pc, #540]	; (8003488 <_Z17gestionModeManuelv+0x278>)
 800326c:	70da      	strb	r2, [r3, #3]
 800326e:	e026      	b.n	80032be <_Z17gestionModeManuelv+0xae>
		}
		else if(valTargetEpaule > epaule->getPositionPotPourcentage())
 8003270:	4b84      	ldr	r3, [pc, #528]	; (8003484 <_Z17gestionModeManuelv+0x274>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7fe f8b9 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 800327a:	4603      	mov	r3, r0
 800327c:	461a      	mov	r2, r3
 800327e:	4b7f      	ldr	r3, [pc, #508]	; (800347c <_Z17gestionModeManuelv+0x26c>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	bf34      	ite	cc
 8003286:	2301      	movcc	r3, #1
 8003288:	2300      	movcs	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d016      	beq.n	80032be <_Z17gestionModeManuelv+0xae>
		{
			epaule->setMoteurLockState(1);//unlock
 8003290:	4b7c      	ldr	r3, [pc, #496]	; (8003484 <_Z17gestionModeManuelv+0x274>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2101      	movs	r1, #1
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe f8c2 	bl	8001420 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>
			epaule->setMoteurDirEtSpeed(VITESSE_MANUEL_MOTEURS, 1);
 800329c:	4b79      	ldr	r3, [pc, #484]	; (8003484 <_Z17gestionModeManuelv+0x274>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2201      	movs	r2, #1
 80032a2:	2146      	movs	r1, #70	; 0x46
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe f8d6 	bl	8001456 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb>
			messagePosition[0][3]=(100+epaule->getPositionPotPourcentage());
 80032aa:	4b76      	ldr	r3, [pc, #472]	; (8003484 <_Z17gestionModeManuelv+0x274>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe f89c 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 80032b4:	4603      	mov	r3, r0
 80032b6:	3364      	adds	r3, #100	; 0x64
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4b73      	ldr	r3, [pc, #460]	; (8003488 <_Z17gestionModeManuelv+0x278>)
 80032bc:	70da      	strb	r2, [r3, #3]
		}

		valTargetEpaulePrecedante = valTargetEpaule;
 80032be:	4b6f      	ldr	r3, [pc, #444]	; (800347c <_Z17gestionModeManuelv+0x26c>)
 80032c0:	781a      	ldrb	r2, [r3, #0]
 80032c2:	4b6f      	ldr	r3, [pc, #444]	; (8003480 <_Z17gestionModeManuelv+0x270>)
 80032c4:	701a      	strb	r2, [r3, #0]
	}
	if((epaule->getPositionPotPourcentage()>=(valTargetEpaule-1))&&(epaule->getPositionPotPourcentage()<=(valTargetEpaule+1)))
 80032c6:	4b6f      	ldr	r3, [pc, #444]	; (8003484 <_Z17gestionModeManuelv+0x274>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe f88e 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 80032d0:	4603      	mov	r3, r0
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b69      	ldr	r3, [pc, #420]	; (800347c <_Z17gestionModeManuelv+0x26c>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	3b01      	subs	r3, #1
 80032da:	429a      	cmp	r2, r3
 80032dc:	db0d      	blt.n	80032fa <_Z17gestionModeManuelv+0xea>
 80032de:	4b69      	ldr	r3, [pc, #420]	; (8003484 <_Z17gestionModeManuelv+0x274>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe f882 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 80032e8:	4603      	mov	r3, r0
 80032ea:	461a      	mov	r2, r3
 80032ec:	4b63      	ldr	r3, [pc, #396]	; (800347c <_Z17gestionModeManuelv+0x26c>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	429a      	cmp	r2, r3
 80032f4:	dc01      	bgt.n	80032fa <_Z17gestionModeManuelv+0xea>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <_Z17gestionModeManuelv+0xec>
 80032fa:	2300      	movs	r3, #0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00f      	beq.n	8003320 <_Z17gestionModeManuelv+0x110>
	{
		epaule->setMoteurLockState(0);//lock
 8003300:	4b60      	ldr	r3, [pc, #384]	; (8003484 <_Z17gestionModeManuelv+0x274>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe f88a 	bl	8001420 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>
		messagePosition[0][3]=(100+epaule->getPositionPotPourcentage());
 800330c:	4b5d      	ldr	r3, [pc, #372]	; (8003484 <_Z17gestionModeManuelv+0x274>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7fe f86b 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 8003316:	4603      	mov	r3, r0
 8003318:	3364      	adds	r3, #100	; 0x64
 800331a:	b2da      	uxtb	r2, r3
 800331c:	4b5a      	ldr	r3, [pc, #360]	; (8003488 <_Z17gestionModeManuelv+0x278>)
 800331e:	70da      	strb	r2, [r3, #3]
	}

	/*****************************Coude**************************/
	if(valTargetCoude != valTargetCoudePrecedante)
 8003320:	4b5a      	ldr	r3, [pc, #360]	; (800348c <_Z17gestionModeManuelv+0x27c>)
 8003322:	781a      	ldrb	r2, [r3, #0]
 8003324:	4b5a      	ldr	r3, [pc, #360]	; (8003490 <_Z17gestionModeManuelv+0x280>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d052      	beq.n	80033d2 <_Z17gestionModeManuelv+0x1c2>
	{
		if(valTargetCoude <= coude->getPositionPotPourcentage())
 800332c:	4b59      	ldr	r3, [pc, #356]	; (8003494 <_Z17gestionModeManuelv+0x284>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7fe f85b 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 8003336:	4603      	mov	r3, r0
 8003338:	461a      	mov	r2, r3
 800333a:	4b54      	ldr	r3, [pc, #336]	; (800348c <_Z17gestionModeManuelv+0x27c>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	bf2c      	ite	cs
 8003342:	2301      	movcs	r3, #1
 8003344:	2300      	movcc	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d017      	beq.n	800337c <_Z17gestionModeManuelv+0x16c>
		{
			coude->setMoteurLockState(1);//unlock
 800334c:	4b51      	ldr	r3, [pc, #324]	; (8003494 <_Z17gestionModeManuelv+0x284>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2101      	movs	r1, #1
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe f864 	bl	8001420 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>
			coude->setMoteurDirEtSpeed(VITESSE_MANUEL_MOTEURS, 0);
 8003358:	4b4e      	ldr	r3, [pc, #312]	; (8003494 <_Z17gestionModeManuelv+0x284>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2200      	movs	r2, #0
 800335e:	2146      	movs	r1, #70	; 0x46
 8003360:	4618      	mov	r0, r3
 8003362:	f7fe f878 	bl	8001456 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb>
			messagePosition[1][3]=(100+coude->getPositionPotPourcentage());
 8003366:	4b4b      	ldr	r3, [pc, #300]	; (8003494 <_Z17gestionModeManuelv+0x284>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe f83e 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 8003370:	4603      	mov	r3, r0
 8003372:	3364      	adds	r3, #100	; 0x64
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4b44      	ldr	r3, [pc, #272]	; (8003488 <_Z17gestionModeManuelv+0x278>)
 8003378:	725a      	strb	r2, [r3, #9]
 800337a:	e026      	b.n	80033ca <_Z17gestionModeManuelv+0x1ba>
		}
		else if(valTargetCoude >= coude->getPositionPotPourcentage())
 800337c:	4b45      	ldr	r3, [pc, #276]	; (8003494 <_Z17gestionModeManuelv+0x284>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe f833 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 8003386:	4603      	mov	r3, r0
 8003388:	461a      	mov	r2, r3
 800338a:	4b40      	ldr	r3, [pc, #256]	; (800348c <_Z17gestionModeManuelv+0x27c>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	bf94      	ite	ls
 8003392:	2301      	movls	r3, #1
 8003394:	2300      	movhi	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d016      	beq.n	80033ca <_Z17gestionModeManuelv+0x1ba>
		{
			coude->setMoteurLockState(1);//unlock
 800339c:	4b3d      	ldr	r3, [pc, #244]	; (8003494 <_Z17gestionModeManuelv+0x284>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2101      	movs	r1, #1
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe f83c 	bl	8001420 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>
			coude->setMoteurDirEtSpeed(VITESSE_MANUEL_MOTEURS, 1);
 80033a8:	4b3a      	ldr	r3, [pc, #232]	; (8003494 <_Z17gestionModeManuelv+0x284>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2201      	movs	r2, #1
 80033ae:	2146      	movs	r1, #70	; 0x46
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe f850 	bl	8001456 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb>
			messagePosition[1][3]=(100+coude->getPositionPotPourcentage());
 80033b6:	4b37      	ldr	r3, [pc, #220]	; (8003494 <_Z17gestionModeManuelv+0x284>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe f816 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 80033c0:	4603      	mov	r3, r0
 80033c2:	3364      	adds	r3, #100	; 0x64
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4b30      	ldr	r3, [pc, #192]	; (8003488 <_Z17gestionModeManuelv+0x278>)
 80033c8:	725a      	strb	r2, [r3, #9]
		}
		valTargetCoudePrecedante=valTargetCoude;
 80033ca:	4b30      	ldr	r3, [pc, #192]	; (800348c <_Z17gestionModeManuelv+0x27c>)
 80033cc:	781a      	ldrb	r2, [r3, #0]
 80033ce:	4b30      	ldr	r3, [pc, #192]	; (8003490 <_Z17gestionModeManuelv+0x280>)
 80033d0:	701a      	strb	r2, [r3, #0]
	}
	if((coude->getPositionPotPourcentage()>=(valTargetCoude-1))&&(coude->getPositionPotPourcentage()<=(valTargetCoude+1)))
 80033d2:	4b30      	ldr	r3, [pc, #192]	; (8003494 <_Z17gestionModeManuelv+0x284>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe f808 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 80033dc:	4603      	mov	r3, r0
 80033de:	461a      	mov	r2, r3
 80033e0:	4b2a      	ldr	r3, [pc, #168]	; (800348c <_Z17gestionModeManuelv+0x27c>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	429a      	cmp	r2, r3
 80033e8:	db0d      	blt.n	8003406 <_Z17gestionModeManuelv+0x1f6>
 80033ea:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <_Z17gestionModeManuelv+0x284>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd fffc 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	4b24      	ldr	r3, [pc, #144]	; (800348c <_Z17gestionModeManuelv+0x27c>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	429a      	cmp	r2, r3
 8003400:	dc01      	bgt.n	8003406 <_Z17gestionModeManuelv+0x1f6>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <_Z17gestionModeManuelv+0x1f8>
 8003406:	2300      	movs	r3, #0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00f      	beq.n	800342c <_Z17gestionModeManuelv+0x21c>
	{
		coude->setMoteurLockState(0);//lock
 800340c:	4b21      	ldr	r3, [pc, #132]	; (8003494 <_Z17gestionModeManuelv+0x284>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe f804 	bl	8001420 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>
		messagePosition[1][3]=(100+coude->getPositionPotPourcentage());
 8003418:	4b1e      	ldr	r3, [pc, #120]	; (8003494 <_Z17gestionModeManuelv+0x284>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd ffe5 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 8003422:	4603      	mov	r3, r0
 8003424:	3364      	adds	r3, #100	; 0x64
 8003426:	b2da      	uxtb	r2, r3
 8003428:	4b17      	ldr	r3, [pc, #92]	; (8003488 <_Z17gestionModeManuelv+0x278>)
 800342a:	725a      	strb	r2, [r3, #9]
	}
	//	/*****************************Pince**************************/
	if(valTargetPince != valTargetPincePrecedante)
 800342c:	4b1a      	ldr	r3, [pc, #104]	; (8003498 <_Z17gestionModeManuelv+0x288>)
 800342e:	781a      	ldrb	r2, [r3, #0]
 8003430:	4b1a      	ldr	r3, [pc, #104]	; (800349c <_Z17gestionModeManuelv+0x28c>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d059      	beq.n	80034ec <_Z17gestionModeManuelv+0x2dc>
	{
		if(valTargetPince <= pince->getPositionPotPourcentage())
 8003438:	4b19      	ldr	r3, [pc, #100]	; (80034a0 <_Z17gestionModeManuelv+0x290>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd ffd5 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	4b14      	ldr	r3, [pc, #80]	; (8003498 <_Z17gestionModeManuelv+0x288>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	bf2c      	ite	cs
 800344e:	2301      	movcs	r3, #1
 8003450:	2300      	movcc	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d025      	beq.n	80034a4 <_Z17gestionModeManuelv+0x294>
		{
			pince->setDirectionPince(0);
 8003458:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <_Z17gestionModeManuelv+0x290>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2100      	movs	r1, #0
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe f882 	bl	8001568 <_ZN19GestionMouvementAxe17setDirectionPinceEh>
			messagePosition[2][3]=(100+pince->getPositionPotPourcentage());
 8003464:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <_Z17gestionModeManuelv+0x290>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd ffbf 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 800346e:	4603      	mov	r3, r0
 8003470:	3364      	adds	r3, #100	; 0x64
 8003472:	b2da      	uxtb	r2, r3
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <_Z17gestionModeManuelv+0x278>)
 8003476:	73da      	strb	r2, [r3, #15]
 8003478:	e034      	b.n	80034e4 <_Z17gestionModeManuelv+0x2d4>
 800347a:	bf00      	nop
 800347c:	2000014a 	.word	0x2000014a
 8003480:	2000014b 	.word	0x2000014b
 8003484:	200000d4 	.word	0x200000d4
 8003488:	20000000 	.word	0x20000000
 800348c:	2000014c 	.word	0x2000014c
 8003490:	2000014d 	.word	0x2000014d
 8003494:	200000d0 	.word	0x200000d0
 8003498:	2000014e 	.word	0x2000014e
 800349c:	2000014f 	.word	0x2000014f
 80034a0:	200000d8 	.word	0x200000d8
		}
		else if(valTargetPince >= pince->getPositionPotPourcentage())
 80034a4:	4b29      	ldr	r3, [pc, #164]	; (800354c <_Z17gestionModeManuelv+0x33c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fd ff9f 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 80034ae:	4603      	mov	r3, r0
 80034b0:	461a      	mov	r2, r3
 80034b2:	4b27      	ldr	r3, [pc, #156]	; (8003550 <_Z17gestionModeManuelv+0x340>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	bf94      	ite	ls
 80034ba:	2301      	movls	r3, #1
 80034bc:	2300      	movhi	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00f      	beq.n	80034e4 <_Z17gestionModeManuelv+0x2d4>
		{
			pince->setDirectionPince(1);
 80034c4:	4b21      	ldr	r3, [pc, #132]	; (800354c <_Z17gestionModeManuelv+0x33c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2101      	movs	r1, #1
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe f84c 	bl	8001568 <_ZN19GestionMouvementAxe17setDirectionPinceEh>
			messagePosition[2][3]=(100+pince->getPositionPotPourcentage());
 80034d0:	4b1e      	ldr	r3, [pc, #120]	; (800354c <_Z17gestionModeManuelv+0x33c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd ff89 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 80034da:	4603      	mov	r3, r0
 80034dc:	3364      	adds	r3, #100	; 0x64
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	4b1c      	ldr	r3, [pc, #112]	; (8003554 <_Z17gestionModeManuelv+0x344>)
 80034e2:	73da      	strb	r2, [r3, #15]
		}
		valTargetPincePrecedante=valTargetPince;
 80034e4:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <_Z17gestionModeManuelv+0x340>)
 80034e6:	781a      	ldrb	r2, [r3, #0]
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <_Z17gestionModeManuelv+0x348>)
 80034ea:	701a      	strb	r2, [r3, #0]
	}
	if((pince->getPositionPotPourcentage()>=(valTargetPince-1))&&(pince->getPositionPotPourcentage()<=(valTargetPince+1)))
 80034ec:	4b17      	ldr	r3, [pc, #92]	; (800354c <_Z17gestionModeManuelv+0x33c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fd ff7b 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 80034f6:	4603      	mov	r3, r0
 80034f8:	461a      	mov	r2, r3
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <_Z17gestionModeManuelv+0x340>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	3b01      	subs	r3, #1
 8003500:	429a      	cmp	r2, r3
 8003502:	db0d      	blt.n	8003520 <_Z17gestionModeManuelv+0x310>
 8003504:	4b11      	ldr	r3, [pc, #68]	; (800354c <_Z17gestionModeManuelv+0x33c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7fd ff6f 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 800350e:	4603      	mov	r3, r0
 8003510:	461a      	mov	r2, r3
 8003512:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <_Z17gestionModeManuelv+0x340>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	429a      	cmp	r2, r3
 800351a:	dc01      	bgt.n	8003520 <_Z17gestionModeManuelv+0x310>
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <_Z17gestionModeManuelv+0x312>
 8003520:	2300      	movs	r3, #0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00f      	beq.n	8003546 <_Z17gestionModeManuelv+0x336>
	{
		pince->setDirectionPince(2);
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <_Z17gestionModeManuelv+0x33c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2102      	movs	r1, #2
 800352c:	4618      	mov	r0, r3
 800352e:	f7fe f81b 	bl	8001568 <_ZN19GestionMouvementAxe17setDirectionPinceEh>
		messagePosition[2][3]=(100+pince->getPositionPotPourcentage());
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <_Z17gestionModeManuelv+0x33c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd ff58 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 800353c:	4603      	mov	r3, r0
 800353e:	3364      	adds	r3, #100	; 0x64
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4b04      	ldr	r3, [pc, #16]	; (8003554 <_Z17gestionModeManuelv+0x344>)
 8003544:	73da      	strb	r2, [r3, #15]
	}
	//	messagePosition[0][3]=(100+epaule->getPositionPotPourcentage());
	//	messagePosition[1][3]=(100+coude->getPositionPotPourcentage());
	//	messagePosition[2][3]=(100+pince->getPositionPotPourcentage());
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200000d8 	.word	0x200000d8
 8003550:	2000014e 	.word	0x2000014e
 8003554:	20000000 	.word	0x20000000
 8003558:	2000014f 	.word	0x2000014f

0800355c <_Z10gestionPidv>:
void gestionPid(void)
{
 800355c:	b5b0      	push	{r4, r5, r7, lr}
 800355e:	af00      	add	r7, sp, #0
	coudeEmg->calculPidValue(coude->getPositionPotPourcentage());
 8003560:	4b52      	ldr	r3, [pc, #328]	; (80036ac <_Z10gestionPidv+0x150>)
 8003562:	681c      	ldr	r4, [r3, #0]
 8003564:	4b52      	ldr	r3, [pc, #328]	; (80036b0 <_Z10gestionPidv+0x154>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7fd ff3f 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 800356e:	4603      	mov	r3, r0
 8003570:	4619      	mov	r1, r3
 8003572:	4620      	mov	r0, r4
 8003574:	f7fd fd9c 	bl	80010b0 <_ZN8CanalEMG14calculPidValueEh>
	if(coudeEmg->getErreurPidRaw() < 4)
 8003578:	4b4c      	ldr	r3, [pc, #304]	; (80036ac <_Z10gestionPidv+0x150>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fd fdc5 	bl	800110c <_ZN8CanalEMG15getErreurPidRawEv>
 8003582:	4603      	mov	r3, r0
 8003584:	2b03      	cmp	r3, #3
 8003586:	bfd4      	ite	le
 8003588:	2301      	movle	r3, #1
 800358a:	2300      	movgt	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <_Z10gestionPidv+0x44>
	{
		coude->setMoteurLockState(false);
 8003592:	4b47      	ldr	r3, [pc, #284]	; (80036b0 <_Z10gestionPidv+0x154>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f7fd ff41 	bl	8001420 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>
 800359e:	e01d      	b.n	80035dc <_Z10gestionPidv+0x80>
		//poignet->setMoteurLockState(false);
	}
	else
	{
		coude->setMoteurLockState(true);
 80035a0:	4b43      	ldr	r3, [pc, #268]	; (80036b0 <_Z10gestionPidv+0x154>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2101      	movs	r1, #1
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fd ff3a 	bl	8001420 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>
		coude->setMoteurDirEtSpeed(coudeEmg->getValuePID(), coudeEmg->getDirectionMoteur());
 80035ac:	4b40      	ldr	r3, [pc, #256]	; (80036b0 <_Z10gestionPidv+0x154>)
 80035ae:	681c      	ldr	r4, [r3, #0]
 80035b0:	4b3e      	ldr	r3, [pc, #248]	; (80036ac <_Z10gestionPidv+0x150>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fd fd8d 	bl	80010d4 <_ZN8CanalEMG11getValuePIDEv>
 80035ba:	4605      	mov	r5, r0
 80035bc:	4b3b      	ldr	r3, [pc, #236]	; (80036ac <_Z10gestionPidv+0x150>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fd fd95 	bl	80010f0 <_ZN8CanalEMG18getDirectionMoteurEv>
 80035c6:	4603      	mov	r3, r0
 80035c8:	461a      	mov	r2, r3
 80035ca:	4629      	mov	r1, r5
 80035cc:	4620      	mov	r0, r4
 80035ce:	f7fd ff42 	bl	8001456 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb>

		if(coude->getMoteurLockState())
 80035d2:	4b37      	ldr	r3, [pc, #220]	; (80036b0 <_Z10gestionPidv+0x154>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fd ff14 	bl	8001404 <_ZN19GestionMouvementAxe18getMoteurLockStateEv>
			//poignet->setMoteurDirEtSpeed(coudeEmg->getValuePID() / 3, coudeEmg->getDirectionMoteur());
		}

	}

	pinceEmg->calculPidValue(pince->getPositionPotPourcentage());
 80035dc:	4b35      	ldr	r3, [pc, #212]	; (80036b4 <_Z10gestionPidv+0x158>)
 80035de:	681c      	ldr	r4, [r3, #0]
 80035e0:	4b35      	ldr	r3, [pc, #212]	; (80036b8 <_Z10gestionPidv+0x15c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fd ff01 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 80035ea:	4603      	mov	r3, r0
 80035ec:	4619      	mov	r1, r3
 80035ee:	4620      	mov	r0, r4
 80035f0:	f7fd fd5e 	bl	80010b0 <_ZN8CanalEMG14calculPidValueEh>
	if(pinceEmg->getErreurPidRaw() < 1)
 80035f4:	4b2f      	ldr	r3, [pc, #188]	; (80036b4 <_Z10gestionPidv+0x158>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd fd87 	bl	800110c <_ZN8CanalEMG15getErreurPidRawEv>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	bfd4      	ite	le
 8003604:	2301      	movle	r3, #1
 8003606:	2300      	movgt	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d006      	beq.n	800361c <_Z10gestionPidv+0xc0>
	{
		pince->setDirectionPince(2);
 800360e:	4b2a      	ldr	r3, [pc, #168]	; (80036b8 <_Z10gestionPidv+0x15c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2102      	movs	r1, #2
 8003614:	4618      	mov	r0, r3
 8003616:	f7fd ffa7 	bl	8001568 <_ZN19GestionMouvementAxe17setDirectionPinceEh>
 800361a:	e00b      	b.n	8003634 <_Z10gestionPidv+0xd8>
	}
	else
	{
		pince->setDirectionPince(pinceEmg->getDirectionMoteur());
 800361c:	4b26      	ldr	r3, [pc, #152]	; (80036b8 <_Z10gestionPidv+0x15c>)
 800361e:	681c      	ldr	r4, [r3, #0]
 8003620:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <_Z10gestionPidv+0x158>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7fd fd63 	bl	80010f0 <_ZN8CanalEMG18getDirectionMoteurEv>
 800362a:	4603      	mov	r3, r0
 800362c:	4619      	mov	r1, r3
 800362e:	4620      	mov	r0, r4
 8003630:	f7fd ff9a 	bl	8001568 <_ZN19GestionMouvementAxe17setDirectionPinceEh>
	}



	epauleEmg->calculPidValue(epaule->getPositionPotPourcentage());
 8003634:	4b21      	ldr	r3, [pc, #132]	; (80036bc <_Z10gestionPidv+0x160>)
 8003636:	681c      	ldr	r4, [r3, #0]
 8003638:	4b21      	ldr	r3, [pc, #132]	; (80036c0 <_Z10gestionPidv+0x164>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f7fd fed5 	bl	80013ec <_ZN19GestionMouvementAxe25getPositionPotPourcentageEv>
 8003642:	4603      	mov	r3, r0
 8003644:	4619      	mov	r1, r3
 8003646:	4620      	mov	r0, r4
 8003648:	f7fd fd32 	bl	80010b0 <_ZN8CanalEMG14calculPidValueEh>
	if(epauleEmg->getErreurPidRaw() < 5)
 800364c:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <_Z10gestionPidv+0x160>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7fd fd5b 	bl	800110c <_ZN8CanalEMG15getErreurPidRawEv>
 8003656:	4603      	mov	r3, r0
 8003658:	2b04      	cmp	r3, #4
 800365a:	bfd4      	ite	le
 800365c:	2301      	movle	r3, #1
 800365e:	2300      	movgt	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d006      	beq.n	8003674 <_Z10gestionPidv+0x118>
	{
		epaule->setMoteurLockState(false);
 8003666:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <_Z10gestionPidv+0x164>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f7fd fed7 	bl	8001420 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>
	}

	//usart->write(epauleEmg->getValuePID());


}
 8003672:	e018      	b.n	80036a6 <_Z10gestionPidv+0x14a>
		epaule->setMoteurLockState(true);
 8003674:	4b12      	ldr	r3, [pc, #72]	; (80036c0 <_Z10gestionPidv+0x164>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2101      	movs	r1, #1
 800367a:	4618      	mov	r0, r3
 800367c:	f7fd fed0 	bl	8001420 <_ZN19GestionMouvementAxe18setMoteurLockStateEb>
		epaule->setMoteurDirEtSpeed(epauleEmg->getValuePID(), epauleEmg->getDirectionMoteur());
 8003680:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <_Z10gestionPidv+0x164>)
 8003682:	681c      	ldr	r4, [r3, #0]
 8003684:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <_Z10gestionPidv+0x160>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f7fd fd23 	bl	80010d4 <_ZN8CanalEMG11getValuePIDEv>
 800368e:	4605      	mov	r5, r0
 8003690:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <_Z10gestionPidv+0x160>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f7fd fd2b 	bl	80010f0 <_ZN8CanalEMG18getDirectionMoteurEv>
 800369a:	4603      	mov	r3, r0
 800369c:	461a      	mov	r2, r3
 800369e:	4629      	mov	r1, r5
 80036a0:	4620      	mov	r0, r4
 80036a2:	f7fd fed8 	bl	8001456 <_ZN19GestionMouvementAxe19setMoteurDirEtSpeedEmb>
}
 80036a6:	bf00      	nop
 80036a8:	bdb0      	pop	{r4, r5, r7, pc}
 80036aa:	bf00      	nop
 80036ac:	200000c4 	.word	0x200000c4
 80036b0:	200000d0 	.word	0x200000d0
 80036b4:	200000c8 	.word	0x200000c8
 80036b8:	200000d8 	.word	0x200000d8
 80036bc:	200000cc 	.word	0x200000cc
 80036c0:	200000d4 	.word	0x200000d4

080036c4 <TIM7_IRQHandler>:
// interruptions
extern "C" void TIM7_IRQHandler(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
	if (TIM7->SR & TIM_SR_UIF) // if UIF flag is set
 80036c8:	4b19      	ldr	r3, [pc, #100]	; (8003730 <TIM7_IRQHandler+0x6c>)
 80036ca:	8a1b      	ldrh	r3, [r3, #16]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	bf14      	ite	ne
 80036d6:	2301      	movne	r3, #1
 80036d8:	2300      	moveq	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d025      	beq.n	800372c <TIM7_IRQHandler+0x68>
	{
		TIM7->SR &= ~TIM_SR_UIF; // clear UIF flag
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <TIM7_IRQHandler+0x6c>)
 80036e2:	8a1b      	ldrh	r3, [r3, #16]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	4a12      	ldr	r2, [pc, #72]	; (8003730 <TIM7_IRQHandler+0x6c>)
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	8213      	strh	r3, [r2, #16]

		epauleEmg->acquisitionNewPositionEmg();
 80036f0:	4b10      	ldr	r3, [pc, #64]	; (8003734 <TIM7_IRQHandler+0x70>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fd fca5 	bl	8001044 <_ZN8CanalEMG25acquisitionNewPositionEmgEv>
		coudeEmg->acquisitionNewPositionEmg();
 80036fa:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <TIM7_IRQHandler+0x74>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fd fca0 	bl	8001044 <_ZN8CanalEMG25acquisitionNewPositionEmgEv>
		pinceEmg->acquisitionNewPositionEmg();
 8003704:	4b0d      	ldr	r3, [pc, #52]	; (800373c <TIM7_IRQHandler+0x78>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7fd fc9b 	bl	8001044 <_ZN8CanalEMG25acquisitionNewPositionEmgEv>

		epaule->updatePositionPot();
 800370e:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <TIM7_IRQHandler+0x7c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fd ff12 	bl	800153c <_ZN19GestionMouvementAxe17updatePositionPotEv>
		coude->updatePositionPot();
 8003718:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <TIM7_IRQHandler+0x80>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fd ff0d 	bl	800153c <_ZN19GestionMouvementAxe17updatePositionPotEv>
		pince->updatePositionPot();
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <TIM7_IRQHandler+0x84>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd ff08 	bl	800153c <_ZN19GestionMouvementAxe17updatePositionPotEv>
		// filtrage des valeures de pourentage de pot à chaque foi qu'ils sont mis à jour
		//		filtreEpaule->miseNiveauFiltre(epaule->getPositionPotPourcentage());
		//		filtreCoude->miseNiveauFiltre(coude->getPositionPotPourcentage());
		//		filtrePince->miseNiveauFiltre(pince->getPositionPotPourcentage());
	}
}
 800372c:	bf00      	nop
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40001400 	.word	0x40001400
 8003734:	200000cc 	.word	0x200000cc
 8003738:	200000c4 	.word	0x200000c4
 800373c:	200000c8 	.word	0x200000c8
 8003740:	200000d4 	.word	0x200000d4
 8003744:	200000d0 	.word	0x200000d0
 8003748:	200000d8 	.word	0x200000d8

0800374c <TIM5_IRQHandler>:
extern "C" void TIM5_IRQHandler(void) {
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
	if (TIM5->SR & TIM_SR_UIF) // if UIF flag is set
 8003750:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <TIM5_IRQHandler+0x3c>)
 8003752:	8a1b      	ldrh	r3, [r3, #16]
 8003754:	b29b      	uxth	r3, r3
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	bf14      	ite	ne
 800375e:	2301      	movne	r3, #1
 8003760:	2300      	moveq	r3, #0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <TIM5_IRQHandler+0x32>
	{
		TIM5->SR &= ~TIM_SR_UIF; // clear UIF flag
 8003768:	4b07      	ldr	r3, [pc, #28]	; (8003788 <TIM5_IRQHandler+0x3c>)
 800376a:	8a1b      	ldrh	r3, [r3, #16]
 800376c:	b29b      	uxth	r3, r3
 800376e:	4a06      	ldr	r2, [pc, #24]	; (8003788 <TIM5_IRQHandler+0x3c>)
 8003770:	f023 0301 	bic.w	r3, r3, #1
 8003774:	b29b      	uxth	r3, r3
 8003776:	8213      	strh	r3, [r2, #16]
		serialPcPauseCompleted = true;
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <TIM5_IRQHandler+0x40>)
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]

	}

}
 800377e:	bf00      	nop
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	40000c00 	.word	0x40000c00
 800378c:	200000f0 	.word	0x200000f0

08003790 <_Z41__static_initialization_and_destruction_0ii>:
 8003790:	b590      	push	{r4, r7, lr}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d128      	bne.n	80037f2 <_Z41__static_initialization_and_destruction_0ii+0x62>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d123      	bne.n	80037f2 <_Z41__static_initialization_and_destruction_0ii+0x62>
std::string messageComm[2]= {"<ACK>","<ERR>"};
 80037aa:	4c1c      	ldr	r4, [pc, #112]	; (800381c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80037ac:	f107 0308 	add.w	r3, r7, #8
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 f9a1 	bl	8003af8 <_ZNSaIcEC1Ev>
 80037b6:	f107 0308 	add.w	r3, r7, #8
 80037ba:	461a      	mov	r2, r3
 80037bc:	4918      	ldr	r1, [pc, #96]	; (8003820 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80037be:	4620      	mov	r0, r4
 80037c0:	f000 fa02 	bl	8003bc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80037c4:	f107 0308 	add.w	r3, r7, #8
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 f996 	bl	8003afa <_ZNSaIcED1Ev>
 80037ce:	3418      	adds	r4, #24
 80037d0:	f107 030c 	add.w	r3, r7, #12
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 f98f 	bl	8003af8 <_ZNSaIcEC1Ev>
 80037da:	f107 030c 	add.w	r3, r7, #12
 80037de:	461a      	mov	r2, r3
 80037e0:	4910      	ldr	r1, [pc, #64]	; (8003824 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80037e2:	4620      	mov	r0, r4
 80037e4:	f000 f9f0 	bl	8003bc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80037e8:	f107 030c 	add.w	r3, r7, #12
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 f984 	bl	8003afa <_ZNSaIcED1Ev>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <_Z41__static_initialization_and_destruction_0ii+0x84>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037fe:	4293      	cmp	r3, r2
 8003800:	d108      	bne.n	8003814 <_Z41__static_initialization_and_destruction_0ii+0x84>
 8003802:	4c09      	ldr	r4, [pc, #36]	; (8003828 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003806:	429c      	cmp	r4, r3
 8003808:	d004      	beq.n	8003814 <_Z41__static_initialization_and_destruction_0ii+0x84>
 800380a:	3c18      	subs	r4, #24
 800380c:	4620      	mov	r0, r4
 800380e:	f000 f9b1 	bl	8003b74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003812:	e7f7      	b.n	8003804 <_Z41__static_initialization_and_destruction_0ii+0x74>
}
 8003814:	bf00      	nop
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	bd90      	pop	{r4, r7, pc}
 800381c:	200000f4 	.word	0x200000f4
 8003820:	08003f94 	.word	0x08003f94
 8003824:	08003f9c 	.word	0x08003f9c
 8003828:	20000124 	.word	0x20000124

0800382c <_GLOBAL__sub_I_stm32F446>:
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
 8003830:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003834:	2001      	movs	r0, #1
 8003836:	f7ff ffab 	bl	8003790 <_Z41__static_initialization_and_destruction_0ii>
 800383a:	bd80      	pop	{r7, pc}

0800383c <_GLOBAL__sub_D_stm32F446>:
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
 8003840:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003844:	2000      	movs	r0, #0
 8003846:	f7ff ffa3 	bl	8003790 <_Z41__static_initialization_and_destruction_0ii>
 800384a:	bd80      	pop	{r7, pc}

0800384c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
	return 1;
 8003850:	2301      	movs	r3, #1
}
 8003852:	4618      	mov	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <_kill>:

int _kill(int pid, int sig)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003866:	f000 f9df 	bl	8003c28 <__errno>
 800386a:	4603      	mov	r3, r0
 800386c:	2216      	movs	r2, #22
 800386e:	601a      	str	r2, [r3, #0]
	return -1;
 8003870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <_exit>:

void _exit (int status)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003884:	f04f 31ff 	mov.w	r1, #4294967295
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ffe7 	bl	800385c <_kill>
	while (1) {}		/* Make sure we hang here */
 800388e:	e7fe      	b.n	800388e <_exit+0x12>

08003890 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003898:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <_sbrk+0x50>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d102      	bne.n	80038a6 <_sbrk+0x16>
		heap_end = &end;
 80038a0:	4b0f      	ldr	r3, [pc, #60]	; (80038e0 <_sbrk+0x50>)
 80038a2:	4a10      	ldr	r2, [pc, #64]	; (80038e4 <_sbrk+0x54>)
 80038a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80038a6:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <_sbrk+0x50>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80038ac:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <_sbrk+0x50>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4413      	add	r3, r2
 80038b4:	466a      	mov	r2, sp
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d907      	bls.n	80038ca <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80038ba:	f000 f9b5 	bl	8003c28 <__errno>
 80038be:	4603      	mov	r3, r0
 80038c0:	220c      	movs	r2, #12
 80038c2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80038c4:	f04f 33ff 	mov.w	r3, #4294967295
 80038c8:	e006      	b.n	80038d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <_sbrk+0x50>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	4a03      	ldr	r2, [pc, #12]	; (80038e0 <_sbrk+0x50>)
 80038d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80038d6:	68fb      	ldr	r3, [r7, #12]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	20000158 	.word	0x20000158
 80038e4:	20000178 	.word	0x20000178

080038e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038ec:	4b16      	ldr	r3, [pc, #88]	; (8003948 <SystemInit+0x60>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	4a15      	ldr	r2, [pc, #84]	; (8003948 <SystemInit+0x60>)
 80038f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80038fc:	4b13      	ldr	r3, [pc, #76]	; (800394c <SystemInit+0x64>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a12      	ldr	r2, [pc, #72]	; (800394c <SystemInit+0x64>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003908:	4b10      	ldr	r3, [pc, #64]	; (800394c <SystemInit+0x64>)
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800390e:	4b0f      	ldr	r3, [pc, #60]	; (800394c <SystemInit+0x64>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a0e      	ldr	r2, [pc, #56]	; (800394c <SystemInit+0x64>)
 8003914:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800391c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <SystemInit+0x64>)
 8003920:	4a0b      	ldr	r2, [pc, #44]	; (8003950 <SystemInit+0x68>)
 8003922:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003924:	4b09      	ldr	r3, [pc, #36]	; (800394c <SystemInit+0x64>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a08      	ldr	r2, [pc, #32]	; (800394c <SystemInit+0x64>)
 800392a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800392e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <SystemInit+0x64>)
 8003932:	2200      	movs	r2, #0
 8003934:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003936:	f000 f80d 	bl	8003954 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800393a:	4b03      	ldr	r3, [pc, #12]	; (8003948 <SystemInit+0x60>)
 800393c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003940:	609a      	str	r2, [r3, #8]
#endif
}
 8003942:	bf00      	nop
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	e000ed00 	.word	0xe000ed00
 800394c:	40023800 	.word	0x40023800
 8003950:	24003010 	.word	0x24003010

08003954 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]
 800395e:	2300      	movs	r3, #0
 8003960:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003962:	4b43      	ldr	r3, [pc, #268]	; (8003a70 <SetSysClock+0x11c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a42      	ldr	r2, [pc, #264]	; (8003a70 <SetSysClock+0x11c>)
 8003968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800396e:	4b40      	ldr	r3, [pc, #256]	; (8003a70 <SetSysClock+0x11c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3301      	adds	r3, #1
 800397c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <SetSysClock+0x38>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800398a:	d1f0      	bne.n	800396e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800398c:	4b38      	ldr	r3, [pc, #224]	; (8003a70 <SetSysClock+0x11c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003998:	2301      	movs	r3, #1
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	e001      	b.n	80039a2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800399e:	2300      	movs	r3, #0
 80039a0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d15c      	bne.n	8003a62 <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80039a8:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <SetSysClock+0x11c>)
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	4a30      	ldr	r2, [pc, #192]	; (8003a70 <SetSysClock+0x11c>)
 80039ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80039b4:	4b2f      	ldr	r3, [pc, #188]	; (8003a74 <SetSysClock+0x120>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a2e      	ldr	r2, [pc, #184]	; (8003a74 <SetSysClock+0x120>)
 80039ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039be:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80039c0:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <SetSysClock+0x11c>)
 80039c2:	4a2b      	ldr	r2, [pc, #172]	; (8003a70 <SetSysClock+0x11c>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80039c8:	4b29      	ldr	r3, [pc, #164]	; (8003a70 <SetSysClock+0x11c>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	4a28      	ldr	r2, [pc, #160]	; (8003a70 <SetSysClock+0x11c>)
 80039ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80039d4:	4b26      	ldr	r3, [pc, #152]	; (8003a70 <SetSysClock+0x11c>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	4a25      	ldr	r2, [pc, #148]	; (8003a70 <SetSysClock+0x11c>)
 80039da:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80039de:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80039e0:	4b23      	ldr	r3, [pc, #140]	; (8003a70 <SetSysClock+0x11c>)
 80039e2:	4a25      	ldr	r2, [pc, #148]	; (8003a78 <SetSysClock+0x124>)
 80039e4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80039e6:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <SetSysClock+0x11c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a21      	ldr	r2, [pc, #132]	; (8003a70 <SetSysClock+0x11c>)
 80039ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039f0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80039f2:	bf00      	nop
 80039f4:	4b1e      	ldr	r3, [pc, #120]	; (8003a70 <SetSysClock+0x11c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f9      	beq.n	80039f4 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8003a00:	4b1c      	ldr	r3, [pc, #112]	; (8003a74 <SetSysClock+0x120>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1b      	ldr	r2, [pc, #108]	; (8003a74 <SetSysClock+0x120>)
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8003a0c:	bf00      	nop
 8003a0e:	4b19      	ldr	r3, [pc, #100]	; (8003a74 <SetSysClock+0x120>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f9      	beq.n	8003a0e <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8003a1a:	4b16      	ldr	r3, [pc, #88]	; (8003a74 <SetSysClock+0x120>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a15      	ldr	r2, [pc, #84]	; (8003a74 <SetSysClock+0x120>)
 8003a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a24:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8003a26:	bf00      	nop
 8003a28:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <SetSysClock+0x120>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f9      	beq.n	8003a28 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <SetSysClock+0x128>)
 8003a36:	f240 7205 	movw	r2, #1797	; 0x705
 8003a3a:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003a3c:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <SetSysClock+0x11c>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <SetSysClock+0x11c>)
 8003a42:	f023 0303 	bic.w	r3, r3, #3
 8003a46:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003a48:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <SetSysClock+0x11c>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a08      	ldr	r2, [pc, #32]	; (8003a70 <SetSysClock+0x11c>)
 8003a4e:	f043 0302 	orr.w	r3, r3, #2
 8003a52:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003a54:	bf00      	nop
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <SetSysClock+0x11c>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d1f9      	bne.n	8003a56 <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40007000 	.word	0x40007000
 8003a78:	77405a08 	.word	0x77405a08
 8003a7c:	40023c00 	.word	0x40023c00

08003a80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a80:	480d      	ldr	r0, [pc, #52]	; (8003ab8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a84:	480d      	ldr	r0, [pc, #52]	; (8003abc <LoopForever+0x6>)
  ldr r1, =_edata
 8003a86:	490e      	ldr	r1, [pc, #56]	; (8003ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a88:	4a0e      	ldr	r2, [pc, #56]	; (8003ac4 <LoopForever+0xe>)
  movs r3, #0
 8003a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a8c:	e002      	b.n	8003a94 <LoopCopyDataInit>

08003a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a92:	3304      	adds	r3, #4

08003a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a98:	d3f9      	bcc.n	8003a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a9a:	4a0b      	ldr	r2, [pc, #44]	; (8003ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a9c:	4c0b      	ldr	r4, [pc, #44]	; (8003acc <LoopForever+0x16>)
  movs r3, #0
 8003a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aa0:	e001      	b.n	8003aa6 <LoopFillZerobss>

08003aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003aa4:	3204      	adds	r2, #4

08003aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003aa8:	d3fb      	bcc.n	8003aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003aaa:	f7ff ff1d 	bl	80038e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003aae:	f000 f8c1 	bl	8003c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ab2:	f7ff f929 	bl	8002d08 <main>

08003ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ab6:	e7fe      	b.n	8003ab6 <LoopForever>
  ldr   r0, =_estack
 8003ab8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ac0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8003ac4:	08004008 	.word	0x08004008
  ldr r2, =_sbss
 8003ac8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8003acc:	20000178 	.word	0x20000178

08003ad0 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ad0:	e7fe      	b.n	8003ad0 <ADC_IRQHandler>

08003ad2 <_ZdlPvj>:
 8003ad2:	f000 b88f 	b.w	8003bf4 <_ZdlPv>

08003ad6 <_Znwj>:
 8003ad6:	2801      	cmp	r0, #1
 8003ad8:	bf38      	it	cc
 8003ada:	2001      	movcc	r0, #1
 8003adc:	b510      	push	{r4, lr}
 8003ade:	4604      	mov	r4, r0
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	f000 f8cb 	bl	8003c7c <malloc>
 8003ae6:	b930      	cbnz	r0, 8003af6 <_Znwj+0x20>
 8003ae8:	f000 f886 	bl	8003bf8 <_ZSt15get_new_handlerv>
 8003aec:	b908      	cbnz	r0, 8003af2 <_Znwj+0x1c>
 8003aee:	f000 f894 	bl	8003c1a <abort>
 8003af2:	4780      	blx	r0
 8003af4:	e7f4      	b.n	8003ae0 <_Znwj+0xa>
 8003af6:	bd10      	pop	{r4, pc}

08003af8 <_ZNSaIcEC1Ev>:
 8003af8:	4770      	bx	lr

08003afa <_ZNSaIcED1Ev>:
 8003afa:	4770      	bx	lr

08003afc <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8003afc:	b10a      	cbz	r2, 8003b02 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8003afe:	f000 b8cd 	b.w	8003c9c <memcpy>
 8003b02:	4770      	bx	lr

08003b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8003b04:	b508      	push	{r3, lr}
 8003b06:	680b      	ldr	r3, [r1, #0]
 8003b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0c:	d302      	bcc.n	8003b14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8003b0e:	480d      	ldr	r0, [pc, #52]	; (8003b44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8003b10:	f000 f880 	bl	8003c14 <_ZSt20__throw_length_errorPKc>
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d90b      	bls.n	8003b30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8003b18:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8003b1c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8003b20:	d206      	bcs.n	8003b30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8003b22:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003b26:	bf2a      	itet	cs
 8003b28:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8003b2c:	6008      	strcc	r0, [r1, #0]
 8003b2e:	600b      	strcs	r3, [r1, #0]
 8003b30:	6808      	ldr	r0, [r1, #0]
 8003b32:	3001      	adds	r0, #1
 8003b34:	d501      	bpl.n	8003b3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8003b36:	f000 f867 	bl	8003c08 <_ZSt17__throw_bad_allocv>
 8003b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b3e:	f7ff bfca 	b.w	8003ad6 <_Znwj>
 8003b42:	bf00      	nop
 8003b44:	08003fb4 	.word	0x08003fb4

08003b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8003b48:	f850 3b08 	ldr.w	r3, [r0], #8
 8003b4c:	4283      	cmp	r3, r0
 8003b4e:	d002      	beq.n	8003b56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 b84f 	b.w	8003bf4 <_ZdlPv>
 8003b56:	4770      	bx	lr

08003b58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8003b58:	2a01      	cmp	r2, #1
 8003b5a:	b510      	push	{r4, lr}
 8003b5c:	d102      	bne.n	8003b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8003b5e:	780a      	ldrb	r2, [r1, #0]
 8003b60:	7002      	strb	r2, [r0, #0]
 8003b62:	bd10      	pop	{r4, pc}
 8003b64:	f7ff ffca 	bl	8003afc <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8003b68:	e7fb      	b.n	8003b62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08003b6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8003b6a:	b508      	push	{r3, lr}
 8003b6c:	1a52      	subs	r2, r2, r1
 8003b6e:	f7ff fff3 	bl	8003b58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003b72:	bd08      	pop	{r3, pc}

08003b74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8003b74:	b510      	push	{r4, lr}
 8003b76:	4604      	mov	r4, r0
 8003b78:	f7ff ffe6 	bl	8003b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	bd10      	pop	{r4, pc}

08003b80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8003b80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b82:	4604      	mov	r4, r0
 8003b84:	4616      	mov	r6, r2
 8003b86:	460d      	mov	r5, r1
 8003b88:	b919      	cbnz	r1, 8003b92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8003b8a:	b112      	cbz	r2, 8003b92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8003b8c:	480d      	ldr	r0, [pc, #52]	; (8003bc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8003b8e:	f000 f83e 	bl	8003c0e <_ZSt19__throw_logic_errorPKc>
 8003b92:	1b73      	subs	r3, r6, r5
 8003b94:	2b0f      	cmp	r3, #15
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	d907      	bls.n	8003baa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	a901      	add	r1, sp, #4
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f7ff ffb0 	bl	8003b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003ba4:	9b01      	ldr	r3, [sp, #4]
 8003ba6:	6020      	str	r0, [r4, #0]
 8003ba8:	60a3      	str	r3, [r4, #8]
 8003baa:	4632      	mov	r2, r6
 8003bac:	4629      	mov	r1, r5
 8003bae:	6820      	ldr	r0, [r4, #0]
 8003bb0:	f7ff ffdb 	bl	8003b6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8003bb4:	9b01      	ldr	r3, [sp, #4]
 8003bb6:	6822      	ldr	r2, [r4, #0]
 8003bb8:	6063      	str	r3, [r4, #4]
 8003bba:	2100      	movs	r1, #0
 8003bbc:	54d1      	strb	r1, [r2, r3]
 8003bbe:	b002      	add	sp, #8
 8003bc0:	bd70      	pop	{r4, r5, r6, pc}
 8003bc2:	bf00      	nop
 8003bc4:	08003fcc 	.word	0x08003fcc

08003bc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	f100 0308 	add.w	r3, r0, #8
 8003bce:	4604      	mov	r4, r0
 8003bd0:	6003      	str	r3, [r0, #0]
 8003bd2:	460d      	mov	r5, r1
 8003bd4:	b159      	cbz	r1, 8003bee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8003bd6:	4608      	mov	r0, r1
 8003bd8:	f7fc fb16 	bl	8000208 <strlen>
 8003bdc:	182a      	adds	r2, r5, r0
 8003bde:	4620      	mov	r0, r4
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	4629      	mov	r1, r5
 8003be6:	f7ff ffcb 	bl	8003b80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8003bea:	4620      	mov	r0, r4
 8003bec:	bd38      	pop	{r3, r4, r5, pc}
 8003bee:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf2:	e7f4      	b.n	8003bde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08003bf4 <_ZdlPv>:
 8003bf4:	f000 b84a 	b.w	8003c8c <free>

08003bf8 <_ZSt15get_new_handlerv>:
 8003bf8:	4b02      	ldr	r3, [pc, #8]	; (8003c04 <_ZSt15get_new_handlerv+0xc>)
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	f3bf 8f5b 	dmb	ish
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	2000015c 	.word	0x2000015c

08003c08 <_ZSt17__throw_bad_allocv>:
 8003c08:	b508      	push	{r3, lr}
 8003c0a:	f000 f806 	bl	8003c1a <abort>

08003c0e <_ZSt19__throw_logic_errorPKc>:
 8003c0e:	b508      	push	{r3, lr}
 8003c10:	f000 f803 	bl	8003c1a <abort>

08003c14 <_ZSt20__throw_length_errorPKc>:
 8003c14:	b508      	push	{r3, lr}
 8003c16:	f000 f800 	bl	8003c1a <abort>

08003c1a <abort>:
 8003c1a:	b508      	push	{r3, lr}
 8003c1c:	2006      	movs	r0, #6
 8003c1e:	f000 f92d 	bl	8003e7c <raise>
 8003c22:	2001      	movs	r0, #1
 8003c24:	f7ff fe2a 	bl	800387c <_exit>

08003c28 <__errno>:
 8003c28:	4b01      	ldr	r3, [pc, #4]	; (8003c30 <__errno+0x8>)
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20000030 	.word	0x20000030

08003c34 <__libc_init_array>:
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	4d0d      	ldr	r5, [pc, #52]	; (8003c6c <__libc_init_array+0x38>)
 8003c38:	4c0d      	ldr	r4, [pc, #52]	; (8003c70 <__libc_init_array+0x3c>)
 8003c3a:	1b64      	subs	r4, r4, r5
 8003c3c:	10a4      	asrs	r4, r4, #2
 8003c3e:	2600      	movs	r6, #0
 8003c40:	42a6      	cmp	r6, r4
 8003c42:	d109      	bne.n	8003c58 <__libc_init_array+0x24>
 8003c44:	4d0b      	ldr	r5, [pc, #44]	; (8003c74 <__libc_init_array+0x40>)
 8003c46:	4c0c      	ldr	r4, [pc, #48]	; (8003c78 <__libc_init_array+0x44>)
 8003c48:	f000 f942 	bl	8003ed0 <_init>
 8003c4c:	1b64      	subs	r4, r4, r5
 8003c4e:	10a4      	asrs	r4, r4, #2
 8003c50:	2600      	movs	r6, #0
 8003c52:	42a6      	cmp	r6, r4
 8003c54:	d105      	bne.n	8003c62 <__libc_init_array+0x2e>
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c5c:	4798      	blx	r3
 8003c5e:	3601      	adds	r6, #1
 8003c60:	e7ee      	b.n	8003c40 <__libc_init_array+0xc>
 8003c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c66:	4798      	blx	r3
 8003c68:	3601      	adds	r6, #1
 8003c6a:	e7f2      	b.n	8003c52 <__libc_init_array+0x1e>
 8003c6c:	08003ff8 	.word	0x08003ff8
 8003c70:	08003ff8 	.word	0x08003ff8
 8003c74:	08003ff8 	.word	0x08003ff8
 8003c78:	08004000 	.word	0x08004000

08003c7c <malloc>:
 8003c7c:	4b02      	ldr	r3, [pc, #8]	; (8003c88 <malloc+0xc>)
 8003c7e:	4601      	mov	r1, r0
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	f000 b869 	b.w	8003d58 <_malloc_r>
 8003c86:	bf00      	nop
 8003c88:	20000030 	.word	0x20000030

08003c8c <free>:
 8003c8c:	4b02      	ldr	r3, [pc, #8]	; (8003c98 <free+0xc>)
 8003c8e:	4601      	mov	r1, r0
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	f000 b811 	b.w	8003cb8 <_free_r>
 8003c96:	bf00      	nop
 8003c98:	20000030 	.word	0x20000030

08003c9c <memcpy>:
 8003c9c:	440a      	add	r2, r1
 8003c9e:	4291      	cmp	r1, r2
 8003ca0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ca4:	d100      	bne.n	8003ca8 <memcpy+0xc>
 8003ca6:	4770      	bx	lr
 8003ca8:	b510      	push	{r4, lr}
 8003caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cb2:	4291      	cmp	r1, r2
 8003cb4:	d1f9      	bne.n	8003caa <memcpy+0xe>
 8003cb6:	bd10      	pop	{r4, pc}

08003cb8 <_free_r>:
 8003cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cba:	2900      	cmp	r1, #0
 8003cbc:	d048      	beq.n	8003d50 <_free_r+0x98>
 8003cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cc2:	9001      	str	r0, [sp, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f1a1 0404 	sub.w	r4, r1, #4
 8003cca:	bfb8      	it	lt
 8003ccc:	18e4      	addlt	r4, r4, r3
 8003cce:	f000 f8f1 	bl	8003eb4 <__malloc_lock>
 8003cd2:	4a20      	ldr	r2, [pc, #128]	; (8003d54 <_free_r+0x9c>)
 8003cd4:	9801      	ldr	r0, [sp, #4]
 8003cd6:	6813      	ldr	r3, [r2, #0]
 8003cd8:	4615      	mov	r5, r2
 8003cda:	b933      	cbnz	r3, 8003cea <_free_r+0x32>
 8003cdc:	6063      	str	r3, [r4, #4]
 8003cde:	6014      	str	r4, [r2, #0]
 8003ce0:	b003      	add	sp, #12
 8003ce2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ce6:	f000 b8eb 	b.w	8003ec0 <__malloc_unlock>
 8003cea:	42a3      	cmp	r3, r4
 8003cec:	d90b      	bls.n	8003d06 <_free_r+0x4e>
 8003cee:	6821      	ldr	r1, [r4, #0]
 8003cf0:	1862      	adds	r2, r4, r1
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	bf04      	itt	eq
 8003cf6:	681a      	ldreq	r2, [r3, #0]
 8003cf8:	685b      	ldreq	r3, [r3, #4]
 8003cfa:	6063      	str	r3, [r4, #4]
 8003cfc:	bf04      	itt	eq
 8003cfe:	1852      	addeq	r2, r2, r1
 8003d00:	6022      	streq	r2, [r4, #0]
 8003d02:	602c      	str	r4, [r5, #0]
 8003d04:	e7ec      	b.n	8003ce0 <_free_r+0x28>
 8003d06:	461a      	mov	r2, r3
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	b10b      	cbz	r3, 8003d10 <_free_r+0x58>
 8003d0c:	42a3      	cmp	r3, r4
 8003d0e:	d9fa      	bls.n	8003d06 <_free_r+0x4e>
 8003d10:	6811      	ldr	r1, [r2, #0]
 8003d12:	1855      	adds	r5, r2, r1
 8003d14:	42a5      	cmp	r5, r4
 8003d16:	d10b      	bne.n	8003d30 <_free_r+0x78>
 8003d18:	6824      	ldr	r4, [r4, #0]
 8003d1a:	4421      	add	r1, r4
 8003d1c:	1854      	adds	r4, r2, r1
 8003d1e:	42a3      	cmp	r3, r4
 8003d20:	6011      	str	r1, [r2, #0]
 8003d22:	d1dd      	bne.n	8003ce0 <_free_r+0x28>
 8003d24:	681c      	ldr	r4, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	6053      	str	r3, [r2, #4]
 8003d2a:	4421      	add	r1, r4
 8003d2c:	6011      	str	r1, [r2, #0]
 8003d2e:	e7d7      	b.n	8003ce0 <_free_r+0x28>
 8003d30:	d902      	bls.n	8003d38 <_free_r+0x80>
 8003d32:	230c      	movs	r3, #12
 8003d34:	6003      	str	r3, [r0, #0]
 8003d36:	e7d3      	b.n	8003ce0 <_free_r+0x28>
 8003d38:	6825      	ldr	r5, [r4, #0]
 8003d3a:	1961      	adds	r1, r4, r5
 8003d3c:	428b      	cmp	r3, r1
 8003d3e:	bf04      	itt	eq
 8003d40:	6819      	ldreq	r1, [r3, #0]
 8003d42:	685b      	ldreq	r3, [r3, #4]
 8003d44:	6063      	str	r3, [r4, #4]
 8003d46:	bf04      	itt	eq
 8003d48:	1949      	addeq	r1, r1, r5
 8003d4a:	6021      	streq	r1, [r4, #0]
 8003d4c:	6054      	str	r4, [r2, #4]
 8003d4e:	e7c7      	b.n	8003ce0 <_free_r+0x28>
 8003d50:	b003      	add	sp, #12
 8003d52:	bd30      	pop	{r4, r5, pc}
 8003d54:	20000160 	.word	0x20000160

08003d58 <_malloc_r>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	1ccd      	adds	r5, r1, #3
 8003d5c:	f025 0503 	bic.w	r5, r5, #3
 8003d60:	3508      	adds	r5, #8
 8003d62:	2d0c      	cmp	r5, #12
 8003d64:	bf38      	it	cc
 8003d66:	250c      	movcc	r5, #12
 8003d68:	2d00      	cmp	r5, #0
 8003d6a:	4606      	mov	r6, r0
 8003d6c:	db01      	blt.n	8003d72 <_malloc_r+0x1a>
 8003d6e:	42a9      	cmp	r1, r5
 8003d70:	d903      	bls.n	8003d7a <_malloc_r+0x22>
 8003d72:	230c      	movs	r3, #12
 8003d74:	6033      	str	r3, [r6, #0]
 8003d76:	2000      	movs	r0, #0
 8003d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d7a:	f000 f89b 	bl	8003eb4 <__malloc_lock>
 8003d7e:	4921      	ldr	r1, [pc, #132]	; (8003e04 <_malloc_r+0xac>)
 8003d80:	680a      	ldr	r2, [r1, #0]
 8003d82:	4614      	mov	r4, r2
 8003d84:	b99c      	cbnz	r4, 8003dae <_malloc_r+0x56>
 8003d86:	4f20      	ldr	r7, [pc, #128]	; (8003e08 <_malloc_r+0xb0>)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	b923      	cbnz	r3, 8003d96 <_malloc_r+0x3e>
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	4630      	mov	r0, r6
 8003d90:	f000 f83c 	bl	8003e0c <_sbrk_r>
 8003d94:	6038      	str	r0, [r7, #0]
 8003d96:	4629      	mov	r1, r5
 8003d98:	4630      	mov	r0, r6
 8003d9a:	f000 f837 	bl	8003e0c <_sbrk_r>
 8003d9e:	1c43      	adds	r3, r0, #1
 8003da0:	d123      	bne.n	8003dea <_malloc_r+0x92>
 8003da2:	230c      	movs	r3, #12
 8003da4:	6033      	str	r3, [r6, #0]
 8003da6:	4630      	mov	r0, r6
 8003da8:	f000 f88a 	bl	8003ec0 <__malloc_unlock>
 8003dac:	e7e3      	b.n	8003d76 <_malloc_r+0x1e>
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	1b5b      	subs	r3, r3, r5
 8003db2:	d417      	bmi.n	8003de4 <_malloc_r+0x8c>
 8003db4:	2b0b      	cmp	r3, #11
 8003db6:	d903      	bls.n	8003dc0 <_malloc_r+0x68>
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	441c      	add	r4, r3
 8003dbc:	6025      	str	r5, [r4, #0]
 8003dbe:	e004      	b.n	8003dca <_malloc_r+0x72>
 8003dc0:	6863      	ldr	r3, [r4, #4]
 8003dc2:	42a2      	cmp	r2, r4
 8003dc4:	bf0c      	ite	eq
 8003dc6:	600b      	streq	r3, [r1, #0]
 8003dc8:	6053      	strne	r3, [r2, #4]
 8003dca:	4630      	mov	r0, r6
 8003dcc:	f000 f878 	bl	8003ec0 <__malloc_unlock>
 8003dd0:	f104 000b 	add.w	r0, r4, #11
 8003dd4:	1d23      	adds	r3, r4, #4
 8003dd6:	f020 0007 	bic.w	r0, r0, #7
 8003dda:	1ac2      	subs	r2, r0, r3
 8003ddc:	d0cc      	beq.n	8003d78 <_malloc_r+0x20>
 8003dde:	1a1b      	subs	r3, r3, r0
 8003de0:	50a3      	str	r3, [r4, r2]
 8003de2:	e7c9      	b.n	8003d78 <_malloc_r+0x20>
 8003de4:	4622      	mov	r2, r4
 8003de6:	6864      	ldr	r4, [r4, #4]
 8003de8:	e7cc      	b.n	8003d84 <_malloc_r+0x2c>
 8003dea:	1cc4      	adds	r4, r0, #3
 8003dec:	f024 0403 	bic.w	r4, r4, #3
 8003df0:	42a0      	cmp	r0, r4
 8003df2:	d0e3      	beq.n	8003dbc <_malloc_r+0x64>
 8003df4:	1a21      	subs	r1, r4, r0
 8003df6:	4630      	mov	r0, r6
 8003df8:	f000 f808 	bl	8003e0c <_sbrk_r>
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d1dd      	bne.n	8003dbc <_malloc_r+0x64>
 8003e00:	e7cf      	b.n	8003da2 <_malloc_r+0x4a>
 8003e02:	bf00      	nop
 8003e04:	20000160 	.word	0x20000160
 8003e08:	20000164 	.word	0x20000164

08003e0c <_sbrk_r>:
 8003e0c:	b538      	push	{r3, r4, r5, lr}
 8003e0e:	4d06      	ldr	r5, [pc, #24]	; (8003e28 <_sbrk_r+0x1c>)
 8003e10:	2300      	movs	r3, #0
 8003e12:	4604      	mov	r4, r0
 8003e14:	4608      	mov	r0, r1
 8003e16:	602b      	str	r3, [r5, #0]
 8003e18:	f7ff fd3a 	bl	8003890 <_sbrk>
 8003e1c:	1c43      	adds	r3, r0, #1
 8003e1e:	d102      	bne.n	8003e26 <_sbrk_r+0x1a>
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	b103      	cbz	r3, 8003e26 <_sbrk_r+0x1a>
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	bd38      	pop	{r3, r4, r5, pc}
 8003e28:	20000168 	.word	0x20000168

08003e2c <_raise_r>:
 8003e2c:	291f      	cmp	r1, #31
 8003e2e:	b538      	push	{r3, r4, r5, lr}
 8003e30:	4604      	mov	r4, r0
 8003e32:	460d      	mov	r5, r1
 8003e34:	d904      	bls.n	8003e40 <_raise_r+0x14>
 8003e36:	2316      	movs	r3, #22
 8003e38:	6003      	str	r3, [r0, #0]
 8003e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3e:	bd38      	pop	{r3, r4, r5, pc}
 8003e40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003e42:	b112      	cbz	r2, 8003e4a <_raise_r+0x1e>
 8003e44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003e48:	b94b      	cbnz	r3, 8003e5e <_raise_r+0x32>
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f000 f830 	bl	8003eb0 <_getpid_r>
 8003e50:	462a      	mov	r2, r5
 8003e52:	4601      	mov	r1, r0
 8003e54:	4620      	mov	r0, r4
 8003e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e5a:	f000 b817 	b.w	8003e8c <_kill_r>
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d00a      	beq.n	8003e78 <_raise_r+0x4c>
 8003e62:	1c59      	adds	r1, r3, #1
 8003e64:	d103      	bne.n	8003e6e <_raise_r+0x42>
 8003e66:	2316      	movs	r3, #22
 8003e68:	6003      	str	r3, [r0, #0]
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	e7e7      	b.n	8003e3e <_raise_r+0x12>
 8003e6e:	2400      	movs	r4, #0
 8003e70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003e74:	4628      	mov	r0, r5
 8003e76:	4798      	blx	r3
 8003e78:	2000      	movs	r0, #0
 8003e7a:	e7e0      	b.n	8003e3e <_raise_r+0x12>

08003e7c <raise>:
 8003e7c:	4b02      	ldr	r3, [pc, #8]	; (8003e88 <raise+0xc>)
 8003e7e:	4601      	mov	r1, r0
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	f7ff bfd3 	b.w	8003e2c <_raise_r>
 8003e86:	bf00      	nop
 8003e88:	20000030 	.word	0x20000030

08003e8c <_kill_r>:
 8003e8c:	b538      	push	{r3, r4, r5, lr}
 8003e8e:	4d07      	ldr	r5, [pc, #28]	; (8003eac <_kill_r+0x20>)
 8003e90:	2300      	movs	r3, #0
 8003e92:	4604      	mov	r4, r0
 8003e94:	4608      	mov	r0, r1
 8003e96:	4611      	mov	r1, r2
 8003e98:	602b      	str	r3, [r5, #0]
 8003e9a:	f7ff fcdf 	bl	800385c <_kill>
 8003e9e:	1c43      	adds	r3, r0, #1
 8003ea0:	d102      	bne.n	8003ea8 <_kill_r+0x1c>
 8003ea2:	682b      	ldr	r3, [r5, #0]
 8003ea4:	b103      	cbz	r3, 8003ea8 <_kill_r+0x1c>
 8003ea6:	6023      	str	r3, [r4, #0]
 8003ea8:	bd38      	pop	{r3, r4, r5, pc}
 8003eaa:	bf00      	nop
 8003eac:	20000168 	.word	0x20000168

08003eb0 <_getpid_r>:
 8003eb0:	f7ff bccc 	b.w	800384c <_getpid>

08003eb4 <__malloc_lock>:
 8003eb4:	4801      	ldr	r0, [pc, #4]	; (8003ebc <__malloc_lock+0x8>)
 8003eb6:	f000 b809 	b.w	8003ecc <__retarget_lock_acquire_recursive>
 8003eba:	bf00      	nop
 8003ebc:	20000170 	.word	0x20000170

08003ec0 <__malloc_unlock>:
 8003ec0:	4801      	ldr	r0, [pc, #4]	; (8003ec8 <__malloc_unlock+0x8>)
 8003ec2:	f000 b804 	b.w	8003ece <__retarget_lock_release_recursive>
 8003ec6:	bf00      	nop
 8003ec8:	20000170 	.word	0x20000170

08003ecc <__retarget_lock_acquire_recursive>:
 8003ecc:	4770      	bx	lr

08003ece <__retarget_lock_release_recursive>:
 8003ece:	4770      	bx	lr

08003ed0 <_init>:
 8003ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed2:	bf00      	nop
 8003ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed6:	bc08      	pop	{r3}
 8003ed8:	469e      	mov	lr, r3
 8003eda:	4770      	bx	lr

08003edc <_fini>:
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ede:	bf00      	nop
 8003ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee2:	bc08      	pop	{r3}
 8003ee4:	469e      	mov	lr, r3
 8003ee6:	4770      	bx	lr
