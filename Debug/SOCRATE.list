
SOCRATE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e48  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800200c  0800200c  0001200c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020bc  080020bc  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080020bc  080020bc  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020bc  080020bc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080020bc  080020bc  000120bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080020c4  080020c4  000120c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080020cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000088  08002154  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000148  08002154  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df64  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd1  00000000  00000000  0002e01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000360  00000000  00000000  0002fdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002d8  00000000  00000000  00030150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003fcb  00000000  00000000  00030428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005cc8  00000000  00000000  000343f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008204e  00000000  00000000  0003a0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bc109  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023b0  00000000  00000000  000bc15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000088 	.word	0x20000088
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001ff4 	.word	0x08001ff4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000008c 	.word	0x2000008c
 8000200:	08001ff4 	.word	0x08001ff4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <_ZN5L298xC1Ev>:
 *      Author: 201723940
 */

#include "L298x.h"

L298x::L298x() {
 8000214:	b590      	push	{r4, r7, lr}
 8000216:	b085      	sub	sp, #20
 8000218:	af02      	add	r7, sp, #8
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	4a11      	ldr	r2, [pc, #68]	; (8000264 <_ZN5L298xC1Ev+0x50>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	601a      	str	r2, [r3, #0]
	//pince pas de clock ou de chanal
	//ouverture = cw
	//fermeture = ccw
	config = new hardwareConfig();
 8000222:	2004      	movs	r0, #4
 8000224:	f001 fce9 	bl	8001bfa <_Znwj>
 8000228:	4603      	mov	r3, r0
 800022a:	461c      	mov	r4, r3
 800022c:	4620      	mov	r0, r4
 800022e:	f000 ffad 	bl	800118c <_ZN14hardwareConfigC1Ev>
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	605c      	str	r4, [r3, #4]
	config->GPIO_Config(GPIOA, 8, OUTPUT,2);// controle de la pince A
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6858      	ldr	r0, [r3, #4]
 800023a:	2302      	movs	r3, #2
 800023c:	9300      	str	r3, [sp, #0]
 800023e:	2301      	movs	r3, #1
 8000240:	2208      	movs	r2, #8
 8000242:	4909      	ldr	r1, [pc, #36]	; (8000268 <_ZN5L298xC1Ev+0x54>)
 8000244:	f001 f840 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
	config->GPIO_Config(GPIOA, 9, OUTPUT,2);// controle de la pince B
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	6858      	ldr	r0, [r3, #4]
 800024c:	2302      	movs	r3, #2
 800024e:	9300      	str	r3, [sp, #0]
 8000250:	2301      	movs	r3, #1
 8000252:	2209      	movs	r2, #9
 8000254:	4904      	ldr	r1, [pc, #16]	; (8000268 <_ZN5L298xC1Ev+0x54>)
 8000256:	f001 f837 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>

}
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4618      	mov	r0, r3
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bd90      	pop	{r4, r7, pc}
 8000264:	08002014 	.word	0x08002014
 8000268:	40020000 	.word	0x40020000

0800026c <_ZN5L298xD1Ev>:

L298x::~L298x() {
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <_ZN5L298xD1Ev+0x34>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	601a      	str	r2, [r3, #0]
	if(config)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d008      	beq.n	8000294 <_ZN5L298xD1Ev+0x28>
		delete config;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d004      	beq.n	8000294 <_ZN5L298xD1Ev+0x28>
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	3204      	adds	r2, #4
 800028e:	6812      	ldr	r2, [r2, #0]
 8000290:	4618      	mov	r0, r3
 8000292:	4790      	blx	r2
}
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4618      	mov	r0, r3
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	08002014 	.word	0x08002014

080002a4 <_ZN5L298xD0Ev>:
L298x::~L298x() {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
}
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f7ff ffdd 	bl	800026c <_ZN5L298xD1Ev>
 80002b2:	210c      	movs	r1, #12
 80002b4:	6878      	ldr	r0, [r7, #4]
 80002b6:	f001 fc9e 	bl	8001bf6 <_ZdlPvj>
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4618      	mov	r0, r3
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_>:
void L298x::setDirection(_DIRECTION_PINCE_ dir)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	70fb      	strb	r3, [r7, #3]
	if(dir==CW_P)
 80002d0:	78fb      	ldrb	r3, [r7, #3]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d111      	bne.n	80002fa <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x36>
	{
		direction=0;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2200      	movs	r2, #0
 80002da:	721a      	strb	r2, [r3, #8]
		config->GPIO_Pin_Enable(GPIOA, 8);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	2208      	movs	r2, #8
 80002e2:	491c      	ldr	r1, [pc, #112]	; (8000354 <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x90>)
 80002e4:	4618      	mov	r0, r3
 80002e6:	f001 f84f 	bl	8001388 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		config->GPIO_Pin_Disable(GPIOA, 9);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	685b      	ldr	r3, [r3, #4]
 80002ee:	2209      	movs	r2, #9
 80002f0:	4918      	ldr	r1, [pc, #96]	; (8000354 <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x90>)
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 f886 	bl	8001404 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
	{
		direction=2;
		config->GPIO_Pin_Disable(GPIOA, 9);
		config->GPIO_Pin_Disable(GPIOA, 8);
	}
}
 80002f8:	e028      	b.n	800034c <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x88>
	else if(dir==CCW_P)
 80002fa:	78fb      	ldrb	r3, [r7, #3]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d111      	bne.n	8000324 <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x60>
		direction=1;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2201      	movs	r2, #1
 8000304:	721a      	strb	r2, [r3, #8]
		config->GPIO_Pin_Enable(GPIOA, 9);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	2209      	movs	r2, #9
 800030c:	4911      	ldr	r1, [pc, #68]	; (8000354 <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x90>)
 800030e:	4618      	mov	r0, r3
 8000310:	f001 f83a 	bl	8001388 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		config->GPIO_Pin_Disable(GPIOA, 8);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	2208      	movs	r2, #8
 800031a:	490e      	ldr	r1, [pc, #56]	; (8000354 <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x90>)
 800031c:	4618      	mov	r0, r3
 800031e:	f001 f871 	bl	8001404 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
}
 8000322:	e013      	b.n	800034c <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x88>
	else if (dir==IDLE_P)
 8000324:	78fb      	ldrb	r3, [r7, #3]
 8000326:	2b03      	cmp	r3, #3
 8000328:	d110      	bne.n	800034c <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x88>
		direction=2;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2202      	movs	r2, #2
 800032e:	721a      	strb	r2, [r3, #8]
		config->GPIO_Pin_Disable(GPIOA, 9);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	2209      	movs	r2, #9
 8000336:	4907      	ldr	r1, [pc, #28]	; (8000354 <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x90>)
 8000338:	4618      	mov	r0, r3
 800033a:	f001 f863 	bl	8001404 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
		config->GPIO_Pin_Disable(GPIOA, 8);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	2208      	movs	r2, #8
 8000344:	4903      	ldr	r1, [pc, #12]	; (8000354 <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_+0x90>)
 8000346:	4618      	mov	r0, r3
 8000348:	f001 f85c 	bl	8001404 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
}
 800034c:	bf00      	nop
 800034e:	3708      	adds	r7, #8
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40020000 	.word	0x40020000

08000358 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000366:	f003 021f 	and.w	r2, r3, #31
 800036a:	4907      	ldr	r1, [pc, #28]	; (8000388 <NVIC_EnableIRQ+0x30>)
 800036c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000370:	095b      	lsrs	r3, r3, #5
 8000372:	2001      	movs	r0, #1
 8000374:	fa00 f202 	lsl.w	r2, r0, r2
 8000378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	e000e100 	.word	0xe000e100

0800038c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	6039      	str	r1, [r7, #0]
 8000396:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8000398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039c:	2b00      	cmp	r3, #0
 800039e:	da0c      	bge.n	80003ba <NVIC_SetPriority+0x2e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	b2da      	uxtb	r2, r3
 80003a4:	490d      	ldr	r1, [pc, #52]	; (80003dc <NVIC_SetPriority+0x50>)
 80003a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003aa:	f003 030f 	and.w	r3, r3, #15
 80003ae:	3b04      	subs	r3, #4
 80003b0:	0112      	lsls	r2, r2, #4
 80003b2:	b2d2      	uxtb	r2, r2
 80003b4:	440b      	add	r3, r1
 80003b6:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003b8:	e009      	b.n	80003ce <NVIC_SetPriority+0x42>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	4908      	ldr	r1, [pc, #32]	; (80003e0 <NVIC_SetPriority+0x54>)
 80003c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c4:	0112      	lsls	r2, r2, #4
 80003c6:	b2d2      	uxtb	r2, r2
 80003c8:	440b      	add	r3, r1
 80003ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	e000e100 	.word	0xe000e100

080003e4 <_ZN15STM32F446Usart3C1Ev>:
#include "STM32F446Usart.h"

STM32F446Usart3* STM32F446Usart3::instance =0;


STM32F446Usart3::STM32F446Usart3()
 80003e4:	b590      	push	{r4, r7, lr}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af02      	add	r7, sp, #8
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	4a38      	ldr	r2, [pc, #224]	; (80004d0 <_ZN15STM32F446Usart3C1Ev+0xec>)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3308      	adds	r3, #8
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 f9ca 	bl	8000790 <_ZN8BuffFifoImLt64EEC1Ev>
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000402:	4618      	mov	r0, r3
 8000404:	f000 f9c4 	bl	8000790 <_ZN8BuffFifoImLt64EEC1Ev>
{
	config = new hardwareConfig();
 8000408:	2004      	movs	r0, #4
 800040a:	f001 fbf6 	bl	8001bfa <_Znwj>
 800040e:	4603      	mov	r3, r0
 8000410:	461c      	mov	r4, r3
 8000412:	4620      	mov	r0, r4
 8000414:	f000 feba 	bl	800118c <_ZN14hardwareConfigC1Ev>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218
	//active la clk du gpio B et du usart 3
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;//(1<<18)
 800041e:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <_ZN15STM32F446Usart3C1Ev+0xf0>)
 8000420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000422:	4a2c      	ldr	r2, [pc, #176]	; (80004d4 <_ZN15STM32F446Usart3C1Ev+0xf0>)
 8000424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000428:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800042a:	4b2a      	ldr	r3, [pc, #168]	; (80004d4 <_ZN15STM32F446Usart3C1Ev+0xf0>)
 800042c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800042e:	4a29      	ldr	r2, [pc, #164]	; (80004d4 <_ZN15STM32F446Usart3C1Ev+0xf0>)
 8000430:	f043 0302 	orr.w	r3, r3, #2
 8000434:	6413      	str	r3, [r2, #64]	; 0x40


	//mode alternatif pour pb10 et 11
	config->GPIO_Config(GPIOC, 10, ALTERNATE, 7);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
 800043c:	2307      	movs	r3, #7
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2302      	movs	r3, #2
 8000442:	220a      	movs	r2, #10
 8000444:	4924      	ldr	r1, [pc, #144]	; (80004d8 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8000446:	f000 ff3f 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
	config->GPIO_Config(GPIOC, 5 , ALTERNATE, 7);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
 8000450:	2307      	movs	r3, #7
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	2302      	movs	r3, #2
 8000456:	2205      	movs	r2, #5
 8000458:	491f      	ldr	r1, [pc, #124]	; (80004d8 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 800045a:	f000 ff35 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
	GPIOC->AFR[0] |= (7<<8); // registre af7 fction alternative USART3
 800045e:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8000460:	6a1b      	ldr	r3, [r3, #32]
 8000462:	4a1d      	ldr	r2, [pc, #116]	; (80004d8 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8000464:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000468:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[1] |= (7<<12);
 800046a:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 800046c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800046e:	4a1a      	ldr	r2, [pc, #104]	; (80004d8 <_ZN15STM32F446Usart3C1Ev+0xf4>)
 8000470:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000474:	6253      	str	r3, [r2, #36]	; 0x24

	//sélection du baud 8N1 @9600
	USART3->CR1 &= ~USART_CR1_UE;// usart disable
 8000476:	4b19      	ldr	r3, [pc, #100]	; (80004dc <_ZN15STM32F446Usart3C1Ev+0xf8>)
 8000478:	899b      	ldrh	r3, [r3, #12]
 800047a:	b29b      	uxth	r3, r3
 800047c:	4a17      	ldr	r2, [pc, #92]	; (80004dc <_ZN15STM32F446Usart3C1Ev+0xf8>)
 800047e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000482:	b29b      	uxth	r3, r3
 8000484:	8193      	strh	r3, [r2, #12]
	NVIC_EnableIRQ(USART3_IRQn);
 8000486:	2027      	movs	r0, #39	; 0x27
 8000488:	f7ff ff66 	bl	8000358 <NVIC_EnableIRQ>
	NVIC_SetPriority(USART3_IRQn,4);
 800048c:	2104      	movs	r1, #4
 800048e:	2027      	movs	r0, #39	; 0x27
 8000490:	f7ff ff7c 	bl	800038c <NVIC_SetPriority>
	//active le tx et rx + les interruptions dee chaqu'un
	USART3->CR1 |=  USART_CR1_TE | USART_CR1_RE |  USART_CR1_RXNEIE | USART_CR1_TXEIE;
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <_ZN15STM32F446Usart3C1Ev+0xf8>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	b29b      	uxth	r3, r3
 800049a:	4a10      	ldr	r2, [pc, #64]	; (80004dc <_ZN15STM32F446Usart3C1Ev+0xf8>)
 800049c:	f043 03ac 	orr.w	r3, r3, #172	; 0xac
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	8193      	strh	r3, [r2, #12]
	setBaudRate(9600);
 80004a4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f000 f8d5 	bl	8000658 <_ZN15STM32F446Usart311setBaudRateEm>
	USART3->CR1 |= USART_CR1_UE; //usart enable
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <_ZN15STM32F446Usart3C1Ev+0xf8>)
 80004b0:	899b      	ldrh	r3, [r3, #12]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	4a09      	ldr	r2, [pc, #36]	; (80004dc <_ZN15STM32F446Usart3C1Ev+0xf8>)
 80004b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	8193      	strh	r3, [r2, #12]


	isTransmitting = false;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2200      	movs	r2, #0
 80004c2:	711a      	strb	r2, [r3, #4]
}
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4618      	mov	r0, r3
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd90      	pop	{r4, r7, pc}
 80004ce:	bf00      	nop
 80004d0:	08002024 	.word	0x08002024
 80004d4:	40023800 	.word	0x40023800
 80004d8:	40020800 	.word	0x40020800
 80004dc:	40004800 	.word	0x40004800

080004e0 <_ZN15STM32F446Usart3D1Ev>:

STM32F446Usart3::~STM32F446Usart3()
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	4a11      	ldr	r2, [pc, #68]	; (8000530 <_ZN15STM32F446Usart3D1Ev+0x50>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	601a      	str	r2, [r3, #0]
{
	if (instance)
 80004ee:	4b11      	ldr	r3, [pc, #68]	; (8000534 <_ZN15STM32F446Usart3D1Ev+0x54>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d008      	beq.n	8000508 <_ZN15STM32F446Usart3D1Ev+0x28>
		delete instance;
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <_ZN15STM32F446Usart3D1Ev+0x54>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d004      	beq.n	8000508 <_ZN15STM32F446Usart3D1Ev+0x28>
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	3204      	adds	r2, #4
 8000502:	6812      	ldr	r2, [r2, #0]
 8000504:	4618      	mov	r0, r3
 8000506:	4790      	blx	r2
	if(config)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800050e:	2b00      	cmp	r3, #0
 8000510:	d009      	beq.n	8000526 <_ZN15STM32F446Usart3D1Ev+0x46>
		delete config;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000518:	2b00      	cmp	r3, #0
 800051a:	d004      	beq.n	8000526 <_ZN15STM32F446Usart3D1Ev+0x46>
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	3204      	adds	r2, #4
 8000520:	6812      	ldr	r2, [r2, #0]
 8000522:	4618      	mov	r0, r3
 8000524:	4790      	blx	r2
}
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	08002024 	.word	0x08002024
 8000534:	200000a4 	.word	0x200000a4

08000538 <_ZN15STM32F446Usart3D0Ev>:
STM32F446Usart3::~STM32F446Usart3()
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
}
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f7ff ffcd 	bl	80004e0 <_ZN15STM32F446Usart3D1Ev>
 8000546:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f001 fb53 	bl	8001bf6 <_ZdlPvj>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <_ZN15STM32F446Usart311getInstanceEv>:
STM32F446Usart3 * STM32F446Usart3::getInstance()
{
 800055c:	b598      	push	{r3, r4, r7, lr}
 800055e:	af00      	add	r7, sp, #0
	if(instance==0)
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <_ZN15STM32F446Usart311getInstanceEv+0x2c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d10a      	bne.n	800057e <_ZN15STM32F446Usart311getInstanceEv+0x22>
		instance=new STM32F446Usart3();
 8000568:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800056c:	f001 fb45 	bl	8001bfa <_Znwj>
 8000570:	4603      	mov	r3, r0
 8000572:	461c      	mov	r4, r3
 8000574:	4620      	mov	r0, r4
 8000576:	f7ff ff35 	bl	80003e4 <_ZN15STM32F446Usart3C1Ev>
 800057a:	4b03      	ldr	r3, [pc, #12]	; (8000588 <_ZN15STM32F446Usart311getInstanceEv+0x2c>)
 800057c:	601c      	str	r4, [r3, #0]
	return instance;
 800057e:	4b02      	ldr	r3, [pc, #8]	; (8000588 <_ZN15STM32F446Usart311getInstanceEv+0x2c>)
 8000580:	681b      	ldr	r3, [r3, #0]
}
 8000582:	4618      	mov	r0, r3
 8000584:	bd98      	pop	{r3, r4, r7, pc}
 8000586:	bf00      	nop
 8000588:	200000a4 	.word	0x200000a4

0800058c <_ZN15STM32F446Usart35writeEh>:
void STM32F446Usart3::write(uint8_t data)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	70fb      	strb	r3, [r7, #3]
	buffTx.add(data);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800059e:	78fa      	ldrb	r2, [r7, #3]
 80005a0:	4611      	mov	r1, r2
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f900 	bl	80007a8 <_ZN8BuffFifoImLt64EE3addEm>
	if(!isTransmitting)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	791b      	ldrb	r3, [r3, #4]
 80005ac:	f083 0301 	eor.w	r3, r3, #1
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00a      	beq.n	80005cc <_ZN15STM32F446Usart35writeEh+0x40>
	{
		isTransmitting =true;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2201      	movs	r2, #1
 80005ba:	711a      	strb	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_TXEIE;
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <_ZN15STM32F446Usart35writeEh+0x48>)
 80005be:	899b      	ldrh	r3, [r3, #12]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <_ZN15STM32F446Usart35writeEh+0x48>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	8193      	strh	r3, [r2, #12]
	}
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40004800 	.word	0x40004800

080005d8 <_ZN15STM32F446Usart35writeEPc>:
void STM32F446Usart3::write(char *string)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]

	while(*string)
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d008      	beq.n	80005fc <_ZN15STM32F446Usart35writeEPc+0x24>
	{
		write(*string++);
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	1c5a      	adds	r2, r3, #1
 80005ee:	603a      	str	r2, [r7, #0]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	4619      	mov	r1, r3
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ffc9 	bl	800058c <_ZN15STM32F446Usart35writeEh>
	while(*string)
 80005fa:	e7f2      	b.n	80005e2 <_ZN15STM32F446Usart35writeEPc+0xa>
	}

}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <_ZN15STM32F446Usart34readEv>:
		{
			write(*string++);
		}
}
uint8_t STM32F446Usart3:: read(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	if(buffRx.isEmpty())
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3308      	adds	r3, #8
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f8ea 	bl	80007ea <_ZNK8BuffFifoImLt64EE7isEmptyEv>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <_ZN15STM32F446Usart34readEv+0x1c>
		return 0;
 800061c:	2300      	movs	r3, #0
 800061e:	e006      	b.n	800062e <_ZN15STM32F446Usart34readEv+0x2a>
	return buffRx.rem();
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3308      	adds	r3, #8
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f8f3 	bl	8000810 <_ZN8BuffFifoImLt64EE3remEv>
 800062a:	4603      	mov	r3, r0
 800062c:	b2db      	uxtb	r3, r3
}
 800062e:	4618      	mov	r0, r3
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <_ZNK15STM32F446Usart313dataAvailableEv>:
bool STM32F446Usart3::dataAvailable() const
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
	return !buffRx.isEmpty();
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	3308      	adds	r3, #8
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f8d1 	bl	80007ea <_ZNK8BuffFifoImLt64EE7isEmptyEv>
 8000648:	4603      	mov	r3, r0
 800064a:	f083 0301 	eor.w	r3, r3, #1
 800064e:	b2db      	uxtb	r3, r3
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <_ZN15STM32F446Usart311setBaudRateEm>:
void STM32F446Usart3::setBaudRate(uint32_t baudrate)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	if(baudrate > 2810000)
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <_ZN15STM32F446Usart311setBaudRateEm+0x60>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d90a      	bls.n	8000680 <_ZN15STM32F446Usart311setBaudRateEm+0x28>
		USART3->CR1 |= USART_CR1_OVER8;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 800066c:	899b      	ldrh	r3, [r3, #12]
 800066e:	b29b      	uxth	r3, r3
 8000670:	4a12      	ldr	r2, [pc, #72]	; (80006bc <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 8000672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800067a:	b29b      	uxth	r3, r3
 800067c:	8193      	strh	r3, [r2, #12]
 800067e:	e007      	b.n	8000690 <_ZN15STM32F446Usart311setBaudRateEm+0x38>
	else
		USART3->CR1 &= ~USART_CR1_OVER8;
 8000680:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 8000682:	899b      	ldrh	r3, [r3, #12]
 8000684:	b29b      	uxth	r3, r3
 8000686:	4a0d      	ldr	r2, [pc, #52]	; (80006bc <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 8000688:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800068c:	b29b      	uxth	r3, r3
 800068e:	8193      	strh	r3, [r2, #12]

	USART3->BRR |= (SystemCoreClock>>2) / baudrate;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 8000692:	891b      	ldrh	r3, [r3, #8]
 8000694:	b29a      	uxth	r2, r3
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <_ZN15STM32F446Usart311setBaudRateEm+0x68>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	0899      	lsrs	r1, r3, #2
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	fbb1 f3f3 	udiv	r3, r1, r3
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	4905      	ldr	r1, [pc, #20]	; (80006bc <_ZN15STM32F446Usart311setBaudRateEm+0x64>)
 80006a6:	4313      	orrs	r3, r2
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	810b      	strh	r3, [r1, #8]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	002ae090 	.word	0x002ae090
 80006bc:	40004800 	.word	0x40004800
 80006c0:	20000010 	.word	0x20000010

080006c4 <USART3_IRQHandler>:

extern "C"
{
void USART3_IRQHandler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
	volatile unsigned int usartStatus;
	char tmp;
	//recupere le statu de l'usart
	usartStatus = USART3->SR;
 80006ca:	4b2f      	ldr	r3, [pc, #188]	; (8000788 <USART3_IRQHandler+0xc4>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	603b      	str	r3, [r7, #0]

	if(usartStatus & USART_SR_RXNE)
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	f003 0320 	and.w	r3, r3, #32
 80006d8:	2b00      	cmp	r3, #0
 80006da:	bf14      	ite	ne
 80006dc:	2301      	movne	r3, #1
 80006de:	2300      	moveq	r3, #0
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d013      	beq.n	800070e <USART3_IRQHandler+0x4a>
	{
		USART3->SR &= ~USART_SR_RXNE;
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <USART3_IRQHandler+0xc4>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	4a26      	ldr	r2, [pc, #152]	; (8000788 <USART3_IRQHandler+0xc4>)
 80006ee:	f023 0320 	bic.w	r3, r3, #32
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	8013      	strh	r3, [r2, #0]
		tmp =USART3->DR;
 80006f6:	4b24      	ldr	r3, [pc, #144]	; (8000788 <USART3_IRQHandler+0xc4>)
 80006f8:	889b      	ldrh	r3, [r3, #4]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	71fb      	strb	r3, [r7, #7]
		STM32F446Usart3::instance->buffRx.add(tmp);
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <USART3_IRQHandler+0xc8>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	3308      	adds	r3, #8
 8000704:	79fa      	ldrb	r2, [r7, #7]
 8000706:	4611      	mov	r1, r2
 8000708:	4618      	mov	r0, r3
 800070a:	f000 f84d 	bl	80007a8 <_ZN8BuffFifoImLt64EE3addEm>
	}
	if(usartStatus & USART_SR_TXE)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000714:	2b00      	cmp	r3, #0
 8000716:	bf14      	ite	ne
 8000718:	2301      	movne	r3, #1
 800071a:	2300      	moveq	r3, #0
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d02d      	beq.n	800077e <USART3_IRQHandler+0xba>
	{
		USART3->SR &= ~USART_CR1_TXEIE;
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <USART3_IRQHandler+0xc4>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	b29b      	uxth	r3, r3
 8000728:	4a17      	ldr	r2, [pc, #92]	; (8000788 <USART3_IRQHandler+0xc4>)
 800072a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800072e:	b29b      	uxth	r3, r3
 8000730:	8013      	strh	r3, [r2, #0]
		if(STM32F446Usart3::instance->buffTx.isEmpty())
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <USART3_IRQHandler+0xc8>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f855 	bl	80007ea <_ZNK8BuffFifoImLt64EE7isEmptyEv>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d00c      	beq.n	8000760 <USART3_IRQHandler+0x9c>
		{
			STM32F446Usart3::instance->isTransmitting =false;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <USART3_IRQHandler+0xc8>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2200      	movs	r2, #0
 800074c:	711a      	strb	r2, [r3, #4]
			USART3->CR1 &= (~USART_CR1_TXEIE);
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <USART3_IRQHandler+0xc4>)
 8000750:	899b      	ldrh	r3, [r3, #12]
 8000752:	b29b      	uxth	r3, r3
 8000754:	4a0c      	ldr	r2, [pc, #48]	; (8000788 <USART3_IRQHandler+0xc4>)
 8000756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800075a:	b29b      	uxth	r3, r3
 800075c:	8193      	strh	r3, [r2, #12]

			USART3->DR = STM32F446Usart3::instance->buffTx.rem();
			STM32F446Usart3::instance->isTransmitting= true;
		}
	}
}
 800075e:	e00e      	b.n	800077e <USART3_IRQHandler+0xba>
			USART3->DR = STM32F446Usart3::instance->buffTx.rem();
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <USART3_IRQHandler+0xc8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f851 	bl	8000810 <_ZN8BuffFifoImLt64EE3remEv>
 800076e:	4602      	mov	r2, r0
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <USART3_IRQHandler+0xc4>)
 8000772:	b292      	uxth	r2, r2
 8000774:	809a      	strh	r2, [r3, #4]
			STM32F446Usart3::instance->isTransmitting= true;
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <USART3_IRQHandler+0xc8>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2201      	movs	r2, #1
 800077c:	711a      	strb	r2, [r3, #4]
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40004800 	.word	0x40004800
 800078c:	200000a4 	.word	0x200000a4

08000790 <_ZN8BuffFifoImLt64EEC1Ev>:
#include <stdlib.h>
template <class T, uint16_t nSize>
class BuffFifo {
public:

	BuffFifo()
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	{
        reset();
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 f858 	bl	800084e <_ZN8BuffFifoImLt64EE5resetEv>
    }
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <_ZN8BuffFifoImLt64EE3addEm>:
    {
        in = 0;
        out = 0;
    }

    bool add(T e)
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
    {
        if( (in + 1) != out )
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d00d      	beq.n	80007dc <_ZN8BuffFifoImLt64EE3addEm+0x34>
        {
            data[in++ & (nSize-1)] = e;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	1c59      	adds	r1, r3, #1
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	6011      	str	r1, [r2, #0]
 80007ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3202      	adds	r2, #2
 80007d2:	6839      	ldr	r1, [r7, #0]
 80007d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            return 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	e000      	b.n	80007de <_ZN8BuffFifoImLt64EE3addEm+0x36>
        }
        return 0;
 80007dc:	2300      	movs	r3, #0
    }
 80007de:	4618      	mov	r0, r3
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <_ZNK8BuffFifoImLt64EE7isEmptyEv>:
            return data[out++ & (nSize-1)] ;
        }
        return data[0];
    }

    bool isEmpty() const{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
        return (out == in);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	685a      	ldr	r2, [r3, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	bf0c      	ite	eq
 80007fe:	2301      	moveq	r3, #1
 8000800:	2300      	movne	r3, #0
 8000802:	b2db      	uxtb	r3, r3
    }
 8000804:	4618      	mov	r0, r3
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <_ZN8BuffFifoImLt64EE3remEv>:
    T rem(){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
        if (!isEmpty())
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ffe6 	bl	80007ea <_ZNK8BuffFifoImLt64EE7isEmptyEv>
 800081e:	4603      	mov	r3, r0
 8000820:	f083 0301 	eor.w	r3, r3, #1
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d00b      	beq.n	8000842 <_ZN8BuffFifoImLt64EE3remEv+0x32>
            return data[out++ & (nSize-1)] ;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	1c59      	adds	r1, r3, #1
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	6051      	str	r1, [r2, #4]
 8000834:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3202      	adds	r2, #2
 800083c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000840:	e001      	b.n	8000846 <_ZN8BuffFifoImLt64EE3remEv+0x36>
        return data[0];
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	689b      	ldr	r3, [r3, #8]
    }
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <_ZN8BuffFifoImLt64EE5resetEv>:
    void reset()
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
        in = 0;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
        out = 0;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
    }
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <NVIC_EnableIRQ>:
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	f003 021f 	and.w	r2, r3, #31
 8000882:	4907      	ldr	r1, [pc, #28]	; (80008a0 <NVIC_EnableIRQ+0x30>)
 8000884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000888:	095b      	lsrs	r3, r3, #5
 800088a:	2001      	movs	r0, #1
 800088c:	fa00 f202 	lsl.w	r2, r0, r2
 8000890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000e100 	.word	0xe000e100

080008a4 <NVIC_SetPriority>:
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	da0c      	bge.n	80008d2 <NVIC_SetPriority+0x2e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	490d      	ldr	r1, [pc, #52]	; (80008f4 <NVIC_SetPriority+0x50>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	3b04      	subs	r3, #4
 80008c8:	0112      	lsls	r2, r2, #4
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	440b      	add	r3, r1
 80008ce:	761a      	strb	r2, [r3, #24]
}
 80008d0:	e009      	b.n	80008e6 <NVIC_SetPriority+0x42>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4908      	ldr	r1, [pc, #32]	; (80008f8 <NVIC_SetPriority+0x54>)
 80008d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008dc:	0112      	lsls	r2, r2, #4
 80008de:	b2d2      	uxtb	r2, r2
 80008e0:	440b      	add	r3, r1
 80008e2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00
 80008f8:	e000e100 	.word	0xe000e100

080008fc <_ZN5TimerD1Ev>:
	 */
	Timer(TIM_TypeDef * tmr, uint32_t us,bool interruptEnable);
	/*
	 * Destructeur
	 */
	virtual ~Timer(){};
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <_ZN5TimerD1Ev+0x1c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	08002070 	.word	0x08002070

0800091c <_ZN5TimerD0Ev>:
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ffe9 	bl	80008fc <_ZN5TimerD1Ev>
 800092a:	2108      	movs	r1, #8
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f001 f962 	bl	8001bf6 <_ZdlPvj>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <_ZN5TimerC1EP11TIM_TypeDefmb>:
 *      Author: Tristan Franc
 */

#include "Timer_PWM.h"

Timer::Timer(TIM_TypeDef * tmr, uint32_t us,bool interruptEnable)
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	70fb      	strb	r3, [r7, #3]
 800094a:	4a42      	ldr	r2, [pc, #264]	; (8000a54 <_ZN5TimerC1EP11TIM_TypeDefmb+0x118>)
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	601a      	str	r2, [r3, #0]
{
	timer = tmr;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	605a      	str	r2, [r3, #4]
	if(tmr== TIM1)
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	4a3f      	ldr	r2, [pc, #252]	; (8000a58 <_ZN5TimerC1EP11TIM_TypeDefmb+0x11c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d10f      	bne.n	800097e <_ZN5TimerC1EP11TIM_TypeDefmb+0x42>
	{
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800095e:	4b3f      	ldr	r3, [pc, #252]	; (8000a5c <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a3e      	ldr	r2, [pc, #248]	; (8000a5c <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
		if(interruptEnable)
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d006      	beq.n	800097e <_ZN5TimerC1EP11TIM_TypeDefmb+0x42>
		{
			NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000970:	201b      	movs	r0, #27
 8000972:	f7ff ff7d 	bl	8000870 <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM1_CC_IRQn, 2);
 8000976:	2102      	movs	r1, #2
 8000978:	201b      	movs	r0, #27
 800097a:	f7ff ff93 	bl	80008a4 <NVIC_SetPriority>
		}
	}
	if ( tmr == TIM2)
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000984:	d10f      	bne.n	80009a6 <_ZN5TimerC1EP11TIM_TypeDefmb+0x6a>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000986:	4b35      	ldr	r3, [pc, #212]	; (8000a5c <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a34      	ldr	r2, [pc, #208]	; (8000a5c <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
		if(interruptEnable)
 8000992:	78fb      	ldrb	r3, [r7, #3]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d006      	beq.n	80009a6 <_ZN5TimerC1EP11TIM_TypeDefmb+0x6a>
		{
			NVIC_EnableIRQ(TIM2_IRQn);
 8000998:	201c      	movs	r0, #28
 800099a:	f7ff ff69 	bl	8000870 <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM2_IRQn,1);
 800099e:	2101      	movs	r1, #1
 80009a0:	201c      	movs	r0, #28
 80009a2:	f7ff ff7f 	bl	80008a4 <NVIC_SetPriority>
		}
	}
	if ( tmr == TIM3)
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	4a2d      	ldr	r2, [pc, #180]	; (8000a60 <_ZN5TimerC1EP11TIM_TypeDefmb+0x124>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d10f      	bne.n	80009ce <_ZN5TimerC1EP11TIM_TypeDefmb+0x92>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80009ae:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a2a      	ldr	r2, [pc, #168]	; (8000a5c <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
		if(interruptEnable)
 80009ba:	78fb      	ldrb	r3, [r7, #3]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d006      	beq.n	80009ce <_ZN5TimerC1EP11TIM_TypeDefmb+0x92>
		{
			NVIC_EnableIRQ(TIM3_IRQn);
 80009c0:	201d      	movs	r0, #29
 80009c2:	f7ff ff55 	bl	8000870 <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM3_IRQn,1);
 80009c6:	2101      	movs	r1, #1
 80009c8:	201d      	movs	r0, #29
 80009ca:	f7ff ff6b 	bl	80008a4 <NVIC_SetPriority>
		}
	}
	if ( tmr == TIM4)
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <_ZN5TimerC1EP11TIM_TypeDefmb+0x128>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d10f      	bne.n	80009f6 <_ZN5TimerC1EP11TIM_TypeDefmb+0xba>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a20      	ldr	r2, [pc, #128]	; (8000a5c <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
		if(interruptEnable)
 80009e2:	78fb      	ldrb	r3, [r7, #3]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d006      	beq.n	80009f6 <_ZN5TimerC1EP11TIM_TypeDefmb+0xba>
		{
			NVIC_EnableIRQ(TIM4_IRQn);
 80009e8:	201e      	movs	r0, #30
 80009ea:	f7ff ff41 	bl	8000870 <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM4_IRQn,0);
 80009ee:	2100      	movs	r1, #0
 80009f0:	201e      	movs	r0, #30
 80009f2:	f7ff ff57 	bl	80008a4 <NVIC_SetPriority>
		}

	}
	if ( tmr == TIM5)
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <_ZN5TimerC1EP11TIM_TypeDefmb+0x12c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d10f      	bne.n	8000a1e <_ZN5TimerC1EP11TIM_TypeDefmb+0xe2>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <_ZN5TimerC1EP11TIM_TypeDefmb+0x120>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
		if(interruptEnable)
 8000a0a:	78fb      	ldrb	r3, [r7, #3]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d006      	beq.n	8000a1e <_ZN5TimerC1EP11TIM_TypeDefmb+0xe2>
		{
			NVIC_EnableIRQ(TIM5_IRQn);
 8000a10:	2032      	movs	r0, #50	; 0x32
 8000a12:	f7ff ff2d 	bl	8000870 <NVIC_EnableIRQ>
			NVIC_SetPriority(TIM5_IRQn,2);
 8000a16:	2102      	movs	r1, #2
 8000a18:	2032      	movs	r0, #50	; 0x32
 8000a1a:	f7ff ff43 	bl	80008a4 <NVIC_SetPriority>
		}
	}
	setPeriod(us);
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	f000 f823 	bl	8000a6c <_ZN5Timer9setPeriodEm>
	if(interruptEnable)
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d003      	beq.n	8000a34 <_ZN5TimerC1EP11TIM_TypeDefmb+0xf8>
		timer->DIER = TIM_DIER_UIE;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2201      	movs	r2, #1
 8000a32:	819a      	strh	r2, [r3, #12]
	timer->CR1 |= TIM_CR1_ARPE;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a44:	b292      	uxth	r2, r2
 8000a46:	801a      	strh	r2, [r3, #0]
}
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	08002070 	.word	0x08002070
 8000a58:	40010000 	.word	0x40010000
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40000400 	.word	0x40000400
 8000a64:	40000800 	.word	0x40000800
 8000a68:	40000c00 	.word	0x40000c00

08000a6c <_ZN5Timer9setPeriodEm>:

void Timer::setPeriod(uint32_t us)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
	uint32_t divFactor = 2000000;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <_ZN5Timer9setPeriodEm+0x68>)
 8000a78:	60fb      	str	r3, [r7, #12]
	uint32_t reload = us - 1;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]

	if ( us > 10000)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d909      	bls.n	8000a9e <_ZN5Timer9setPeriodEm+0x32>
	{
		reload = us / 100 - 1;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <_ZN5Timer9setPeriodEm+0x6c>)
 8000a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	3b01      	subs	r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
		divFactor = 20000;
 8000a98:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a9c:	60fb      	str	r3, [r7, #12]
	}

	if(reload < 1)
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d101      	bne.n	8000aa8 <_ZN5Timer9setPeriodEm+0x3c>
		reload = 1;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]

	stop();
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f000 f90f 	bl	8000ccc <_ZN5Timer4stopEv>
	timer->PSC = SystemCoreClock / divFactor - 1;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <_ZN5Timer9setPeriodEm+0x70>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	3a01      	subs	r2, #1
 8000ac0:	b292      	uxth	r2, r2
 8000ac2:	851a      	strh	r2, [r3, #40]	; 0x28
	timer->ARR = reload;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	68ba      	ldr	r2, [r7, #8]
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	001e8480 	.word	0x001e8480
 8000ad8:	51eb851f 	.word	0x51eb851f
 8000adc:	20000010 	.word	0x20000010

08000ae0 <_ZN5Timer9enablePWMEhmt>:
void Timer::enablePWM(uint8_t ch, uint32_t freq, uint16_t range)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	607a      	str	r2, [r7, #4]
 8000aea:	461a      	mov	r2, r3
 8000aec:	460b      	mov	r3, r1
 8000aee:	72fb      	strb	r3, [r7, #11]
 8000af0:	4613      	mov	r3, r2
 8000af2:	813b      	strh	r3, [r7, #8]
	timer->CR1 |= TIM_CR1_DIR;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f042 0210 	orr.w	r2, r2, #16
 8000b04:	b292      	uxth	r2, r2
 8000b06:	801a      	strh	r2, [r3, #0]
	if((range+1) * freq * 2 > SystemCoreClock)
 8000b08:	893b      	ldrh	r3, [r7, #8]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	fb03 f302 	mul.w	r3, r3, r2
 8000b14:	005a      	lsls	r2, r3, #1
 8000b16:	4b62      	ldr	r3, [pc, #392]	; (8000ca0 <_ZN5Timer9enablePWMEhmt+0x1c0>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d907      	bls.n	8000b2e <_ZN5Timer9enablePWMEhmt+0x4e>
	{
		freq = SystemCoreClock / ( 2 * (range+1) );
 8000b1e:	4b60      	ldr	r3, [pc, #384]	; (8000ca0 <_ZN5Timer9enablePWMEhmt+0x1c0>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	893a      	ldrh	r2, [r7, #8]
 8000b24:	3201      	adds	r2, #1
 8000b26:	0052      	lsls	r2, r2, #1
 8000b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b2c:	607b      	str	r3, [r7, #4]
	}
	timer->ARR = range;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	893a      	ldrh	r2, [r7, #8]
 8000b34:	62da      	str	r2, [r3, #44]	; 0x2c
	timer->PSC = SystemCoreClock / (freq*2*range) - 1;
 8000b36:	4b5a      	ldr	r3, [pc, #360]	; (8000ca0 <_ZN5Timer9enablePWMEhmt+0x1c0>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	893b      	ldrh	r3, [r7, #8]
 8000b3c:	6879      	ldr	r1, [r7, #4]
 8000b3e:	fb01 f303 	mul.w	r3, r1, r3
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	3a01      	subs	r2, #1
 8000b50:	b292      	uxth	r2, r2
 8000b52:	851a      	strh	r2, [r3, #40]	; 0x28

	switch(ch)
 8000b54:	7afb      	ldrb	r3, [r7, #11]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	f200 809b 	bhi.w	8000c94 <_ZN5Timer9enablePWMEhmt+0x1b4>
 8000b5e:	a201      	add	r2, pc, #4	; (adr r2, 8000b64 <_ZN5Timer9enablePWMEhmt+0x84>)
 8000b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b64:	08000b75 	.word	0x08000b75
 8000b68:	08000bbd 	.word	0x08000bbd
 8000b6c:	08000c05 	.word	0x08000c05
 8000b70:	08000c4d 	.word	0x08000c4d
	{
	case 1  :
		timer->CCMR1 &= ~TIM_CCMR1_OC1M;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	8b1b      	ldrh	r3, [r3, #24]
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000b84:	b292      	uxth	r2, r2
 8000b86:	831a      	strh	r2, [r3, #24]
		timer->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	8b1b      	ldrh	r3, [r3, #24]
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000b98:	b292      	uxth	r2, r2
 8000b9a:	831a      	strh	r2, [r3, #24]
		timer->CCR1 = range>>1;
 8000b9c:	893b      	ldrh	r3, [r7, #8]
 8000b9e:	105a      	asrs	r2, r3, #1
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	635a      	str	r2, [r3, #52]	; 0x34
		timer->CCER |= TIM_CCER_CC1E;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	8c1b      	ldrh	r3, [r3, #32]
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f042 0201 	orr.w	r2, r2, #1
 8000bb6:	b292      	uxth	r2, r2
 8000bb8:	841a      	strh	r2, [r3, #32]
		break;
 8000bba:	e06b      	b.n	8000c94 <_ZN5Timer9enablePWMEhmt+0x1b4>
	case 2  :
		timer->CCMR1 &= ~TIM_CCMR1_OC2M;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	8b1b      	ldrh	r3, [r3, #24]
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000bcc:	b292      	uxth	r2, r2
 8000bce:	831a      	strh	r2, [r3, #24]
		timer->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	8b1b      	ldrh	r3, [r3, #24]
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000be0:	b292      	uxth	r2, r2
 8000be2:	831a      	strh	r2, [r3, #24]
		timer->CCR2 = range>>1;
 8000be4:	893b      	ldrh	r3, [r7, #8]
 8000be6:	105a      	asrs	r2, r3, #1
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	639a      	str	r2, [r3, #56]	; 0x38
		timer->CCER |= TIM_CCER_CC2E;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	8c1b      	ldrh	r3, [r3, #32]
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f042 0210 	orr.w	r2, r2, #16
 8000bfe:	b292      	uxth	r2, r2
 8000c00:	841a      	strh	r2, [r3, #32]
		break;
 8000c02:	e047      	b.n	8000c94 <_ZN5Timer9enablePWMEhmt+0x1b4>
	case 3  :
		timer->CCMR2 &= ~TIM_CCMR2_OC3M;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	8b9b      	ldrh	r3, [r3, #28]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000c14:	b292      	uxth	r2, r2
 8000c16:	839a      	strh	r2, [r3, #28]
		timer->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	8b9b      	ldrh	r3, [r3, #28]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000c28:	b292      	uxth	r2, r2
 8000c2a:	839a      	strh	r2, [r3, #28]
		timer->CCR3 = range>>1;
 8000c2c:	893b      	ldrh	r3, [r7, #8]
 8000c2e:	105a      	asrs	r2, r3, #1
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	63da      	str	r2, [r3, #60]	; 0x3c
		timer->CCER |= TIM_CCER_CC3E;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	8c1b      	ldrh	r3, [r3, #32]
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c46:	b292      	uxth	r2, r2
 8000c48:	841a      	strh	r2, [r3, #32]
		break;
 8000c4a:	e023      	b.n	8000c94 <_ZN5Timer9enablePWMEhmt+0x1b4>
	case 4  :
		timer->CCMR2 &= ~TIM_CCMR2_OC4M;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	8b9b      	ldrh	r3, [r3, #28]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000c5c:	b292      	uxth	r2, r2
 8000c5e:	839a      	strh	r2, [r3, #28]
		timer->CCMR2 |= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	8b9b      	ldrh	r3, [r3, #28]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000c70:	b292      	uxth	r2, r2
 8000c72:	839a      	strh	r2, [r3, #28]
		timer->CCR4 = range>>1;
 8000c74:	893b      	ldrh	r3, [r7, #8]
 8000c76:	105a      	asrs	r2, r3, #1
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	641a      	str	r2, [r3, #64]	; 0x40
		timer->CCER |= TIM_CCER_CC4E;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	8c1b      	ldrh	r3, [r3, #32]
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c8e:	b292      	uxth	r2, r2
 8000c90:	841a      	strh	r2, [r3, #32]
		break;
 8000c92:	bf00      	nop
	}
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20000010 	.word	0x20000010

08000ca4 <_ZN5Timer5startEv>:
		break;
	}
}

void Timer::start()
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	timer->CR1 |= TIM_CR1_CEN;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f042 0201 	orr.w	r2, r2, #1
 8000cbc:	b292      	uxth	r2, r2
 8000cbe:	801a      	strh	r2, [r3, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_ZN5Timer4stopEv>:

void Timer::stop()
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	timer->CR1 &= ~TIM_CR1_CEN;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f022 0201 	bic.w	r2, r2, #1
 8000ce4:	b292      	uxth	r2, r2
 8000ce6:	801a      	strh	r2, [r3, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <_ZN11controlL297C1E13_L297_SELECT_>:
 *      Author: 201723940
 */

#include "controlL297.h"

controlL297::controlL297(_L297_SELECT_ selection)
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]
 8000d00:	4a7c      	ldr	r2, [pc, #496]	; (8000ef4 <_ZN11controlL297C1E13_L297_SELECT_+0x200>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
{
	config = new hardwareConfig();
 8000d06:	2004      	movs	r0, #4
 8000d08:	f000 ff77 	bl	8001bfa <_Znwj>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	461c      	mov	r4, r3
 8000d10:	4620      	mov	r0, r4
 8000d12:	f000 fa3b 	bl	800118c <_ZN14hardwareConfigC1Ev>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	605c      	str	r4, [r3, #4]
	config->GPIO_Config(GPIOB, 0, OUTPUT);//enable de tout les moteurs
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6858      	ldr	r0, [r3, #4]
 8000d1e:	2300      	movs	r3, #0
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2301      	movs	r3, #1
 8000d24:	2200      	movs	r2, #0
 8000d26:	4974      	ldr	r1, [pc, #464]	; (8000ef8 <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 8000d28:	f000 face 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
	config->GPIO_Config(GPIOB, 1, OUTPUT);//half full
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6858      	ldr	r0, [r3, #4]
 8000d30:	2300      	movs	r3, #0
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2301      	movs	r3, #1
 8000d36:	2201      	movs	r2, #1
 8000d38:	496f      	ldr	r1, [pc, #444]	; (8000ef8 <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 8000d3a:	f000 fac5 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>

	config->GPIO_Pin_Enable(GPIOB, 1);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2201      	movs	r2, #1
 8000d44:	496c      	ldr	r1, [pc, #432]	; (8000ef8 <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fb1e 	bl	8001388 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
	//config->GPIO_Pin_Disable(GPIOB,1);
	speed = 1;// vitesse en HZ
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	60da      	str	r2, [r3, #12]
	lock = true;// actif bas
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	749a      	strb	r2, [r3, #18]
	chanel=0;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	741a      	strb	r2, [r3, #16]

	_selection= selection;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	78fa      	ldrb	r2, [r7, #3]
 8000d62:	745a      	strb	r2, [r3, #17]

	enabled = false;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	74da      	strb	r2, [r3, #19]


	switch (selection) {
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d074      	beq.n	8000e5a <_ZN11controlL297C1E13_L297_SELECT_+0x166>
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	f300 80ba 	bgt.w	8000eea <_ZN11controlL297C1E13_L297_SELECT_+0x1f6>
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d002      	beq.n	8000d80 <_ZN11controlL297C1E13_L297_SELECT_+0x8c>
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d037      	beq.n	8000dee <_ZN11controlL297C1E13_L297_SELECT_+0xfa>
 8000d7e:	e0b4      	b.n	8000eea <_ZN11controlL297C1E13_L297_SELECT_+0x1f6>
	case L297_1://master
		//init pinout
		chanel = 2;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2202      	movs	r2, #2
 8000d84:	741a      	strb	r2, [r3, #16]
		config->GPIO_Config(GPIOB, 3, ALTERNATE,1);//voir datasheet à table 11 pour les details de AFR
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6858      	ldr	r0, [r3, #4]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2302      	movs	r3, #2
 8000d90:	2203      	movs	r2, #3
 8000d92:	4959      	ldr	r1, [pc, #356]	; (8000ef8 <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 8000d94:	f000 fa98 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOA, 10, OUTPUT);// direction
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6858      	ldr	r0, [r3, #4]
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2301      	movs	r3, #1
 8000da2:	220a      	movs	r2, #10
 8000da4:	4955      	ldr	r1, [pc, #340]	; (8000efc <_ZN11controlL297C1E13_L297_SELECT_+0x208>)
 8000da6:	f000 fa8f 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOC, 9, OUTPUT);// lock
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6858      	ldr	r0, [r3, #4]
 8000dae:	2300      	movs	r3, #0
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2301      	movs	r3, #1
 8000db4:	2209      	movs	r2, #9
 8000db6:	4952      	ldr	r1, [pc, #328]	; (8000f00 <_ZN11controlL297C1E13_L297_SELECT_+0x20c>)
 8000db8:	f000 fa86 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>

		timer = new Timer(TIM2,50000,false);
 8000dbc:	2008      	movs	r0, #8
 8000dbe:	f000 ff1c 	bl	8001bfa <_Znwj>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461c      	mov	r4, r3
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000dcc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	f7ff fdb3 	bl	800093c <_ZN5TimerC1EP11TIM_TypeDefmb>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	609c      	str	r4, [r3, #8]
		timer->enablePWM(chanel,speed);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6898      	ldr	r0, [r3, #8]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7c19      	ldrb	r1, [r3, #16]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	23ff      	movs	r3, #255	; 0xff
 8000de8:	f7ff fe7a 	bl	8000ae0 <_ZN5Timer9enablePWMEhmt>


		break;
 8000dec:	e07d      	b.n	8000eea <_ZN11controlL297C1E13_L297_SELECT_+0x1f6>
	case L297_2://master
		//init pinout
		chanel = 1;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2201      	movs	r2, #1
 8000df2:	741a      	strb	r2, [r3, #16]
		config->GPIO_Config(GPIOB, 6, ALTERNATE, 2);//voir datasheet à table 11 pour les details de AFR
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6858      	ldr	r0, [r3, #4]
 8000df8:	2302      	movs	r3, #2
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	2206      	movs	r2, #6
 8000e00:	493d      	ldr	r1, [pc, #244]	; (8000ef8 <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 8000e02:	f000 fa61 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOA, 11, OUTPUT);// direction
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6858      	ldr	r0, [r3, #4]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	220b      	movs	r2, #11
 8000e12:	493a      	ldr	r1, [pc, #232]	; (8000efc <_ZN11controlL297C1E13_L297_SELECT_+0x208>)
 8000e14:	f000 fa58 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOC, 8, OUTPUT);// lock
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6858      	ldr	r0, [r3, #4]
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2301      	movs	r3, #1
 8000e22:	2208      	movs	r2, #8
 8000e24:	4936      	ldr	r1, [pc, #216]	; (8000f00 <_ZN11controlL297C1E13_L297_SELECT_+0x20c>)
 8000e26:	f000 fa4f 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>

		timer = new Timer(TIM4,50000,false);
 8000e2a:	2008      	movs	r0, #8
 8000e2c:	f000 fee5 	bl	8001bfa <_Znwj>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461c      	mov	r4, r3
 8000e34:	2300      	movs	r3, #0
 8000e36:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e3a:	4932      	ldr	r1, [pc, #200]	; (8000f04 <_ZN11controlL297C1E13_L297_SELECT_+0x210>)
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f7ff fd7d 	bl	800093c <_ZN5TimerC1EP11TIM_TypeDefmb>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	609c      	str	r4, [r3, #8]
		timer->enablePWM(chanel, speed);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6898      	ldr	r0, [r3, #8]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	7c19      	ldrb	r1, [r3, #16]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	23ff      	movs	r3, #255	; 0xff
 8000e54:	f7ff fe44 	bl	8000ae0 <_ZN5Timer9enablePWMEhmt>

		break;
 8000e58:	e047      	b.n	8000eea <_ZN11controlL297C1E13_L297_SELECT_+0x1f6>
	case L297_3_4: // master
		//init pinout
		chanel = 2;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	741a      	strb	r2, [r3, #16]
		config->GPIO_Config(GPIOB, 5, ALTERNATE, 2);//voir datasheet à table 11 pour les details de AFR
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6858      	ldr	r0, [r3, #4]
 8000e64:	2302      	movs	r3, #2
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2302      	movs	r3, #2
 8000e6a:	2205      	movs	r2, #5
 8000e6c:	4922      	ldr	r1, [pc, #136]	; (8000ef8 <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 8000e6e:	f000 fa2b 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOA, 12, OUTPUT);// direction
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6858      	ldr	r0, [r3, #4]
 8000e76:	2300      	movs	r3, #0
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	220c      	movs	r2, #12
 8000e7e:	491f      	ldr	r1, [pc, #124]	; (8000efc <_ZN11controlL297C1E13_L297_SELECT_+0x208>)
 8000e80:	f000 fa22 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOC, 7, OUTPUT);// lock
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6858      	ldr	r0, [r3, #4]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	2207      	movs	r2, #7
 8000e90:	491b      	ldr	r1, [pc, #108]	; (8000f00 <_ZN11controlL297C1E13_L297_SELECT_+0x20c>)
 8000e92:	f000 fa19 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>

		timer= new Timer(TIM3, 50000, false);
 8000e96:	2008      	movs	r0, #8
 8000e98:	f000 feaf 	bl	8001bfa <_Znwj>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461c      	mov	r4, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000ea6:	4918      	ldr	r1, [pc, #96]	; (8000f08 <_ZN11controlL297C1E13_L297_SELECT_+0x214>)
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	f7ff fd47 	bl	800093c <_ZN5TimerC1EP11TIM_TypeDefmb>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	609c      	str	r4, [r3, #8]
		timer->enablePWM(chanel, speed);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6898      	ldr	r0, [r3, #8]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7c19      	ldrb	r1, [r3, #16]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	23ff      	movs	r3, #255	; 0xff
 8000ec0:	f7ff fe0e 	bl	8000ae0 <_ZN5Timer9enablePWMEhmt>

		// L297_4: slave de L297_3
		// pas besoin de sa propre clk, mais suivre les mouvements de L297_3;
		//init pinout
		config->GPIO_Config(GPIOB, 12, OUTPUT);// lock
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6858      	ldr	r0, [r3, #4]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	220c      	movs	r2, #12
 8000ed0:	4909      	ldr	r1, [pc, #36]	; (8000ef8 <_ZN11controlL297C1E13_L297_SELECT_+0x204>)
 8000ed2:	f000 f9f9 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		config->GPIO_Config(GPIOC, 12, OUTPUT);// direction
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6858      	ldr	r0, [r3, #4]
 8000eda:	2300      	movs	r3, #0
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	220c      	movs	r2, #12
 8000ee2:	4907      	ldr	r1, [pc, #28]	; (8000f00 <_ZN11controlL297C1E13_L297_SELECT_+0x20c>)
 8000ee4:	f000 f9f0 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
		break;
 8000ee8:	bf00      	nop

	}


}
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	08002034 	.word	0x08002034
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40000800 	.word	0x40000800
 8000f08:	40000400 	.word	0x40000400

08000f0c <_ZN11controlL297D1Ev>:

controlL297::~controlL297()
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <_ZN11controlL297D1Ev+0x4c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	601a      	str	r2, [r3, #0]
{
	if(config)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d008      	beq.n	8000f34 <_ZN11controlL297D1Ev+0x28>
		delete config;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d004      	beq.n	8000f34 <_ZN11controlL297D1Ev+0x28>
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	3204      	adds	r2, #4
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	4790      	blx	r2
	if(timer)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d008      	beq.n	8000f4e <_ZN11controlL297D1Ev+0x42>
		delete timer;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d004      	beq.n	8000f4e <_ZN11controlL297D1Ev+0x42>
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	3204      	adds	r2, #4
 8000f48:	6812      	ldr	r2, [r2, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	4790      	blx	r2
}
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	08002034 	.word	0x08002034

08000f5c <_ZN11controlL297D0Ev>:
controlL297::~controlL297()
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
}
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ffd1 	bl	8000f0c <_ZN11controlL297D1Ev>
 8000f6a:	2114      	movs	r1, #20
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 fe42 	bl	8001bf6 <_ZdlPvj>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_ZN11controlL2978setSpeedEm>:
void controlL297::setSpeed(uint32_t speed)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]

	this->speed = speed;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	60da      	str	r2, [r3, #12]
	timer->stop();
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fe9b 	bl	8000ccc <_ZN5Timer4stopEv>
	timer->enablePWM(chanel, speed);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6898      	ldr	r0, [r3, #8]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7c19      	ldrb	r1, [r3, #16]
 8000f9e:	23ff      	movs	r3, #255	; 0xff
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	f7ff fd9d 	bl	8000ae0 <_ZN5Timer9enablePWMEhmt>
	timer->start();
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fe7a 	bl	8000ca4 <_ZN5Timer5startEv>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <_ZN11controlL29712setDirectionE11_DIRECTION_>:
void controlL297::setDirection(_DIRECTION_ dir)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d02a      	beq.n	8001020 <_ZN11controlL29712setDirectionE11_DIRECTION_+0x68>
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d154      	bne.n	8001078 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc0>
	case CCW:

		if(_selection==0)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7c5b      	ldrb	r3, [r3, #17]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d106      	bne.n	8000fe4 <_ZN11controlL29712setDirectionE11_DIRECTION_+0x2c>
			config->GPIO_Pin_Disable(GPIOA, 10);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	220a      	movs	r2, #10
 8000fdc:	4928      	ldr	r1, [pc, #160]	; (8001080 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fa10 	bl	8001404 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
		if(_selection==1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	7c5b      	ldrb	r3, [r3, #17]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d106      	bne.n	8000ffa <_ZN11controlL29712setDirectionE11_DIRECTION_+0x42>
			config->GPIO_Pin_Enable(GPIOA, 11);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	220b      	movs	r2, #11
 8000ff2:	4923      	ldr	r1, [pc, #140]	; (8001080 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f9c7 	bl	8001388 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		if(_selection==2)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7c5b      	ldrb	r3, [r3, #17]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d137      	bne.n	8001072 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xba>
		{
			//les directions sont inverses, car les moteurs sont vis à vis
			config->GPIO_Pin_Enable(GPIOA, 12);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	220c      	movs	r2, #12
 8001008:	491d      	ldr	r1, [pc, #116]	; (8001080 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f9bc 	bl	8001388 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
			config->GPIO_Pin_Disable(GPIOC, 12);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	220c      	movs	r2, #12
 8001016:	491b      	ldr	r1, [pc, #108]	; (8001084 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xcc>)
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f9f3 	bl	8001404 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>

		}

		break;
 800101e:	e028      	b.n	8001072 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xba>

	case CW:
		if(_selection==0)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7c5b      	ldrb	r3, [r3, #17]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d106      	bne.n	8001036 <_ZN11controlL29712setDirectionE11_DIRECTION_+0x7e>
			config->GPIO_Pin_Enable(GPIOA, 10);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	220a      	movs	r2, #10
 800102e:	4914      	ldr	r1, [pc, #80]	; (8001080 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 8001030:	4618      	mov	r0, r3
 8001032:	f000 f9a9 	bl	8001388 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		if(_selection==1)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7c5b      	ldrb	r3, [r3, #17]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d106      	bne.n	800104c <_ZN11controlL29712setDirectionE11_DIRECTION_+0x94>
			config->GPIO_Pin_Disable(GPIOA, 11);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	220b      	movs	r2, #11
 8001044:	490e      	ldr	r1, [pc, #56]	; (8001080 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f9dc 	bl	8001404 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
		if(_selection==2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7c5b      	ldrb	r3, [r3, #17]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d110      	bne.n	8001076 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xbe>
		{
			//les directions sont inverses, car les moteurs sont vis à vis
			config->GPIO_Pin_Disable(GPIOA, 12);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	220c      	movs	r2, #12
 800105a:	4909      	ldr	r1, [pc, #36]	; (8001080 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc8>)
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f9d1 	bl	8001404 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
			config->GPIO_Pin_Enable(GPIOC, 12);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	220c      	movs	r2, #12
 8001068:	4906      	ldr	r1, [pc, #24]	; (8001084 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xcc>)
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f98c 	bl	8001388 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		}
		break;
 8001070:	e001      	b.n	8001076 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xbe>
		break;
 8001072:	bf00      	nop
 8001074:	e000      	b.n	8001078 <_ZN11controlL29712setDirectionE11_DIRECTION_+0xc0>
		break;
 8001076:	bf00      	nop
	}
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40020000 	.word	0x40020000
 8001084:	40020800 	.word	0x40020800

08001088 <_ZN11controlL29712setLockStateE11_LOCK_STATE>:
void controlL297::setLockState(_STATE_ state)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
	this->lock= state;
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	2b00      	cmp	r3, #0
 8001098:	bf14      	ite	ne
 800109a:	2301      	movne	r3, #1
 800109c:	2300      	moveq	r3, #0
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	749a      	strb	r2, [r3, #18]
	switch (state) {
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d023      	beq.n	80010f2 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0x6a>
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d146      	bne.n	800113c <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xb4>
	case UNLOCK :
		if(_selection==0)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7c5b      	ldrb	r3, [r3, #17]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d106      	bne.n	80010c4 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0x3c>
			config->GPIO_Pin_Enable(GPIOC, 9);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2209      	movs	r2, #9
 80010bc:	4921      	ldr	r1, [pc, #132]	; (8001144 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f962 	bl	8001388 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		if(_selection==1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7c5b      	ldrb	r3, [r3, #17]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d106      	bne.n	80010da <_ZN11controlL29712setLockStateE11_LOCK_STATE+0x52>
			config->GPIO_Pin_Enable(GPIOC, 8);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2208      	movs	r2, #8
 80010d2:	491c      	ldr	r1, [pc, #112]	; (8001144 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 f957 	bl	8001388 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		if(_selection==2)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7c5b      	ldrb	r3, [r3, #17]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d129      	bne.n	8001136 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xae>
		{
			config->GPIO_Pin_Enable(GPIOC, 7);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2207      	movs	r2, #7
 80010e8:	4916      	ldr	r1, [pc, #88]	; (8001144 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f94c 	bl	8001388 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
			//config->GPIO_Pin_Enable(GPIOB, 12);
		}
		break;
 80010f0:	e021      	b.n	8001136 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xae>
	case LOCK:
		if(_selection==0)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7c5b      	ldrb	r3, [r3, #17]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d106      	bne.n	8001108 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0x80>
			config->GPIO_Pin_Disable(GPIOC, 9);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2209      	movs	r2, #9
 8001100:	4910      	ldr	r1, [pc, #64]	; (8001144 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f97e 	bl	8001404 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
		if(_selection==1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7c5b      	ldrb	r3, [r3, #17]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d106      	bne.n	800111e <_ZN11controlL29712setLockStateE11_LOCK_STATE+0x96>
			config->GPIO_Pin_Disable(GPIOC, 8);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2208      	movs	r2, #8
 8001116:	490b      	ldr	r1, [pc, #44]	; (8001144 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 8001118:	4618      	mov	r0, r3
 800111a:	f000 f973 	bl	8001404 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
		if(_selection==2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7c5b      	ldrb	r3, [r3, #17]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d109      	bne.n	800113a <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xb2>
		{
			config->GPIO_Pin_Disable(GPIOC, 7);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2207      	movs	r2, #7
 800112c:	4905      	ldr	r1, [pc, #20]	; (8001144 <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xbc>)
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f968 	bl	8001404 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
			//config->GPIO_Pin_Disable(GPIOB, 12);// la trace dois être arranger avant de pouvoir parré ce moteur
			//à revoir
		}
		break;
 8001134:	e001      	b.n	800113a <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xb2>
		break;
 8001136:	bf00      	nop
 8001138:	e000      	b.n	800113c <_ZN11controlL29712setLockStateE11_LOCK_STATE+0xb4>
		break;
 800113a:	bf00      	nop
	}

}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40020800 	.word	0x40020800

08001148 <_ZN11controlL2979setEnableEb>:
void controlL297::setEnable(bool state)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
	this->enabled= state;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	78fa      	ldrb	r2, [r7, #3]
 8001158:	74da      	strb	r2, [r3, #19]
	switch (state) {
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d107      	bne.n	8001170 <_ZN11controlL2979setEnableEb+0x28>
	case true:
		config->GPIO_Pin_Enable(GPIOB, 0);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	4908      	ldr	r1, [pc, #32]	; (8001188 <_ZN11controlL2979setEnableEb+0x40>)
 8001168:	4618      	mov	r0, r3
 800116a:	f000 f90d 	bl	8001388 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
		break;
 800116e:	e007      	b.n	8001180 <_ZN11controlL2979setEnableEb+0x38>
	default:
		config->GPIO_Pin_Disable(GPIOB, 0);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	4904      	ldr	r1, [pc, #16]	; (8001188 <_ZN11controlL2979setEnableEb+0x40>)
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f943 	bl	8001404 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>
		break;
 800117e:	bf00      	nop
	}

}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40020400 	.word	0x40020400

0800118c <_ZN14hardwareConfigC1Ev>:
 *      Author: 201723940
 */

#include "hardwareConfig.h"

hardwareConfig::hardwareConfig() {
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <_ZN14hardwareConfigC1Ev+0x1c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	601a      	str	r2, [r3, #0]

}
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	08002044 	.word	0x08002044

080011ac <_ZN14hardwareConfigD1Ev>:

hardwareConfig::~hardwareConfig() {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <_ZN14hardwareConfigD1Ev+0x1c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	601a      	str	r2, [r3, #0]

}
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	08002044 	.word	0x08002044

080011cc <_ZN14hardwareConfigD0Ev>:
hardwareConfig::~hardwareConfig() {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
}
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ffe9 	bl	80011ac <_ZN14hardwareConfigD1Ev>
 80011da:	2104      	movs	r1, #4
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 fd0a 	bl	8001bf6 <_ZdlPvj>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_ZN14hardwareConfig14SysClockConfigEv>:
// gère l'initialisation de base pour assurer le fonctionnement de base du nucle
//****dois être la première chose appeler dans le main.
void hardwareConfig::SysClockConfig(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	// active le hse
	RCC->CR = RCC_CR_HSEON;
 80011f4:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 80011f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011fa:	601a      	str	r2, [r3, #0]
	//attendre que le cristal soit activer
	while(!(RCC->CR & RCC_CR_HSERDY));
 80011fc:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001204:	2b00      	cmp	r3, #0
 8001206:	bf0c      	ite	eq
 8001208:	2301      	moveq	r3, #1
 800120a:	2300      	movne	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d000      	beq.n	8001214 <_ZN14hardwareConfig14SysClockConfigEv+0x28>
 8001212:	e7f3      	b.n	80011fc <_ZN14hardwareConfig14SysClockConfigEv+0x10>

	//set le power enable et le regulateur de tension
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001214:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 800121a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= PWR_CR_VOS; // corresponds à la valeure reset "11"
 8001220:	4b26      	ldr	r3, [pc, #152]	; (80012bc <_ZN14hardwareConfig14SysClockConfigEv+0xd0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a25      	ldr	r2, [pc, #148]	; (80012bc <_ZN14hardwareConfig14SysClockConfigEv+0xd0>)
 8001226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800122a:	6013      	str	r3, [r2, #0]

	// configuration du flash
	FLASH->ACR |= FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN |FLASH_ACR_LATENCY_5WS;
 800122c:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <_ZN14hardwareConfig14SysClockConfigEv+0xd4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a23      	ldr	r2, [pc, #140]	; (80012c0 <_ZN14hardwareConfig14SysClockConfigEv+0xd4>)
 8001232:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001236:	f043 0305 	orr.w	r3, r3, #5
 800123a:	6013      	str	r3, [r2, #0]

	// configuration des prescalers
	//AHB PR
	RCC->CFGR|= RCC_CFGR_HPRE_DIV1;
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 800123e:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	6093      	str	r3, [r2, #8]

	//APB1
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; //division par 4
 8001244:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 800124a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800124e:	6093      	str	r3, [r2, #8]

	//APB1
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2; //division par 4
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4a18      	ldr	r2, [pc, #96]	; (80012b8 <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800125a:	6093      	str	r3, [r2, #8]

	//configuration du pll
	RCC->PLLCFGR =(PLL_M << 0) |(PLL_N << 6) | (PLL_P << 16) | (RCC_PLLCFGR_PLLSRC_HSE);
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 800125e:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <_ZN14hardwareConfig14SysClockConfigEv+0xd8>)
 8001260:	605a      	str	r2, [r3, #4]

	// activerle pll et attendre qu'il soit pret
	RCC->CR |= RCC_CR_PLLON;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800126c:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	bf0c      	ite	eq
 800127a:	2301      	moveq	r3, #1
 800127c:	2300      	movne	r3, #0
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d000      	beq.n	8001286 <_ZN14hardwareConfig14SysClockConfigEv+0x9a>
 8001284:	e7f3      	b.n	800126e <_ZN14hardwareConfig14SysClockConfigEv+0x82>

	//Sélectionner la source de la clock (pll dans ce cas ci)
	RCC-> CFGR |= RCC_CFGR_SW_PLL;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <_ZN14hardwareConfig14SysClockConfigEv+0xcc>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b08      	cmp	r3, #8
 800129c:	bf14      	ite	ne
 800129e:	2301      	movne	r3, #1
 80012a0:	2300      	moveq	r3, #0
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d000      	beq.n	80012aa <_ZN14hardwareConfig14SysClockConfigEv+0xbe>
 80012a8:	e7f3      	b.n	8001292 <_ZN14hardwareConfig14SysClockConfigEv+0xa6>
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000
 80012c0:	40023c00 	.word	0x40023c00
 80012c4:	00402d04 	.word	0x00402d04

080012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>:

//Permet de configurer facilement les modes de chaques io
void hardwareConfig::GPIO_Config(GPIO_TypeDef* gpio, uint8_t pin, _IO_MODES_t mode,
		uint8_t alterFunction)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	4611      	mov	r1, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	460b      	mov	r3, r1
 80012d8:	71fb      	strb	r3, [r7, #7]
 80012da:	4613      	mov	r3, r2
 80012dc:	71bb      	strb	r3, [r7, #6]
	if (gpio == GPIOA)
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	4a25      	ldr	r2, [pc, #148]	; (8001378 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb0>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d105      	bne.n	80012f2 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x2a>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 80012e6:	4b25      	ldr	r3, [pc, #148]	; (800137c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a24      	ldr	r2, [pc, #144]	; (800137c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
	if (gpio == GPIOB)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	4a22      	ldr	r2, [pc, #136]	; (8001380 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d105      	bne.n	8001306 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x3e>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a1f      	ldr	r2, [pc, #124]	; (800137c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
	if (gpio == GPIOC)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	4a1e      	ldr	r2, [pc, #120]	; (8001384 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xbc>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d105      	bne.n	800131a <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x52>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 800130e:	4b1b      	ldr	r3, [pc, #108]	; (800137c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a1a      	ldr	r2, [pc, #104]	; (800137c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xb4>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6313      	str	r3, [r2, #48]	; 0x30

	if (pin < 16)
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d809      	bhi.n	8001334 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x6c>
	gpio->MODER |= mode << (2 * pin);
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	79b9      	ldrb	r1, [r7, #6]
 8001326:	79fa      	ldrb	r2, [r7, #7]
 8001328:	0052      	lsls	r2, r2, #1
 800132a:	fa01 f202 	lsl.w	r2, r1, r2
 800132e:	431a      	orrs	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	601a      	str	r2, [r3, #0]

	if (mode == ALTERNATE) {
 8001334:	79bb      	ldrb	r3, [r7, #6]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d118      	bne.n	800136c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xa4>
		if (pin < 8)
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2b07      	cmp	r3, #7
 800133e:	d80a      	bhi.n	8001356 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0x8e>
			gpio->AFR[0] |= (alterFunction << (4 * pin));
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	7e39      	ldrb	r1, [r7, #24]
 8001346:	79fa      	ldrb	r2, [r7, #7]
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	fa01 f202 	lsl.w	r2, r1, r2
 800134e:	431a      	orrs	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	621a      	str	r2, [r3, #32]
		else
			gpio->AFR[1] |= (alterFunction << (4 * (pin - 8)));
	}

}
 8001354:	e00a      	b.n	800136c <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h+0xa4>
			gpio->AFR[1] |= (alterFunction << (4 * (pin - 8)));
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	7e39      	ldrb	r1, [r7, #24]
 800135c:	79fa      	ldrb	r2, [r7, #7]
 800135e:	3a08      	subs	r2, #8
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	fa01 f202 	lsl.w	r2, r1, r2
 8001366:	431a      	orrs	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40020000 	.word	0x40020000
 800137c:	40023800 	.word	0x40023800
 8001380:	40020400 	.word	0x40020400
 8001384:	40020800 	.word	0x40020800

08001388 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>:
void hardwareConfig::GPIO_Pin_Enable(GPIO_TypeDef* gpio, uint8_t pin)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	4613      	mov	r3, r2
 8001394:	71fb      	strb	r3, [r7, #7]
	if (gpio == GPIOA)
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x70>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d109      	bne.n	80013b2 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x2a>
		GPIOA->ODR |= 1<<pin;
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x70>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	79fa      	ldrb	r2, [r7, #7]
 80013a4:	2101      	movs	r1, #1
 80013a6:	fa01 f202 	lsl.w	r2, r1, r2
 80013aa:	4611      	mov	r1, r2
 80013ac:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x70>)
 80013ae:	430b      	orrs	r3, r1
 80013b0:	6153      	str	r3, [r2, #20]
	if (gpio == GPIOB)
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	4a11      	ldr	r2, [pc, #68]	; (80013fc <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x74>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d109      	bne.n	80013ce <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x46>
		GPIOB->ODR |= 1<<pin;
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x74>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	79fa      	ldrb	r2, [r7, #7]
 80013c0:	2101      	movs	r1, #1
 80013c2:	fa01 f202 	lsl.w	r2, r1, r2
 80013c6:	4611      	mov	r1, r2
 80013c8:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x74>)
 80013ca:	430b      	orrs	r3, r1
 80013cc:	6153      	str	r3, [r2, #20]
	if (gpio == GPIOC)
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x78>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d109      	bne.n	80013ea <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x62>
		GPIOC->ODR |= 1<<pin;
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x78>)
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	79fa      	ldrb	r2, [r7, #7]
 80013dc:	2101      	movs	r1, #1
 80013de:	fa01 f202 	lsl.w	r2, r1, r2
 80013e2:	4611      	mov	r1, r2
 80013e4:	4a06      	ldr	r2, [pc, #24]	; (8001400 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh+0x78>)
 80013e6:	430b      	orrs	r3, r1
 80013e8:	6153      	str	r3, [r2, #20]
}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40020000 	.word	0x40020000
 80013fc:	40020400 	.word	0x40020400
 8001400:	40020800 	.word	0x40020800

08001404 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>:
void hardwareConfig::GPIO_Pin_Disable(GPIO_TypeDef* gpio, uint8_t pin)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	4613      	mov	r3, r2
 8001410:	71fb      	strb	r3, [r7, #7]
	if (gpio == GPIOA)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	4a18      	ldr	r2, [pc, #96]	; (8001478 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x74>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d10a      	bne.n	8001430 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x2c>
		GPIOA -> ODR &= ~(1<<pin);
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x74>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	79fa      	ldrb	r2, [r7, #7]
 8001420:	2101      	movs	r1, #1
 8001422:	fa01 f202 	lsl.w	r2, r1, r2
 8001426:	43d2      	mvns	r2, r2
 8001428:	4611      	mov	r1, r2
 800142a:	4a13      	ldr	r2, [pc, #76]	; (8001478 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x74>)
 800142c:	400b      	ands	r3, r1
 800142e:	6153      	str	r3, [r2, #20]
	if (gpio == GPIOB)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x78>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d10a      	bne.n	800144e <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x4a>
		GPIOB -> ODR &= ~(1<<pin);
 8001438:	4b10      	ldr	r3, [pc, #64]	; (800147c <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x78>)
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	79fa      	ldrb	r2, [r7, #7]
 800143e:	2101      	movs	r1, #1
 8001440:	fa01 f202 	lsl.w	r2, r1, r2
 8001444:	43d2      	mvns	r2, r2
 8001446:	4611      	mov	r1, r2
 8001448:	4a0c      	ldr	r2, [pc, #48]	; (800147c <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x78>)
 800144a:	400b      	ands	r3, r1
 800144c:	6153      	str	r3, [r2, #20]
	if (gpio == GPIOC)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x7c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d10a      	bne.n	800146c <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x68>
		GPIOC -> ODR &= ~(1<<pin);
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x7c>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	79fa      	ldrb	r2, [r7, #7]
 800145c:	2101      	movs	r1, #1
 800145e:	fa01 f202 	lsl.w	r2, r1, r2
 8001462:	43d2      	mvns	r2, r2
 8001464:	4611      	mov	r1, r2
 8001466:	4a06      	ldr	r2, [pc, #24]	; (8001480 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh+0x7c>)
 8001468:	400b      	ands	r3, r1
 800146a:	6153      	str	r3, [r2, #20]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	40020000 	.word	0x40020000
 800147c:	40020400 	.word	0x40020400
 8001480:	40020800 	.word	0x40020800

08001484 <main>:
uint8_t rxData=0;
uint16_t rxCnt=0;
uint8_t rxCmd=0;
const uint16_t PAYLOAD_SIZE[4]={1,2,3,10};
uint16_t rxPayload[15];
int main(void) {
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b083      	sub	sp, #12
 8001488:	af02      	add	r7, sp, #8

	stm32F446 = new hardwareConfig();
 800148a:	2004      	movs	r0, #4
 800148c:	f000 fbb5 	bl	8001bfa <_Znwj>
 8001490:	4603      	mov	r3, r0
 8001492:	461c      	mov	r4, r3
 8001494:	4620      	mov	r0, r4
 8001496:	f7ff fe79 	bl	800118c <_ZN14hardwareConfigC1Ev>
 800149a:	4bb1      	ldr	r3, [pc, #708]	; (8001760 <main+0x2dc>)
 800149c:	601c      	str	r4, [r3, #0]

	stm32F446->SysClockConfig();
 800149e:	4bb0      	ldr	r3, [pc, #704]	; (8001760 <main+0x2dc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fea2 	bl	80011ec <_ZN14hardwareConfig14SysClockConfigEv>

	testL297= new controlL297(L297_1);
 80014a8:	2014      	movs	r0, #20
 80014aa:	f000 fba6 	bl	8001bfa <_Znwj>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461c      	mov	r4, r3
 80014b2:	2100      	movs	r1, #0
 80014b4:	4620      	mov	r0, r4
 80014b6:	f7ff fc1d 	bl	8000cf4 <_ZN11controlL297C1E13_L297_SELECT_>
 80014ba:	4baa      	ldr	r3, [pc, #680]	; (8001764 <main+0x2e0>)
 80014bc:	601c      	str	r4, [r3, #0]
	testL2972= new controlL297(L297_2);
 80014be:	2014      	movs	r0, #20
 80014c0:	f000 fb9b 	bl	8001bfa <_Znwj>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461c      	mov	r4, r3
 80014c8:	2101      	movs	r1, #1
 80014ca:	4620      	mov	r0, r4
 80014cc:	f7ff fc12 	bl	8000cf4 <_ZN11controlL297C1E13_L297_SELECT_>
 80014d0:	4ba5      	ldr	r3, [pc, #660]	; (8001768 <main+0x2e4>)
 80014d2:	601c      	str	r4, [r3, #0]
	testL2973= new controlL297(L297_3_4);
 80014d4:	2014      	movs	r0, #20
 80014d6:	f000 fb90 	bl	8001bfa <_Znwj>
 80014da:	4603      	mov	r3, r0
 80014dc:	461c      	mov	r4, r3
 80014de:	2102      	movs	r1, #2
 80014e0:	4620      	mov	r0, r4
 80014e2:	f7ff fc07 	bl	8000cf4 <_ZN11controlL297C1E13_L297_SELECT_>
 80014e6:	4ba1      	ldr	r3, [pc, #644]	; (800176c <main+0x2e8>)
 80014e8:	601c      	str	r4, [r3, #0]

	testL298 = new L298x();
 80014ea:	200c      	movs	r0, #12
 80014ec:	f000 fb85 	bl	8001bfa <_Znwj>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461c      	mov	r4, r3
 80014f4:	4620      	mov	r0, r4
 80014f6:	f7fe fe8d 	bl	8000214 <_ZN5L298xC1Ev>
 80014fa:	4b9d      	ldr	r3, [pc, #628]	; (8001770 <main+0x2ec>)
 80014fc:	601c      	str	r4, [r3, #0]

	testL297->setSpeed(100);
 80014fe:	4b99      	ldr	r3, [pc, #612]	; (8001764 <main+0x2e0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2164      	movs	r1, #100	; 0x64
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fd39 	bl	8000f7c <_ZN11controlL2978setSpeedEm>
	testL2972->setSpeed(100);
 800150a:	4b97      	ldr	r3, [pc, #604]	; (8001768 <main+0x2e4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2164      	movs	r1, #100	; 0x64
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fd33 	bl	8000f7c <_ZN11controlL2978setSpeedEm>
	testL2973->setSpeed(100);
 8001516:	4b95      	ldr	r3, [pc, #596]	; (800176c <main+0x2e8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2164      	movs	r1, #100	; 0x64
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fd2d 	bl	8000f7c <_ZN11controlL2978setSpeedEm>

	testL297->setDirection(CW); 	//coude direction doesn't change
 8001522:	4b90      	ldr	r3, [pc, #576]	; (8001764 <main+0x2e0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fd45 	bl	8000fb8 <_ZN11controlL29712setDirectionE11_DIRECTION_>
	testL2972->setDirection(CW); 	//Epaule direction ok
 800152e:	4b8e      	ldr	r3, [pc, #568]	; (8001768 <main+0x2e4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fd3f 	bl	8000fb8 <_ZN11controlL29712setDirectionE11_DIRECTION_>
	testL2973->setDirection(CW);	//poignet
 800153a:	4b8c      	ldr	r3, [pc, #560]	; (800176c <main+0x2e8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fd39 	bl	8000fb8 <_ZN11controlL29712setDirectionE11_DIRECTION_>

	testL297->setEnable(true);
 8001546:	4b87      	ldr	r3, [pc, #540]	; (8001764 <main+0x2e0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2101      	movs	r1, #1
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fdfb 	bl	8001148 <_ZN11controlL2979setEnableEb>
	testL2972->setEnable(true);
 8001552:	4b85      	ldr	r3, [pc, #532]	; (8001768 <main+0x2e4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2101      	movs	r1, #1
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fdf5 	bl	8001148 <_ZN11controlL2979setEnableEb>
	testL2973->setEnable(true);
 800155e:	4b83      	ldr	r3, [pc, #524]	; (800176c <main+0x2e8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2101      	movs	r1, #1
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fdef 	bl	8001148 <_ZN11controlL2979setEnableEb>


	testL297->setLockState(LOCK);
 800156a:	4b7e      	ldr	r3, [pc, #504]	; (8001764 <main+0x2e0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fd89 	bl	8001088 <_ZN11controlL29712setLockStateE11_LOCK_STATE>
	testL2972->setLockState(LOCK);
 8001576:	4b7c      	ldr	r3, [pc, #496]	; (8001768 <main+0x2e4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fd83 	bl	8001088 <_ZN11controlL29712setLockStateE11_LOCK_STATE>
	testL2973->setLockState(LOCK);//pb12 cause des problemes
 8001582:	4b7a      	ldr	r3, [pc, #488]	; (800176c <main+0x2e8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fd7d 	bl	8001088 <_ZN11controlL29712setLockStateE11_LOCK_STATE>

	//stm32F446->GPIO_Config(GPIOA, 5, OUTPUT,2);// led activité

	stm32F446->GPIO_Config(GPIOA, 8, OUTPUT,2);
 800158e:	4b74      	ldr	r3, [pc, #464]	; (8001760 <main+0x2dc>)
 8001590:	6818      	ldr	r0, [r3, #0]
 8001592:	2302      	movs	r3, #2
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2301      	movs	r3, #1
 8001598:	2208      	movs	r2, #8
 800159a:	4976      	ldr	r1, [pc, #472]	; (8001774 <main+0x2f0>)
 800159c:	f7ff fe94 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
	stm32F446->GPIO_Config(GPIOA, 9, OUTPUT,2);
 80015a0:	4b6f      	ldr	r3, [pc, #444]	; (8001760 <main+0x2dc>)
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	2302      	movs	r3, #2
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2301      	movs	r3, #1
 80015aa:	2209      	movs	r2, #9
 80015ac:	4971      	ldr	r1, [pc, #452]	; (8001774 <main+0x2f0>)
 80015ae:	f7ff fe8b 	bl	80012c8 <_ZN14hardwareConfig11GPIO_ConfigEP12GPIO_TypeDefh10_IO_MODES_h>
	stm32F446->GPIO_Pin_Enable(GPIOA, 8);
 80015b2:	4b6b      	ldr	r3, [pc, #428]	; (8001760 <main+0x2dc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2208      	movs	r2, #8
 80015b8:	496e      	ldr	r1, [pc, #440]	; (8001774 <main+0x2f0>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fee4 	bl	8001388 <_ZN14hardwareConfig15GPIO_Pin_EnableEP12GPIO_TypeDefh>
	stm32F446->GPIO_Pin_Disable(GPIOA, 9);
 80015c0:	4b67      	ldr	r3, [pc, #412]	; (8001760 <main+0x2dc>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2209      	movs	r2, #9
 80015c6:	496b      	ldr	r1, [pc, #428]	; (8001774 <main+0x2f0>)
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff1b 	bl	8001404 <_ZN14hardwareConfig16GPIO_Pin_DisableEP12GPIO_TypeDefh>

	commAffichage = STM32F446Usart3::getInstance();
 80015ce:	f7fe ffc5 	bl	800055c <_ZN15STM32F446Usart311getInstanceEv>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4a68      	ldr	r2, [pc, #416]	; (8001778 <main+0x2f4>)
 80015d6:	6013      	str	r3, [r2, #0]
	commAffichage->setBaudRate(9600);
 80015d8:	4b67      	ldr	r3, [pc, #412]	; (8001778 <main+0x2f4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff f839 	bl	8000658 <_ZN15STM32F446Usart311setBaudRateEm>
	cadanceComm = new Timer(TIM5,10000,true);
 80015e6:	2008      	movs	r0, #8
 80015e8:	f000 fb07 	bl	8001bfa <_Znwj>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461c      	mov	r4, r3
 80015f0:	2301      	movs	r3, #1
 80015f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80015f6:	4961      	ldr	r1, [pc, #388]	; (800177c <main+0x2f8>)
 80015f8:	4620      	mov	r0, r4
 80015fa:	f7ff f99f 	bl	800093c <_ZN5TimerC1EP11TIM_TypeDefmb>
 80015fe:	4b60      	ldr	r3, [pc, #384]	; (8001780 <main+0x2fc>)
 8001600:	601c      	str	r4, [r3, #0]
	cadanceComm->enablePWM(2,100);
 8001602:	4b5f      	ldr	r3, [pc, #380]	; (8001780 <main+0x2fc>)
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	23ff      	movs	r3, #255	; 0xff
 8001608:	2264      	movs	r2, #100	; 0x64
 800160a:	2102      	movs	r1, #2
 800160c:	f7ff fa68 	bl	8000ae0 <_ZN5Timer9enablePWMEhmt>

	cadanceComm->start();
 8001610:	4b5b      	ldr	r3, [pc, #364]	; (8001780 <main+0x2fc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fb45 	bl	8000ca4 <_ZN5Timer5startEv>


	while(1)
	{

		while(commAffichage->dataAvailable())
 800161a:	4b57      	ldr	r3, [pc, #348]	; (8001778 <main+0x2f4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff f809 	bl	8000636 <_ZNK15STM32F446Usart313dataAvailableEv>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 8103 	beq.w	8001832 <main+0x3ae>
		{
			rxData= commAffichage->read();
 800162c:	4b52      	ldr	r3, [pc, #328]	; (8001778 <main+0x2f4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ffe7 	bl	8000604 <_ZN15STM32F446Usart34readEv>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	4b52      	ldr	r3, [pc, #328]	; (8001784 <main+0x300>)
 800163c:	701a      	strb	r2, [r3, #0]
			switch (commState) {
 800163e:	4b52      	ldr	r3, [pc, #328]	; (8001788 <main+0x304>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d8e9      	bhi.n	800161a <main+0x196>
 8001646:	a201      	add	r2, pc, #4	; (adr r2, 800164c <main+0x1c8>)
 8001648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164c:	0800165d 	.word	0x0800165d
 8001650:	0800166f 	.word	0x0800166f
 8001654:	08001703 	.word	0x08001703
 8001658:	08001739 	.word	0x08001739
			case WAIT:
				if(rxData=='<')
 800165c:	4b49      	ldr	r3, [pc, #292]	; (8001784 <main+0x300>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b3c      	cmp	r3, #60	; 0x3c
 8001662:	f040 80e0 	bne.w	8001826 <main+0x3a2>
					commState=RXCMD;
 8001666:	4b48      	ldr	r3, [pc, #288]	; (8001788 <main+0x304>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
				break;
 800166c:	e0db      	b.n	8001826 <main+0x3a2>
			case RXCMD:
				commState=RXPAYLOAD;
 800166e:	4b46      	ldr	r3, [pc, #280]	; (8001788 <main+0x304>)
 8001670:	2202      	movs	r2, #2
 8001672:	701a      	strb	r2, [r3, #0]
				rxCnt=0;
 8001674:	4b45      	ldr	r3, [pc, #276]	; (800178c <main+0x308>)
 8001676:	2200      	movs	r2, #0
 8001678:	801a      	strh	r2, [r3, #0]
				//rxCmd=rxData;//commande à executer
				rxPayload[rxCnt++]=rxData;
 800167a:	4b42      	ldr	r3, [pc, #264]	; (8001784 <main+0x300>)
 800167c:	7819      	ldrb	r1, [r3, #0]
 800167e:	4b43      	ldr	r3, [pc, #268]	; (800178c <main+0x308>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	b290      	uxth	r0, r2
 8001686:	4a41      	ldr	r2, [pc, #260]	; (800178c <main+0x308>)
 8001688:	8010      	strh	r0, [r2, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	b289      	uxth	r1, r1
 800168e:	4b40      	ldr	r3, [pc, #256]	; (8001790 <main+0x30c>)
 8001690:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				switch (rxData) {
 8001694:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <main+0x300>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	3b43      	subs	r3, #67	; 0x43
 800169a:	2b0d      	cmp	r3, #13
 800169c:	f200 80c5 	bhi.w	800182a <main+0x3a6>
 80016a0:	a201      	add	r2, pc, #4	; (adr r2, 80016a8 <main+0x224>)
 80016a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a6:	bf00      	nop
 80016a8:	080016f1 	.word	0x080016f1
 80016ac:	0800182b 	.word	0x0800182b
 80016b0:	080016f9 	.word	0x080016f9
 80016b4:	0800182b 	.word	0x0800182b
 80016b8:	0800182b 	.word	0x0800182b
 80016bc:	0800182b 	.word	0x0800182b
 80016c0:	0800182b 	.word	0x0800182b
 80016c4:	0800182b 	.word	0x0800182b
 80016c8:	0800182b 	.word	0x0800182b
 80016cc:	0800182b 	.word	0x0800182b
 80016d0:	080016e1 	.word	0x080016e1
 80016d4:	0800182b 	.word	0x0800182b
 80016d8:	0800182b 	.word	0x0800182b
 80016dc:	080016e9 	.word	0x080016e9
				case 'M':
					//mode
					rxCmd=0;
 80016e0:	4b2c      	ldr	r3, [pc, #176]	; (8001794 <main+0x310>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
					break;
 80016e6:	e00b      	b.n	8001700 <main+0x27c>
				case 'P':
					//position
					rxCmd=1;
 80016e8:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <main+0x310>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
					break;
 80016ee:	e007      	b.n	8001700 <main+0x27c>
				case 'C':
					//calibration
					rxCmd=2;
 80016f0:	4b28      	ldr	r3, [pc, #160]	; (8001794 <main+0x310>)
 80016f2:	2202      	movs	r2, #2
 80016f4:	701a      	strb	r2, [r3, #0]
					break;
 80016f6:	e003      	b.n	8001700 <main+0x27c>
				case 'E':
					//erreure
					rxCmd=3;
 80016f8:	4b26      	ldr	r3, [pc, #152]	; (8001794 <main+0x310>)
 80016fa:	2203      	movs	r2, #3
 80016fc:	701a      	strb	r2, [r3, #0]
					break;
 80016fe:	bf00      	nop
				}
				break;
 8001700:	e093      	b.n	800182a <main+0x3a6>
				case RXPAYLOAD:
					rxPayload[rxCnt++]=rxData;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <main+0x300>)
 8001704:	7819      	ldrb	r1, [r3, #0]
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <main+0x308>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	b290      	uxth	r0, r2
 800170e:	4a1f      	ldr	r2, [pc, #124]	; (800178c <main+0x308>)
 8001710:	8010      	strh	r0, [r2, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	b289      	uxth	r1, r1
 8001716:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <main+0x30c>)
 8001718:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if(rxCnt>PAYLOAD_SIZE[rxCmd])
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <main+0x310>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <main+0x314>)
 8001724:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001728:	4b18      	ldr	r3, [pc, #96]	; (800178c <main+0x308>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d27e      	bcs.n	800182e <main+0x3aa>
					{
						commState =VALIDATE;
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <main+0x304>)
 8001732:	2203      	movs	r2, #3
 8001734:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001736:	e07a      	b.n	800182e <main+0x3aa>
				case VALIDATE:
					if(rxData=='>')
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <main+0x300>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b3e      	cmp	r3, #62	; 0x3e
 800173e:	d14a      	bne.n	80017d6 <main+0x352>
					{
						//GPIOA -> ODR ^= 1<<5;// led d'activité ** dois être enlever

						switch (rxCmd) {
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <main+0x310>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b03      	cmp	r3, #3
 8001746:	d846      	bhi.n	80017d6 <main+0x352>
 8001748:	a201      	add	r2, pc, #4	; (adr r2, 8001750 <main+0x2cc>)
 800174a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174e:	bf00      	nop
 8001750:	0800179d 	.word	0x0800179d
 8001754:	080017d7 	.word	0x080017d7
 8001758:	080017d7 	.word	0x080017d7
 800175c:	080017d7 	.word	0x080017d7
 8001760:	200000a8 	.word	0x200000a8
 8001764:	200000b4 	.word	0x200000b4
 8001768:	200000b8 	.word	0x200000b8
 800176c:	200000bc 	.word	0x200000bc
 8001770:	200000c4 	.word	0x200000c4
 8001774:	40020000 	.word	0x40020000
 8001778:	200000b0 	.word	0x200000b0
 800177c:	40000c00 	.word	0x40000c00
 8001780:	200000ac 	.word	0x200000ac
 8001784:	200000fe 	.word	0x200000fe
 8001788:	200000fc 	.word	0x200000fc
 800178c:	20000100 	.word	0x20000100
 8001790:	20000104 	.word	0x20000104
 8001794:	20000102 	.word	0x20000102
 8001798:	08002050 	.word	0x08002050
						case 0:
							//mode
							if(rxPayload[1]==0)
 800179c:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <main+0x3d0>)
 800179e:	885b      	ldrh	r3, [r3, #2]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <main+0x326>
								modeSocrate=IDLE;
 80017a4:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <main+0x3d4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
							if(rxPayload[1]==1)
 80017aa:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <main+0x3d0>)
 80017ac:	885b      	ldrh	r3, [r3, #2]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d102      	bne.n	80017b8 <main+0x334>
								modeSocrate=CAPTEURS;
 80017b2:	4b29      	ldr	r3, [pc, #164]	; (8001858 <main+0x3d4>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
							if(rxPayload[1]==2)
 80017b8:	4b26      	ldr	r3, [pc, #152]	; (8001854 <main+0x3d0>)
 80017ba:	885b      	ldrh	r3, [r3, #2]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d102      	bne.n	80017c6 <main+0x342>
								modeSocrate=MANUEL;
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <main+0x3d4>)
 80017c2:	2202      	movs	r2, #2
 80017c4:	701a      	strb	r2, [r3, #0]
							if(rxPayload[1]==3)
 80017c6:	4b23      	ldr	r3, [pc, #140]	; (8001854 <main+0x3d0>)
 80017c8:	885b      	ldrh	r3, [r3, #2]
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d102      	bne.n	80017d4 <main+0x350>
								modeSocrate=CALIBRATION;
 80017ce:	4b22      	ldr	r3, [pc, #136]	; (8001858 <main+0x3d4>)
 80017d0:	2203      	movs	r2, #3
 80017d2:	701a      	strb	r2, [r3, #0]

							break;
 80017d4:	bf00      	nop

							break;
						}

					}
					if( modeSocrate==IDLE)
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <main+0x3d4>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d106      	bne.n	80017ec <main+0x368>
					{
						testL298->setDirection(IDLE_P);
 80017de:	4b1f      	ldr	r3, [pc, #124]	; (800185c <main+0x3d8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2103      	movs	r1, #3
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fd6d 	bl	80002c4 <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_>
 80017ea:	e018      	b.n	800181e <main+0x39a>
					}
					else if (modeSocrate==CAPTEURS)
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <main+0x3d4>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d014      	beq.n	800181e <main+0x39a>
					{

					}
					else if (modeSocrate==MANUEL)
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <main+0x3d4>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d106      	bne.n	800180a <main+0x386>
					{
						testL298->setDirection(CW_P);
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <main+0x3d8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fd5e 	bl	80002c4 <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_>
 8001808:	e009      	b.n	800181e <main+0x39a>
					}
					else if (modeSocrate==CALIBRATION)
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <main+0x3d4>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b03      	cmp	r3, #3
 8001810:	d105      	bne.n	800181e <main+0x39a>
					{
						testL298->setDirection(CCW_P);
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <main+0x3d8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2101      	movs	r1, #1
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fd53 	bl	80002c4 <_ZN5L298x12setDirectionE17_DIRECTION_PINCE_>

					}
					commState =WAIT;
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <main+0x3dc>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
					break;
 8001824:	e004      	b.n	8001830 <main+0x3ac>
				break;
 8001826:	bf00      	nop
 8001828:	e6f7      	b.n	800161a <main+0x196>
				break;
 800182a:	bf00      	nop
 800182c:	e6f5      	b.n	800161a <main+0x196>
					break;
 800182e:	bf00      	nop
		while(commAffichage->dataAvailable())
 8001830:	e6f3      	b.n	800161a <main+0x196>
			}
		}
		if (serialPcPauseCompleted)
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <main+0x3e0>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	f43f aeee 	beq.w	800161a <main+0x196>
		{

			//commAffichage->write(messageComm[1].c_str());
			commAffichage->write(messagePosition);
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <main+0x3e4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	490a      	ldr	r1, [pc, #40]	; (800186c <main+0x3e8>)
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fec7 	bl	80005d8 <_ZN15STM32F446Usart35writeEPc>
			//commAffichage->write(messageCalibration);
			serialPcPauseCompleted = false;
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <main+0x3e0>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
		while(commAffichage->dataAvailable())
 8001850:	e6e3      	b.n	800161a <main+0x196>
 8001852:	bf00      	nop
 8001854:	20000104 	.word	0x20000104
 8001858:	200000fd 	.word	0x200000fd
 800185c:	200000c4 	.word	0x200000c4
 8001860:	200000fc 	.word	0x200000fc
 8001864:	200000c8 	.word	0x200000c8
 8001868:	200000b0 	.word	0x200000b0
 800186c:	20000000 	.word	0x20000000

08001870 <TIM5_IRQHandler>:
		}


	}
}
extern "C" void TIM5_IRQHandler(void) {
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
	if (TIM5->SR & TIM_SR_UIF) // if UIF flag is set
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <TIM5_IRQHandler+0x3c>)
 8001876:	8a1b      	ldrh	r3, [r3, #16]
 8001878:	b29b      	uxth	r3, r3
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	bf14      	ite	ne
 8001882:	2301      	movne	r3, #1
 8001884:	2300      	moveq	r3, #0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00a      	beq.n	80018a2 <TIM5_IRQHandler+0x32>
	{
		TIM5->SR &= ~TIM_SR_UIF; // clear UIF flag
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <TIM5_IRQHandler+0x3c>)
 800188e:	8a1b      	ldrh	r3, [r3, #16]
 8001890:	b29b      	uxth	r3, r3
 8001892:	4a06      	ldr	r2, [pc, #24]	; (80018ac <TIM5_IRQHandler+0x3c>)
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	b29b      	uxth	r3, r3
 800189a:	8213      	strh	r3, [r2, #16]
		serialPcPauseCompleted = true;
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <TIM5_IRQHandler+0x40>)
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]

	}

}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40000c00 	.word	0x40000c00
 80018b0:	200000c8 	.word	0x200000c8

080018b4 <_Z41__static_initialization_and_destruction_0ii>:
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d128      	bne.n	8001916 <_Z41__static_initialization_and_destruction_0ii+0x62>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d123      	bne.n	8001916 <_Z41__static_initialization_and_destruction_0ii+0x62>
std::string messageComm[2]= {"<ACK>","<ERR>"};
 80018ce:	4c1c      	ldr	r4, [pc, #112]	; (8001940 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 f9a1 	bl	8001c1c <_ZNSaIcEC1Ev>
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	461a      	mov	r2, r3
 80018e0:	4918      	ldr	r1, [pc, #96]	; (8001944 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80018e2:	4620      	mov	r0, r4
 80018e4:	f000 fa02 	bl	8001cec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 f996 	bl	8001c1e <_ZNSaIcED1Ev>
 80018f2:	3418      	adds	r4, #24
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f98f 	bl	8001c1c <_ZNSaIcEC1Ev>
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	461a      	mov	r2, r3
 8001904:	4910      	ldr	r1, [pc, #64]	; (8001948 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001906:	4620      	mov	r0, r4
 8001908:	f000 f9f0 	bl	8001cec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	4618      	mov	r0, r3
 8001912:	f000 f984 	bl	8001c1e <_ZNSaIcED1Ev>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10d      	bne.n	8001938 <_Z41__static_initialization_and_destruction_0ii+0x84>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001922:	4293      	cmp	r3, r2
 8001924:	d108      	bne.n	8001938 <_Z41__static_initialization_and_destruction_0ii+0x84>
 8001926:	4c09      	ldr	r4, [pc, #36]	; (800194c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800192a:	429c      	cmp	r4, r3
 800192c:	d004      	beq.n	8001938 <_Z41__static_initialization_and_destruction_0ii+0x84>
 800192e:	3c18      	subs	r4, #24
 8001930:	4620      	mov	r0, r4
 8001932:	f000 f9b1 	bl	8001c98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001936:	e7f7      	b.n	8001928 <_Z41__static_initialization_and_destruction_0ii+0x74>
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	bd90      	pop	{r4, r7, pc}
 8001940:	200000cc 	.word	0x200000cc
 8001944:	08002058 	.word	0x08002058
 8001948:	08002060 	.word	0x08002060
 800194c:	200000fc 	.word	0x200000fc

08001950 <_GLOBAL__sub_I_stm32F446>:
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
 8001954:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001958:	2001      	movs	r0, #1
 800195a:	f7ff ffab 	bl	80018b4 <_Z41__static_initialization_and_destruction_0ii>
 800195e:	bd80      	pop	{r7, pc}

08001960 <_GLOBAL__sub_D_stm32F446>:
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
 8001964:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001968:	2000      	movs	r0, #0
 800196a:	f7ff ffa3 	bl	80018b4 <_Z41__static_initialization_and_destruction_0ii>
 800196e:	bd80      	pop	{r7, pc}

08001970 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
	return 1;
 8001974:	2301      	movs	r3, #1
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_kill>:

int _kill(int pid, int sig)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800198a:	f000 f9df 	bl	8001d4c <__errno>
 800198e:	4603      	mov	r3, r0
 8001990:	2216      	movs	r2, #22
 8001992:	601a      	str	r2, [r3, #0]
	return -1;
 8001994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_exit>:

void _exit (int status)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ffe7 	bl	8001980 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019b2:	e7fe      	b.n	80019b2 <_exit+0x12>

080019b4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <_sbrk+0x50>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <_sbrk+0x16>
		heap_end = &end;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <_sbrk+0x50>)
 80019c6:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <_sbrk+0x54>)
 80019c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <_sbrk+0x50>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <_sbrk+0x50>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4413      	add	r3, r2
 80019d8:	466a      	mov	r2, sp
 80019da:	4293      	cmp	r3, r2
 80019dc:	d907      	bls.n	80019ee <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80019de:	f000 f9b5 	bl	8001d4c <__errno>
 80019e2:	4603      	mov	r3, r0
 80019e4:	220c      	movs	r2, #12
 80019e6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ec:	e006      	b.n	80019fc <_sbrk+0x48>
	}

	heap_end += incr;
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <_sbrk+0x50>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	4a03      	ldr	r2, [pc, #12]	; (8001a04 <_sbrk+0x50>)
 80019f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000128 	.word	0x20000128
 8001a08:	20000148 	.word	0x20000148

08001a0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <SystemInit+0x60>)
 8001a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a16:	4a15      	ldr	r2, [pc, #84]	; (8001a6c <SystemInit+0x60>)
 8001a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <SystemInit+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <SystemInit+0x64>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a2c:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <SystemInit+0x64>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <SystemInit+0x64>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a0e      	ldr	r2, [pc, #56]	; (8001a70 <SystemInit+0x64>)
 8001a38:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a40:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <SystemInit+0x64>)
 8001a44:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <SystemInit+0x68>)
 8001a46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <SystemInit+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <SystemInit+0x64>)
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <SystemInit+0x64>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001a5a:	f000 f80d 	bl	8001a78 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a5e:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <SystemInit+0x60>)
 8001a60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a64:	609a      	str	r2, [r3, #8]
#endif
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00
 8001a70:	40023800 	.word	0x40023800
 8001a74:	24003010 	.word	0x24003010

08001a78 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	2300      	movs	r3, #0
 8001a84:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001a86:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <SetSysClock+0x11c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a42      	ldr	r2, [pc, #264]	; (8001b94 <SetSysClock+0x11c>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001a92:	4b40      	ldr	r3, [pc, #256]	; (8001b94 <SetSysClock+0x11c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d103      	bne.n	8001ab0 <SetSysClock+0x38>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8001aae:	d1f0      	bne.n	8001a92 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001ab0:	4b38      	ldr	r3, [pc, #224]	; (8001b94 <SetSysClock+0x11c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001abc:	2301      	movs	r3, #1
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	e001      	b.n	8001ac6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d15c      	bne.n	8001b86 <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001acc:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <SetSysClock+0x11c>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4a30      	ldr	r2, [pc, #192]	; (8001b94 <SetSysClock+0x11c>)
 8001ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001ad8:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <SetSysClock+0x120>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a2e      	ldr	r2, [pc, #184]	; (8001b98 <SetSysClock+0x120>)
 8001ade:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ae2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001ae4:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <SetSysClock+0x11c>)
 8001ae6:	4a2b      	ldr	r2, [pc, #172]	; (8001b94 <SetSysClock+0x11c>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001aec:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <SetSysClock+0x11c>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a28      	ldr	r2, [pc, #160]	; (8001b94 <SetSysClock+0x11c>)
 8001af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001af6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001af8:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <SetSysClock+0x11c>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a25      	ldr	r2, [pc, #148]	; (8001b94 <SetSysClock+0x11c>)
 8001afe:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001b02:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001b04:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <SetSysClock+0x11c>)
 8001b06:	4a25      	ldr	r2, [pc, #148]	; (8001b9c <SetSysClock+0x124>)
 8001b08:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001b0a:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <SetSysClock+0x11c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a21      	ldr	r2, [pc, #132]	; (8001b94 <SetSysClock+0x11c>)
 8001b10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b14:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001b16:	bf00      	nop
 8001b18:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <SetSysClock+0x11c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f9      	beq.n	8001b18 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8001b24:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <SetSysClock+0x120>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <SetSysClock+0x120>)
 8001b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8001b30:	bf00      	nop
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <SetSysClock+0x120>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f9      	beq.n	8001b32 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <SetSysClock+0x120>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a15      	ldr	r2, [pc, #84]	; (8001b98 <SetSysClock+0x120>)
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8001b4a:	bf00      	nop
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <SetSysClock+0x120>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f9      	beq.n	8001b4c <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <SetSysClock+0x128>)
 8001b5a:	f240 7205 	movw	r2, #1797	; 0x705
 8001b5e:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <SetSysClock+0x11c>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <SetSysClock+0x11c>)
 8001b66:	f023 0303 	bic.w	r3, r3, #3
 8001b6a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <SetSysClock+0x11c>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <SetSysClock+0x11c>)
 8001b72:	f043 0302 	orr.w	r3, r3, #2
 8001b76:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001b78:	bf00      	nop
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <SetSysClock+0x11c>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d1f9      	bne.n	8001b7a <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	77405a08 	.word	0x77405a08
 8001ba0:	40023c00 	.word	0x40023c00

08001ba4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ba4:	480d      	ldr	r0, [pc, #52]	; (8001bdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ba6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba8:	480d      	ldr	r0, [pc, #52]	; (8001be0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001baa:	490e      	ldr	r1, [pc, #56]	; (8001be4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bac:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <LoopForever+0xe>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb0:	e002      	b.n	8001bb8 <LoopCopyDataInit>

08001bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb6:	3304      	adds	r3, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bbc:	d3f9      	bcc.n	8001bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bbe:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc0:	4c0b      	ldr	r4, [pc, #44]	; (8001bf0 <LoopForever+0x16>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc4:	e001      	b.n	8001bca <LoopFillZerobss>

08001bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc8:	3204      	adds	r2, #4

08001bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bcc:	d3fb      	bcc.n	8001bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bce:	f7ff ff1d 	bl	8001a0c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001bd2:	f000 f8c1 	bl	8001d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd6:	f7ff fc55 	bl	8001484 <main>

08001bda <LoopForever>:

LoopForever:
    b LoopForever
 8001bda:	e7fe      	b.n	8001bda <LoopForever>
  ldr   r0, =_estack
 8001bdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001be8:	080020cc 	.word	0x080020cc
  ldr r2, =_sbss
 8001bec:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001bf0:	20000148 	.word	0x20000148

08001bf4 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC_IRQHandler>

08001bf6 <_ZdlPvj>:
 8001bf6:	f000 b88f 	b.w	8001d18 <_ZdlPv>

08001bfa <_Znwj>:
 8001bfa:	2801      	cmp	r0, #1
 8001bfc:	bf38      	it	cc
 8001bfe:	2001      	movcc	r0, #1
 8001c00:	b510      	push	{r4, lr}
 8001c02:	4604      	mov	r4, r0
 8001c04:	4620      	mov	r0, r4
 8001c06:	f000 f8cb 	bl	8001da0 <malloc>
 8001c0a:	b930      	cbnz	r0, 8001c1a <_Znwj+0x20>
 8001c0c:	f000 f886 	bl	8001d1c <_ZSt15get_new_handlerv>
 8001c10:	b908      	cbnz	r0, 8001c16 <_Znwj+0x1c>
 8001c12:	f000 f894 	bl	8001d3e <abort>
 8001c16:	4780      	blx	r0
 8001c18:	e7f4      	b.n	8001c04 <_Znwj+0xa>
 8001c1a:	bd10      	pop	{r4, pc}

08001c1c <_ZNSaIcEC1Ev>:
 8001c1c:	4770      	bx	lr

08001c1e <_ZNSaIcED1Ev>:
 8001c1e:	4770      	bx	lr

08001c20 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8001c20:	b10a      	cbz	r2, 8001c26 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8001c22:	f000 b8cd 	b.w	8001dc0 <memcpy>
 8001c26:	4770      	bx	lr

08001c28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8001c28:	b508      	push	{r3, lr}
 8001c2a:	680b      	ldr	r3, [r1, #0]
 8001c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c30:	d302      	bcc.n	8001c38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8001c32:	480d      	ldr	r0, [pc, #52]	; (8001c68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8001c34:	f000 f880 	bl	8001d38 <_ZSt20__throw_length_errorPKc>
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d90b      	bls.n	8001c54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8001c3c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8001c40:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8001c44:	d206      	bcs.n	8001c54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8001c46:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c4a:	bf2a      	itet	cs
 8001c4c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8001c50:	6008      	strcc	r0, [r1, #0]
 8001c52:	600b      	strcs	r3, [r1, #0]
 8001c54:	6808      	ldr	r0, [r1, #0]
 8001c56:	3001      	adds	r0, #1
 8001c58:	d501      	bpl.n	8001c5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8001c5a:	f000 f867 	bl	8001d2c <_ZSt17__throw_bad_allocv>
 8001c5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001c62:	f7ff bfca 	b.w	8001bfa <_Znwj>
 8001c66:	bf00      	nop
 8001c68:	08002078 	.word	0x08002078

08001c6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8001c6c:	f850 3b08 	ldr.w	r3, [r0], #8
 8001c70:	4283      	cmp	r3, r0
 8001c72:	d002      	beq.n	8001c7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 b84f 	b.w	8001d18 <_ZdlPv>
 8001c7a:	4770      	bx	lr

08001c7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8001c7c:	2a01      	cmp	r2, #1
 8001c7e:	b510      	push	{r4, lr}
 8001c80:	d102      	bne.n	8001c88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8001c82:	780a      	ldrb	r2, [r1, #0]
 8001c84:	7002      	strb	r2, [r0, #0]
 8001c86:	bd10      	pop	{r4, pc}
 8001c88:	f7ff ffca 	bl	8001c20 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8001c8c:	e7fb      	b.n	8001c86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08001c8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8001c8e:	b508      	push	{r3, lr}
 8001c90:	1a52      	subs	r2, r2, r1
 8001c92:	f7ff fff3 	bl	8001c7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8001c96:	bd08      	pop	{r3, pc}

08001c98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8001c98:	b510      	push	{r4, lr}
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	f7ff ffe6 	bl	8001c6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	bd10      	pop	{r4, pc}

08001ca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8001ca4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	4616      	mov	r6, r2
 8001caa:	460d      	mov	r5, r1
 8001cac:	b919      	cbnz	r1, 8001cb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8001cae:	b112      	cbz	r2, 8001cb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8001cb0:	480d      	ldr	r0, [pc, #52]	; (8001ce8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8001cb2:	f000 f83e 	bl	8001d32 <_ZSt19__throw_logic_errorPKc>
 8001cb6:	1b73      	subs	r3, r6, r5
 8001cb8:	2b0f      	cmp	r3, #15
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	d907      	bls.n	8001cce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	a901      	add	r1, sp, #4
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f7ff ffb0 	bl	8001c28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8001cc8:	9b01      	ldr	r3, [sp, #4]
 8001cca:	6020      	str	r0, [r4, #0]
 8001ccc:	60a3      	str	r3, [r4, #8]
 8001cce:	4632      	mov	r2, r6
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	6820      	ldr	r0, [r4, #0]
 8001cd4:	f7ff ffdb 	bl	8001c8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8001cd8:	9b01      	ldr	r3, [sp, #4]
 8001cda:	6822      	ldr	r2, [r4, #0]
 8001cdc:	6063      	str	r3, [r4, #4]
 8001cde:	2100      	movs	r1, #0
 8001ce0:	54d1      	strb	r1, [r2, r3]
 8001ce2:	b002      	add	sp, #8
 8001ce4:	bd70      	pop	{r4, r5, r6, pc}
 8001ce6:	bf00      	nop
 8001ce8:	08002090 	.word	0x08002090

08001cec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8001cec:	b538      	push	{r3, r4, r5, lr}
 8001cee:	f100 0308 	add.w	r3, r0, #8
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	6003      	str	r3, [r0, #0]
 8001cf6:	460d      	mov	r5, r1
 8001cf8:	b159      	cbz	r1, 8001d12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8001cfa:	4608      	mov	r0, r1
 8001cfc:	f7fe fa82 	bl	8000204 <strlen>
 8001d00:	182a      	adds	r2, r5, r0
 8001d02:	4620      	mov	r0, r4
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	4629      	mov	r1, r5
 8001d0a:	f7ff ffcb 	bl	8001ca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8001d0e:	4620      	mov	r0, r4
 8001d10:	bd38      	pop	{r3, r4, r5, pc}
 8001d12:	f04f 32ff 	mov.w	r2, #4294967295
 8001d16:	e7f4      	b.n	8001d02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08001d18 <_ZdlPv>:
 8001d18:	f000 b84a 	b.w	8001db0 <free>

08001d1c <_ZSt15get_new_handlerv>:
 8001d1c:	4b02      	ldr	r3, [pc, #8]	; (8001d28 <_ZSt15get_new_handlerv+0xc>)
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	f3bf 8f5b 	dmb	ish
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	2000012c 	.word	0x2000012c

08001d2c <_ZSt17__throw_bad_allocv>:
 8001d2c:	b508      	push	{r3, lr}
 8001d2e:	f000 f806 	bl	8001d3e <abort>

08001d32 <_ZSt19__throw_logic_errorPKc>:
 8001d32:	b508      	push	{r3, lr}
 8001d34:	f000 f803 	bl	8001d3e <abort>

08001d38 <_ZSt20__throw_length_errorPKc>:
 8001d38:	b508      	push	{r3, lr}
 8001d3a:	f000 f800 	bl	8001d3e <abort>

08001d3e <abort>:
 8001d3e:	b508      	push	{r3, lr}
 8001d40:	2006      	movs	r0, #6
 8001d42:	f000 f92d 	bl	8001fa0 <raise>
 8001d46:	2001      	movs	r0, #1
 8001d48:	f7ff fe2a 	bl	80019a0 <_exit>

08001d4c <__errno>:
 8001d4c:	4b01      	ldr	r3, [pc, #4]	; (8001d54 <__errno+0x8>)
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000024 	.word	0x20000024

08001d58 <__libc_init_array>:
 8001d58:	b570      	push	{r4, r5, r6, lr}
 8001d5a:	4d0d      	ldr	r5, [pc, #52]	; (8001d90 <__libc_init_array+0x38>)
 8001d5c:	4c0d      	ldr	r4, [pc, #52]	; (8001d94 <__libc_init_array+0x3c>)
 8001d5e:	1b64      	subs	r4, r4, r5
 8001d60:	10a4      	asrs	r4, r4, #2
 8001d62:	2600      	movs	r6, #0
 8001d64:	42a6      	cmp	r6, r4
 8001d66:	d109      	bne.n	8001d7c <__libc_init_array+0x24>
 8001d68:	4d0b      	ldr	r5, [pc, #44]	; (8001d98 <__libc_init_array+0x40>)
 8001d6a:	4c0c      	ldr	r4, [pc, #48]	; (8001d9c <__libc_init_array+0x44>)
 8001d6c:	f000 f942 	bl	8001ff4 <_init>
 8001d70:	1b64      	subs	r4, r4, r5
 8001d72:	10a4      	asrs	r4, r4, #2
 8001d74:	2600      	movs	r6, #0
 8001d76:	42a6      	cmp	r6, r4
 8001d78:	d105      	bne.n	8001d86 <__libc_init_array+0x2e>
 8001d7a:	bd70      	pop	{r4, r5, r6, pc}
 8001d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d80:	4798      	blx	r3
 8001d82:	3601      	adds	r6, #1
 8001d84:	e7ee      	b.n	8001d64 <__libc_init_array+0xc>
 8001d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d8a:	4798      	blx	r3
 8001d8c:	3601      	adds	r6, #1
 8001d8e:	e7f2      	b.n	8001d76 <__libc_init_array+0x1e>
 8001d90:	080020bc 	.word	0x080020bc
 8001d94:	080020bc 	.word	0x080020bc
 8001d98:	080020bc 	.word	0x080020bc
 8001d9c:	080020c4 	.word	0x080020c4

08001da0 <malloc>:
 8001da0:	4b02      	ldr	r3, [pc, #8]	; (8001dac <malloc+0xc>)
 8001da2:	4601      	mov	r1, r0
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	f000 b869 	b.w	8001e7c <_malloc_r>
 8001daa:	bf00      	nop
 8001dac:	20000024 	.word	0x20000024

08001db0 <free>:
 8001db0:	4b02      	ldr	r3, [pc, #8]	; (8001dbc <free+0xc>)
 8001db2:	4601      	mov	r1, r0
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	f000 b811 	b.w	8001ddc <_free_r>
 8001dba:	bf00      	nop
 8001dbc:	20000024 	.word	0x20000024

08001dc0 <memcpy>:
 8001dc0:	440a      	add	r2, r1
 8001dc2:	4291      	cmp	r1, r2
 8001dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8001dc8:	d100      	bne.n	8001dcc <memcpy+0xc>
 8001dca:	4770      	bx	lr
 8001dcc:	b510      	push	{r4, lr}
 8001dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001dd6:	4291      	cmp	r1, r2
 8001dd8:	d1f9      	bne.n	8001dce <memcpy+0xe>
 8001dda:	bd10      	pop	{r4, pc}

08001ddc <_free_r>:
 8001ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001dde:	2900      	cmp	r1, #0
 8001de0:	d048      	beq.n	8001e74 <_free_r+0x98>
 8001de2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001de6:	9001      	str	r0, [sp, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f1a1 0404 	sub.w	r4, r1, #4
 8001dee:	bfb8      	it	lt
 8001df0:	18e4      	addlt	r4, r4, r3
 8001df2:	f000 f8f1 	bl	8001fd8 <__malloc_lock>
 8001df6:	4a20      	ldr	r2, [pc, #128]	; (8001e78 <_free_r+0x9c>)
 8001df8:	9801      	ldr	r0, [sp, #4]
 8001dfa:	6813      	ldr	r3, [r2, #0]
 8001dfc:	4615      	mov	r5, r2
 8001dfe:	b933      	cbnz	r3, 8001e0e <_free_r+0x32>
 8001e00:	6063      	str	r3, [r4, #4]
 8001e02:	6014      	str	r4, [r2, #0]
 8001e04:	b003      	add	sp, #12
 8001e06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001e0a:	f000 b8eb 	b.w	8001fe4 <__malloc_unlock>
 8001e0e:	42a3      	cmp	r3, r4
 8001e10:	d90b      	bls.n	8001e2a <_free_r+0x4e>
 8001e12:	6821      	ldr	r1, [r4, #0]
 8001e14:	1862      	adds	r2, r4, r1
 8001e16:	4293      	cmp	r3, r2
 8001e18:	bf04      	itt	eq
 8001e1a:	681a      	ldreq	r2, [r3, #0]
 8001e1c:	685b      	ldreq	r3, [r3, #4]
 8001e1e:	6063      	str	r3, [r4, #4]
 8001e20:	bf04      	itt	eq
 8001e22:	1852      	addeq	r2, r2, r1
 8001e24:	6022      	streq	r2, [r4, #0]
 8001e26:	602c      	str	r4, [r5, #0]
 8001e28:	e7ec      	b.n	8001e04 <_free_r+0x28>
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	b10b      	cbz	r3, 8001e34 <_free_r+0x58>
 8001e30:	42a3      	cmp	r3, r4
 8001e32:	d9fa      	bls.n	8001e2a <_free_r+0x4e>
 8001e34:	6811      	ldr	r1, [r2, #0]
 8001e36:	1855      	adds	r5, r2, r1
 8001e38:	42a5      	cmp	r5, r4
 8001e3a:	d10b      	bne.n	8001e54 <_free_r+0x78>
 8001e3c:	6824      	ldr	r4, [r4, #0]
 8001e3e:	4421      	add	r1, r4
 8001e40:	1854      	adds	r4, r2, r1
 8001e42:	42a3      	cmp	r3, r4
 8001e44:	6011      	str	r1, [r2, #0]
 8001e46:	d1dd      	bne.n	8001e04 <_free_r+0x28>
 8001e48:	681c      	ldr	r4, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	6053      	str	r3, [r2, #4]
 8001e4e:	4421      	add	r1, r4
 8001e50:	6011      	str	r1, [r2, #0]
 8001e52:	e7d7      	b.n	8001e04 <_free_r+0x28>
 8001e54:	d902      	bls.n	8001e5c <_free_r+0x80>
 8001e56:	230c      	movs	r3, #12
 8001e58:	6003      	str	r3, [r0, #0]
 8001e5a:	e7d3      	b.n	8001e04 <_free_r+0x28>
 8001e5c:	6825      	ldr	r5, [r4, #0]
 8001e5e:	1961      	adds	r1, r4, r5
 8001e60:	428b      	cmp	r3, r1
 8001e62:	bf04      	itt	eq
 8001e64:	6819      	ldreq	r1, [r3, #0]
 8001e66:	685b      	ldreq	r3, [r3, #4]
 8001e68:	6063      	str	r3, [r4, #4]
 8001e6a:	bf04      	itt	eq
 8001e6c:	1949      	addeq	r1, r1, r5
 8001e6e:	6021      	streq	r1, [r4, #0]
 8001e70:	6054      	str	r4, [r2, #4]
 8001e72:	e7c7      	b.n	8001e04 <_free_r+0x28>
 8001e74:	b003      	add	sp, #12
 8001e76:	bd30      	pop	{r4, r5, pc}
 8001e78:	20000130 	.word	0x20000130

08001e7c <_malloc_r>:
 8001e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e7e:	1ccd      	adds	r5, r1, #3
 8001e80:	f025 0503 	bic.w	r5, r5, #3
 8001e84:	3508      	adds	r5, #8
 8001e86:	2d0c      	cmp	r5, #12
 8001e88:	bf38      	it	cc
 8001e8a:	250c      	movcc	r5, #12
 8001e8c:	2d00      	cmp	r5, #0
 8001e8e:	4606      	mov	r6, r0
 8001e90:	db01      	blt.n	8001e96 <_malloc_r+0x1a>
 8001e92:	42a9      	cmp	r1, r5
 8001e94:	d903      	bls.n	8001e9e <_malloc_r+0x22>
 8001e96:	230c      	movs	r3, #12
 8001e98:	6033      	str	r3, [r6, #0]
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e9e:	f000 f89b 	bl	8001fd8 <__malloc_lock>
 8001ea2:	4921      	ldr	r1, [pc, #132]	; (8001f28 <_malloc_r+0xac>)
 8001ea4:	680a      	ldr	r2, [r1, #0]
 8001ea6:	4614      	mov	r4, r2
 8001ea8:	b99c      	cbnz	r4, 8001ed2 <_malloc_r+0x56>
 8001eaa:	4f20      	ldr	r7, [pc, #128]	; (8001f2c <_malloc_r+0xb0>)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	b923      	cbnz	r3, 8001eba <_malloc_r+0x3e>
 8001eb0:	4621      	mov	r1, r4
 8001eb2:	4630      	mov	r0, r6
 8001eb4:	f000 f83c 	bl	8001f30 <_sbrk_r>
 8001eb8:	6038      	str	r0, [r7, #0]
 8001eba:	4629      	mov	r1, r5
 8001ebc:	4630      	mov	r0, r6
 8001ebe:	f000 f837 	bl	8001f30 <_sbrk_r>
 8001ec2:	1c43      	adds	r3, r0, #1
 8001ec4:	d123      	bne.n	8001f0e <_malloc_r+0x92>
 8001ec6:	230c      	movs	r3, #12
 8001ec8:	6033      	str	r3, [r6, #0]
 8001eca:	4630      	mov	r0, r6
 8001ecc:	f000 f88a 	bl	8001fe4 <__malloc_unlock>
 8001ed0:	e7e3      	b.n	8001e9a <_malloc_r+0x1e>
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	1b5b      	subs	r3, r3, r5
 8001ed6:	d417      	bmi.n	8001f08 <_malloc_r+0x8c>
 8001ed8:	2b0b      	cmp	r3, #11
 8001eda:	d903      	bls.n	8001ee4 <_malloc_r+0x68>
 8001edc:	6023      	str	r3, [r4, #0]
 8001ede:	441c      	add	r4, r3
 8001ee0:	6025      	str	r5, [r4, #0]
 8001ee2:	e004      	b.n	8001eee <_malloc_r+0x72>
 8001ee4:	6863      	ldr	r3, [r4, #4]
 8001ee6:	42a2      	cmp	r2, r4
 8001ee8:	bf0c      	ite	eq
 8001eea:	600b      	streq	r3, [r1, #0]
 8001eec:	6053      	strne	r3, [r2, #4]
 8001eee:	4630      	mov	r0, r6
 8001ef0:	f000 f878 	bl	8001fe4 <__malloc_unlock>
 8001ef4:	f104 000b 	add.w	r0, r4, #11
 8001ef8:	1d23      	adds	r3, r4, #4
 8001efa:	f020 0007 	bic.w	r0, r0, #7
 8001efe:	1ac2      	subs	r2, r0, r3
 8001f00:	d0cc      	beq.n	8001e9c <_malloc_r+0x20>
 8001f02:	1a1b      	subs	r3, r3, r0
 8001f04:	50a3      	str	r3, [r4, r2]
 8001f06:	e7c9      	b.n	8001e9c <_malloc_r+0x20>
 8001f08:	4622      	mov	r2, r4
 8001f0a:	6864      	ldr	r4, [r4, #4]
 8001f0c:	e7cc      	b.n	8001ea8 <_malloc_r+0x2c>
 8001f0e:	1cc4      	adds	r4, r0, #3
 8001f10:	f024 0403 	bic.w	r4, r4, #3
 8001f14:	42a0      	cmp	r0, r4
 8001f16:	d0e3      	beq.n	8001ee0 <_malloc_r+0x64>
 8001f18:	1a21      	subs	r1, r4, r0
 8001f1a:	4630      	mov	r0, r6
 8001f1c:	f000 f808 	bl	8001f30 <_sbrk_r>
 8001f20:	3001      	adds	r0, #1
 8001f22:	d1dd      	bne.n	8001ee0 <_malloc_r+0x64>
 8001f24:	e7cf      	b.n	8001ec6 <_malloc_r+0x4a>
 8001f26:	bf00      	nop
 8001f28:	20000130 	.word	0x20000130
 8001f2c:	20000134 	.word	0x20000134

08001f30 <_sbrk_r>:
 8001f30:	b538      	push	{r3, r4, r5, lr}
 8001f32:	4d06      	ldr	r5, [pc, #24]	; (8001f4c <_sbrk_r+0x1c>)
 8001f34:	2300      	movs	r3, #0
 8001f36:	4604      	mov	r4, r0
 8001f38:	4608      	mov	r0, r1
 8001f3a:	602b      	str	r3, [r5, #0]
 8001f3c:	f7ff fd3a 	bl	80019b4 <_sbrk>
 8001f40:	1c43      	adds	r3, r0, #1
 8001f42:	d102      	bne.n	8001f4a <_sbrk_r+0x1a>
 8001f44:	682b      	ldr	r3, [r5, #0]
 8001f46:	b103      	cbz	r3, 8001f4a <_sbrk_r+0x1a>
 8001f48:	6023      	str	r3, [r4, #0]
 8001f4a:	bd38      	pop	{r3, r4, r5, pc}
 8001f4c:	20000138 	.word	0x20000138

08001f50 <_raise_r>:
 8001f50:	291f      	cmp	r1, #31
 8001f52:	b538      	push	{r3, r4, r5, lr}
 8001f54:	4604      	mov	r4, r0
 8001f56:	460d      	mov	r5, r1
 8001f58:	d904      	bls.n	8001f64 <_raise_r+0x14>
 8001f5a:	2316      	movs	r3, #22
 8001f5c:	6003      	str	r3, [r0, #0]
 8001f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f62:	bd38      	pop	{r3, r4, r5, pc}
 8001f64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001f66:	b112      	cbz	r2, 8001f6e <_raise_r+0x1e>
 8001f68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001f6c:	b94b      	cbnz	r3, 8001f82 <_raise_r+0x32>
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f000 f830 	bl	8001fd4 <_getpid_r>
 8001f74:	462a      	mov	r2, r5
 8001f76:	4601      	mov	r1, r0
 8001f78:	4620      	mov	r0, r4
 8001f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f7e:	f000 b817 	b.w	8001fb0 <_kill_r>
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d00a      	beq.n	8001f9c <_raise_r+0x4c>
 8001f86:	1c59      	adds	r1, r3, #1
 8001f88:	d103      	bne.n	8001f92 <_raise_r+0x42>
 8001f8a:	2316      	movs	r3, #22
 8001f8c:	6003      	str	r3, [r0, #0]
 8001f8e:	2001      	movs	r0, #1
 8001f90:	e7e7      	b.n	8001f62 <_raise_r+0x12>
 8001f92:	2400      	movs	r4, #0
 8001f94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001f98:	4628      	mov	r0, r5
 8001f9a:	4798      	blx	r3
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	e7e0      	b.n	8001f62 <_raise_r+0x12>

08001fa0 <raise>:
 8001fa0:	4b02      	ldr	r3, [pc, #8]	; (8001fac <raise+0xc>)
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	f7ff bfd3 	b.w	8001f50 <_raise_r>
 8001faa:	bf00      	nop
 8001fac:	20000024 	.word	0x20000024

08001fb0 <_kill_r>:
 8001fb0:	b538      	push	{r3, r4, r5, lr}
 8001fb2:	4d07      	ldr	r5, [pc, #28]	; (8001fd0 <_kill_r+0x20>)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	4608      	mov	r0, r1
 8001fba:	4611      	mov	r1, r2
 8001fbc:	602b      	str	r3, [r5, #0]
 8001fbe:	f7ff fcdf 	bl	8001980 <_kill>
 8001fc2:	1c43      	adds	r3, r0, #1
 8001fc4:	d102      	bne.n	8001fcc <_kill_r+0x1c>
 8001fc6:	682b      	ldr	r3, [r5, #0]
 8001fc8:	b103      	cbz	r3, 8001fcc <_kill_r+0x1c>
 8001fca:	6023      	str	r3, [r4, #0]
 8001fcc:	bd38      	pop	{r3, r4, r5, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000138 	.word	0x20000138

08001fd4 <_getpid_r>:
 8001fd4:	f7ff bccc 	b.w	8001970 <_getpid>

08001fd8 <__malloc_lock>:
 8001fd8:	4801      	ldr	r0, [pc, #4]	; (8001fe0 <__malloc_lock+0x8>)
 8001fda:	f000 b809 	b.w	8001ff0 <__retarget_lock_acquire_recursive>
 8001fde:	bf00      	nop
 8001fe0:	20000140 	.word	0x20000140

08001fe4 <__malloc_unlock>:
 8001fe4:	4801      	ldr	r0, [pc, #4]	; (8001fec <__malloc_unlock+0x8>)
 8001fe6:	f000 b804 	b.w	8001ff2 <__retarget_lock_release_recursive>
 8001fea:	bf00      	nop
 8001fec:	20000140 	.word	0x20000140

08001ff0 <__retarget_lock_acquire_recursive>:
 8001ff0:	4770      	bx	lr

08001ff2 <__retarget_lock_release_recursive>:
 8001ff2:	4770      	bx	lr

08001ff4 <_init>:
 8001ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff6:	bf00      	nop
 8001ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ffa:	bc08      	pop	{r3}
 8001ffc:	469e      	mov	lr, r3
 8001ffe:	4770      	bx	lr

08002000 <_fini>:
 8002000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002002:	bf00      	nop
 8002004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002006:	bc08      	pop	{r3}
 8002008:	469e      	mov	lr, r3
 800200a:	4770      	bx	lr
